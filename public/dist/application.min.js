"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngFileUpload","chart.js","angular-toArrayFilter","720kb.tooltips","ngRoute","n3-line-chart","btford.socket-io","ngWYSIWYG"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!/home"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("admin",["users"]),ApplicationConfiguration.registerModule("core",["users"]),ApplicationConfiguration.registerModule("financial"),ApplicationConfiguration.registerModule("financialEducation"),ApplicationConfiguration.registerModule("financialtools"),ApplicationConfiguration.registerModule("milestones"),ApplicationConfiguration.registerModule("social"),ApplicationConfiguration.registerModule("users"),angular.module("admin").config(["$stateProvider",function($stateProvider){$stateProvider.state("adminUsers",{url:"/admin/users",templateUrl:"modules/admin/views/admin-users.client.view.html"}).state("adminAssets",{url:"/admin/assets",templateUrl:"modules/admin/views/admin-assets.client.view.html"}).state("adminStatistics1",{url:"/admin/statistics",templateUrl:"modules/admin/views/admin-statistics.client.view.html"}).state("adminStatistics2",{url:"/admin/statistics/financialHealth",templateUrl:"modules/admin/views/admin-statistics-financialHealth.client.view.html"}).state("adminStatistics3",{url:"/admin/statistics/financialSummary",templateUrl:"modules/admin/views/admin-statistics-usageFinancialSummary.client.view.html"}).state("adminStatistics4",{url:"/admin/statistics/milestones",templateUrl:"modules/admin/views/admin-statistics-milestoneCompletion.client.view.html"}).state("adminStatistics5",{url:"/admin/statistics/socialActivity",templateUrl:"modules/admin/views/admin-statistics-socialActivity.client.view.html"})}]),angular.module("admin").controller("AdminController",["$scope","$http","$location","Authentication","$window","$state",function($scope,$http,$location,Authentication,$window,$state){if($scope.user=Authentication.user,$scope.user){var userType=$scope.user.roles;0!==userType[0].localeCompare("admin")&&$location.path("/")}else $location.path("/");$scope.emailSelected=null,$scope.goToDB=function(){$window.open("https://mongolab.com/databases/fyphexa")},$scope.goToAWS=function(){$window.open("https://console.aws.amazon.com/s3/home?bucket=hexapic&prefix=assets%2F&region=us-west-2#")},$scope.retrieveUserRecordsInit=function(){$scope.success=$scope.error=null,$scope.successRetrieve=null,$http.get("/admin/retrieveUsers").then(function(response){$scope.userList=response.data,$scope.emailSelected=null,$scope.userRecord=null})},$scope.retrieveUserRecords=function(){$scope.success=$scope.error=null,$scope.successRetrieve=null,$http.get("/admin/retrieveUsers").then(function(response){$scope.userList=response.data,$scope.emailSelected=null,$scope.userRecord=null,$scope.successRetrieve=!0})},$scope.showRecord=function(email){$scope.successRetrieve=!1,$scope.emailSelected=email,$scope.userList.forEach(function(user){user.email===email&&($scope.userRecord=angular.toJson(user,!0))})},$scope.updateRecord=function(){$http.put("/admin/updateUser",{userEmail:$scope.emailSelected,userRecord:$scope.userRecord}).success(function(response){$http.get("/admin/retrieveUsers").then(function(response){$scope.userList=response.data}),$scope.userRecord=angular.toJson(response,!0),$scope.success=!0}).error(function(response){console.log(response.data.message),$scope.error=response.data.message})},$scope.deleteRecord=function(){console.log($scope.emailSelected),$scope.emailSelected?$http.put("/admin/deleteUser",{userEmail:$scope.emailSelected,userRecord:$scope.userRecord}).success(function(response){console.log(response),$scope.userList=response,$scope.successDelete=!0,$scope.userRecord=null,$scope.emailSelected=null}).error(function(response){$scope.errorDelete=response.data.message}):(console.log("lol"),$scope.errorDelete="User not selected")},$scope.checkDelete=function(){$scope.successDelete=null,$scope.errorDelete=null,$scope.emailSelected||($scope.errorDelete="User not selected")},$scope.createNewUser=function(){$http.post("/admin/createUser",$scope.credentials).success(function(response){console.log(response),$scope.userList=response,$scope.successCreate=!0}).error(function(response){$scope.errorCreate=response.message})},$scope.decachedImageUrl="https://hexapic.s3.amazonaws.com/assets/default?decache="+Math.random();var upload_file=function(file,signed_request,url){$http.put(signed_request,file).success(function(response){$scope.uploaded=!0;var newImage=url+"?decache="+Math.random();$http.get(newImage).then(function(response){$scope.decachedImageUrl=newImage},function(response){})}).error(function(response){alert("Could not upload file.")})},upload=function(file){$scope.assetName=$scope.assetDetails.name,$scope.assetType=file.type,$http.put("/signawsAdmin",{assetName:$scope.assetName,assetType:$scope.assetType}).success(function(response){upload_file(file,response.signed_request,response.url)}).error(function(response){alert("Could not get signed URL.")})};$scope.addNewAsset=function(file){upload(file),console.log($scope.assetDetails.name),$scope.assetDetails.image=$scope.assetDetails.name,$http.post("/admin/addNewAsset",$scope.assetDetails).success(function(response){console.log(response),$scope.assets=response,$scope.successAddAsset=!0,$scope.successUpdateRecords=$scope.errorUpdateRecords=null,$scope.successRetrieveAssets=null,$http.get("/admin/retrieveAssets").then(function(response){$scope.assetList=response.data,$scope.assetSelected=null,$scope.assetRecord=null})}).error(function(response){$scope.errorAddAsset=response.message})},$scope.retrieveAssetRecordsInit=function(){$scope.successUpdateRecords=$scope.errorUpdateRecords=null,$scope.successRetrieveAssets=null,$http.get("/admin/retrieveAssets").then(function(response){$scope.assetList=response.data,$scope.assetSelected=null,$scope.assetRecord=null})},$scope.retrieveAssetRecords=function(){$scope.successUpdateRecords=$scope.errorUpdateRecords=null,$scope.successRetrieveAssets=null,$scope.assetRecordShow=!1,$http.get("/admin/retrieveAssets").then(function(response){$scope.assetList=response.data,$scope.assetSelected=null,$scope.assetRecord=null,$scope.successRetrieveAssets=!0})},$scope.showAssetRecord=function(assetName){$scope.assetRecordShow=!0,$scope.successUpdateAssets=$scope.successAssetDelete=$scope.errorAssetDelete=null;var imageUrl="https://hexapic.s3.amazonaws.com/assets/";$scope.assetImageUrl=imageUrl+assetName+"?decache="+Math.random(),$scope.successRetrieveAssets=!1,$scope.assetSelected=assetName,$scope.assetList.forEach(function(asset){asset.name===assetName&&($scope.assetRecord=asset)})},$scope.updateAssetRecord=function(){$http.put("/admin/updateAsset",{assetName:$scope.assetSelected,assetRecord:$scope.assetRecord}).success(function(response){$http.get("/admin/retrieveAssets").then(function(response){$scope.assetList=response.data}),$scope.assetRecord=response,$scope.successUpdateAssets=!0}).error(function(response){console.log(response.data.message),$scope.errorUpdateAssets=response.data.message})},$scope.deleteAssetRecord=function(){$http.put("/admin/deleteAsset",{assetName:$scope.assetSelected,assetRecord:$scope.assetRecord}).success(function(response){console.log(response),$scope.assetList=response,$scope.successAssetDelete=!0,$scope.assetRecord=null,$scope.assetSelected=null}).error(function(response){$scope.errorAssetDelete=response.data.message})},$scope.demographicsOption=["Age of Users","Education Level","Current Employment","Highest Value of House Owned"],$scope.demographicsOptionFinancial=["Average Monthly Net Income","Average Monthly Net Expenditure","Average Monthly Savings","History of Credit Defaults","Bankruptcy in past 6 years","No. of Credit Cards owned"];var retrieveUserDemographics=function(){$http.get("/admin/retrieveStatisticsCreditProfile").then(function(response){console.log(response),$scope.userDemographicsData=response.data,$scope.labelsUsers=["Completed","Incomplete"],$scope.dataUsers=[$scope.userDemographicsData.numCompletedCreditProfile,$scope.userDemographicsData.numIncompleteCreditProfile],$scope.totalNumUsers=$scope.userDemographicsData.totalUsers,$scope.usersComplete=$scope.userDemographicsData.numCompletedCreditProfile,$scope.usersIncomplete=$scope.userDemographicsData.numIncompleteCreditProfile,$scope.labels=["20-30","31-40","41-50","51-60","> 60"],$scope.series=["User age"],$scope.data=[$scope.userDemographicsData.ageArr],$scope.labelsFinancial=["> $10,000","$8,000 - $10,000","$6,000 - $8,000","$4,000 - $6,000","$1,000 - $4,000","< $1,000","NA"],$scope.seriesFinancial=["Average Monthly Net Income"],$scope.dataFinancial=[$scope.userDemographicsData.avgIncomeArr]})};retrieveUserDemographics(),$scope.$watch("selectedDemographicsOption",function(){$scope.selectedDemographicsOption===$scope.demographicsOption[0]?($scope.labels=["20-30","31-40","41-50","51-60","> 60"],$scope.series=["User Age"],$scope.userDemographicsData&&($scope.data=[$scope.userDemographicsData.ageArr])):$scope.selectedDemographicsOption===$scope.demographicsOption[1]?($scope.labels=["PhD","Masters","Graduate","Undergraduate","A/O/N Levels","PSLE & Below"],$scope.series=["User Education Level"],$scope.userDemographicsData&&($scope.data=[$scope.userDemographicsData.educationLevelArr])):$scope.selectedDemographicsOption===$scope.demographicsOption[2]?($scope.labels=["Salaried Employee","Businessman/Self-employed","Student","Unemployed"],$scope.series=["User Current Employment"],$scope.userDemographicsData&&($scope.data=[$scope.userDemographicsData.currentEmploymentArr])):$scope.selectedDemographicsOption===$scope.demographicsOption[3]&&($scope.labels=["Landed Property","Condo/ Private Apartments","HDB Executive Flats/ HUDC Flats/ Studio Apartments","HDB (Others)","Shop houses/ other housing units","N/A"],$scope.series=["User Highest Value of House Owned"],$scope.userDemographicsData&&($scope.data=[$scope.userDemographicsData.housingOwnedArr]))}),$scope.$watch("selectedDemographicsOptionFinancial",function(){$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[0]?($scope.labelsFinancial=["> $10,000","$8,000 - $10,000","$6,000 - $8,000","$4,000 - $6,000","$1,000 - $4,000","< $1,000","NA"],$scope.seriesFinancial=["Average Monthly Net Income"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.avgIncomeArr])):$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[1]?($scope.labelsFinancial=["> $10,000","$8,000 - $10,000","$6,000 - $8,000","$4,000 - $6,000","$1,000 - $4,000","< $1,000","NA"],$scope.seriesFinancial=["Average Monthly Net Expenditure"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.avgExpenseArr])):$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[2]?($scope.labelsFinancial=["> $10,000","$8,000 - $10,000","$6,000 - $8,000","$4,000 - $6,000","$1,000 - $4,000","< $1,000","NA"],$scope.seriesFinancial=["Average Monthly Net Savings"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.avgSavingsArr])):$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[3]?($scope.labelsFinancial=["90 days default","60 days default","30 days default","NA"],$scope.seriesFinancial=["History of Credit Defaults"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.creditHistoryArr])):$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[4]?($scope.labelsFinancial=["Yes","No"],$scope.seriesFinancial=["Bankruptcy in past 6 years"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.bankruptStatusArr])):$scope.selectedDemographicsOptionFinancial===$scope.demographicsOptionFinancial[5]&&($scope.labelsFinancial=["5 or more","3 - 4","2","1","0"],$scope.seriesFinancial=["No. of Credit Cards owned"],$scope.userDemographicsData&&($scope.dataFinancial=[$scope.userDemographicsData.numCreditCardArr]))}),$scope.monthArr=["January","February","March","April","May","June","July","August","September","October","November","December"];var initiateCurrentDate=function(){$scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),$scope.selectedYearTo=$scope.year,$scope.monthFrom=$scope.month-2,$scope.selectedYearFrom=$scope.year,$scope.monthFrom<0&&($scope.monthFrom=12+$scope.month-2,$scope.selectedYearFrom=$scope.year)};initiateCurrentDate();var retrieveFinancialUsage=function(){var mthStart,numMonths=0,selectedMonthArr=[];if($scope.selectedYearFrom===$scope.selectedYearTo)for(numMonths=$scope.month-$scope.monthFrom+1,mthStart=$scope.monthFrom;mthStart<=$scope.month;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++;else try{for(numMonths+=11-$scope.monthFrom+1,mthStart=$scope.monthFrom;12>mthStart;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++;for($scope.selectedYearFrom+=1;$scope.selectedYearFrom!==$scope.selectedYearTo;){numMonths+=12;for(var i=0;12>i;i++)selectedMonthArr.push([i,$scope.selectedYearFrom]);$scope.selectedYearFrom++}for(numMonths+=$scope.month+1,mthStart=0;mthStart<=$scope.month;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++}catch(err){console.log(err)}$http.put("/admin/retrieveFinancialUsage",{monthFrom:$scope.monthFrom,yearFrom:$scope.selectedYearFrom,monthTo:$scope.month,yearTo:$scope.selectedYearTo,numMonths:numMonths,selectedMonthArr:selectedMonthArr}).success(function(response){$scope.userFinancialUsageData=response,selectedMonthArr.forEach(function(monthYearArr){monthYearArr[0]=$scope.monthArr[monthYearArr[0]]}),$scope.labelsFinancialUsage=selectedMonthArr,$scope.seriesFinancialUsage=["Updated Assets","Updated Liabilities","Updated Income"],$scope.dataFinancialUsage=[$scope.userFinancialUsageData.assetsArr,$scope.userFinancialUsageData.liabilitiesArr,$scope.userFinancialUsageData.incomeExpenseArr]}).error(function(response){console.log(response)})};retrieveFinancialUsage(),$scope.reloadFinancialUsage=function(){console.log("reload");for(var yearFrom=angular.copy($scope.selectedYearFrom),i=0;i<$scope.monthArr.length;i++)$scope.monthArr[i]===$scope.selectedMonthFrom&&($scope.monthFrom=i),$scope.monthArr[i]===$scope.selectedMonthTo&&($scope.month=i);retrieveFinancialUsage(),$scope.selectedYearFrom=yearFrom};var retrieveSocialActivity=function(){var mthStart,numMonths=0,selectedMonthArr=[];if($scope.selectedYearFrom===$scope.selectedYearTo)for(numMonths=$scope.month-$scope.monthFrom+1,mthStart=$scope.monthFrom;mthStart<=$scope.month;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++;else try{for(numMonths+=11-$scope.monthFrom+1,mthStart=$scope.monthFrom;12>mthStart;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++;for($scope.selectedYearFrom+=1;$scope.selectedYearFrom!==$scope.selectedYearTo;){numMonths+=12;for(var i=0;12>i;i++)selectedMonthArr.push([i,$scope.selectedYearFrom]);$scope.selectedYearFrom++}for(numMonths+=$scope.month+1,mthStart=0;mthStart<=$scope.month;)selectedMonthArr.push([mthStart,$scope.selectedYearFrom]),mthStart++}catch(err){console.log(err)}$http.put("/admin/retrieveSocialActivity",{monthFrom:$scope.monthFrom,yearFrom:$scope.selectedYearFrom,monthTo:$scope.month,yearTo:$scope.selectedYearTo,numMonths:numMonths,selectedMonthArr:selectedMonthArr}).success(function(response){$scope.userSocialActivityData=response,selectedMonthArr.forEach(function(monthYearArr){monthYearArr[0]=$scope.monthArr[monthYearArr[0]]}),$scope.labelsSocialActivity=selectedMonthArr,$scope.seriesSocialActivity=["Posts Created","Comments Created"],$scope.dataSocialActivity=[$scope.userSocialActivityData.postsArr,$scope.userSocialActivityData.commentsArr]}).error(function(response){console.log(response)})};retrieveSocialActivity(),$scope.reloadSocialActivity=function(){console.log("reload");for(var yearFrom=angular.copy($scope.selectedYearFrom),i=0;i<$scope.monthArr.length;i++)$scope.monthArr[i]===$scope.selectedMonthFrom&&($scope.monthFrom=i),$scope.monthArr[i]===$scope.selectedMonthTo&&($scope.month=i);retrieveSocialActivity(),$scope.selectedYearFrom=yearFrom}}]),angular.module("core").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Home","home","/home"),Menus.addMenuItem("topbar","Financial Health","financialhealth","/financialhealth"),Menus.addMenuItem("topbar","Financial Summary","financialrecord","/financialrecord"),Menus.addMenuItem("topbar","Cash Expense Tracker","budget","/budget"),Menus.addMenuItem("topbar","Milestones","milestones","/milestones"),Menus.addMenuItem("topbar","Financial Tools","financialtools","dropdown","/financialtools"),Menus.addSubMenuItem("topbar","financialtools","Loan Calculator","financialtools/loancalculator"),Menus.addSubMenuItem("topbar","financialtools","Retirement Planning Calculator","financialtools/retirementCalculator"),Menus.addMenuItem("topbar","Financial Education","financialEducation","/financialEducation"),Menus.addMenuItem("topbar","Social","social","dropdown","/social"),Menus.addSubMenuItem("topbar","social","View Posts","social/posts"),Menus.addSubMenuItem("topbar","social","Manage Friends","social/friends"),Menus.addSubMenuItem("topbar","social","Find Users","social/users")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("landing",{url:"/",templateUrl:"modules/core/views/landing.client.view.html"}).state("home",{url:"/home",templateUrl:"modules/core/views/home.client.view.html"}).state("financialhealth",{url:"/financialhealth",templateUrl:"modules/financial/views/financialhealth.client.view.html"}).state("financial",{url:"/financialrecord",templateUrl:"modules/financial/views/overview.client.view.html"}).state("manageAssets",{url:"/financialrecord/assets",templateUrl:"modules/financial/views/manage-assets.client.view.html"}).state("manageLiabilities",{url:"/financialrecord/liabilities",templateUrl:"modules/financial/views/manage-liabilities.client.view.html"}).state("manageIncomeExpense",{url:"/financialrecord/incomeExpense",templateUrl:"modules/financial/views/manage-incomeExpense.client.view.html"}).state("manageDebts",{url:"/financialrecord/debts",templateUrl:"modules/financial/views/manage-debts.client.view.html"}).state("manageInsurances",{url:"/financialrecord/insurances",templateUrl:"modules/financial/views/manage-insurances.client.view.html"}).state("repaymentTool",{url:"/financialtools/loancalculator",templateUrl:"modules/financialtools/views/repaymentCalculator.client.view.html"}).state("amtBorrow",{url:"/financialtools/amtborrow",templateUrl:"modules/financialtools/views/amtToBorrowCalculator.client.view.html"}).state("timeRepay",{url:"/financialtools/timetorepay",templateUrl:"modules/financialtools/views/timeToRepayCalculator.client.view.html"}).state("milestones",{url:"/milestones",templateUrl:"modules/milestones/views/view-milestones.client.view.html"}).state("updateMilestone",{url:"/milestones/updatemilestone",templateUrl:"modules/milestones/views/update-Milestone.client.view.html"}).state("manageBudget",{url:"/budget",templateUrl:"modules/financial/views/manage-budget.client.view.html"}).state("socialPost",{url:"/social/posts",templateUrl:"modules/social/views/socialpost.client.view.html"}).state("socialFriends",{url:"/social/friends",templateUrl:"modules/social/views/socialfriends.client.view.html"}).state("socialUsers",{url:"/social/users",templateUrl:"modules/social/views/socialusers.client.view.html"}).state("notification",{url:"/settings/notification",templateUrl:"modules/core/views/notification.client.view.html"}).state("financialEducation",{url:"/financialEducation",templateUrl:"modules/financialEducation/views/financialEducation.client.view.html"}).state("retirementCalculator",{url:"/financialtools/retirementCalculator",templateUrl:"modules/financialtools/views/retirementPlanningCalculator.client.view.html"}).state("retirementCompoundCalculator",{url:"/financialtools/retirementCalculatorWithCompounding",templateUrl:"modules/financialtools/views/retirementCompoundCalculator.client.view.html"}).state("forum",{url:"/social",templateUrl:"modules/social/views/social.client.view.html"})}]),angular.module("core").controller("HeaderController",["$rootScope","$scope","Authentication","Menus","$http","$state",function($rootScope,$scope,Authentication,Menus,$http,$state){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.redirectHome="/#!/",$scope.user&&($scope.redirectHome="/#!/home"),$scope.user||($scope.redirectHome="/#!/"),$scope.$watch("authentication.user",function(){$scope.user=Authentication.user,$scope.user&&($scope.imageUrl="https://hexapic.s3.amazonaws.com/"+$scope.user.profilePic+"?decache="+Math.random(),console.log($scope.user.profilePic),$http.get($scope.imageUrl).then(function(response){$scope.imageReady=!0},function(response){$scope.imageReady=!1}))}),$rootScope.$watch("profileImgUrl",function(){$rootScope.profileImgUrl&&($scope.imageUrl=$rootScope.profileImgUrl+"?decache="+Math.random(),$http.get($scope.imageUrl).then(function(response){$scope.imageReady=!0,$state.go($state.current,{},{reload:!0})},function(response){$scope.imageReady=!1}))})}]),angular.module("core").controller("HomeController",["$scope","Authentication","CreditService","$location","$http",function($scope,Authentication,CreditService,$location,$http){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.rankIcon="./img/rank/diamond0.jpg",$scope.user.currentCreditRating||($scope.user.currentCreditRating=0),$scope.creditGrade=CreditService.creditGrade($scope.user.currentCreditRating),"D"===$scope.creditGrade[0]?$scope.rankIcon="./img/rank/diamond2.png":"C"===$scope.creditGrade[0]?$scope.rankIcon="./img/rank/diamond3.png":"B"===$scope.creditGrade[0]?$scope.rankIcon="./img/rank/diamond4.png":"A"===$scope.creditGrade[0]&&($scope.rankIcon="./img/rank/diamond5.png");var score=0;$scope.user.completeQns&&(score+=1),$scope.user.updatedAssets&&(score+=1),$scope.user.updatedLiabilities&&(score+=1),$scope.user.updatedIncomeExpense&&(score+=1),$scope.user.updatedManageDebt&&(score+=1),$scope.user.updatedMilestones&&(score+=1),$scope.user.updatedProfileSettings&&(score+=1),$scope.user.updatedBudget&&(score+=1),$scope.completeBar=Number(score/8*100).toFixed(2),$scope.profileCompleteness=!1,$scope.user.completeQns&&$scope.user.updatedAssets&&$scope.user.updatedLiabilities&&$scope.user.updatedIncomeExpense&&$scope.user.updatedManageDebt&&$scope.user.updatedMilestones&&$scope.user.updatedProfileSettings&&$scope.user.updatedBudget&&($scope.profileCompleteness=!0);for(var today=new Date,thisMonth=today.getMonth(),thisYear=today.getFullYear(),budgetLimits=$scope.user.budgetLimits,i=0;i<budgetLimits.length;i++){var budgetLimit=budgetLimits[i];budgetLimit.month===thisMonth&&budgetLimit.year===thisYear&&($scope.budgetLimit=budgetLimit)}$scope.mth=[],$scope.mth[0]="January",$scope.mth[1]="February",$scope.mth[2]="March",$scope.mth[3]="April",$scope.mth[4]="May",$scope.mth[5]="June",$scope.mth[6]="July",$scope.mth[7]="August",$scope.mth[8]="September",$scope.mth[9]="October",$scope.mth[10]="November",$scope.mth[11]="December",$scope.monthString=$scope.mth[thisMonth],$scope.thisYear=thisYear;var standingCheck=function(actual,budget){return budget>=actual?!0:!1},progressInfo=function(value){var type;return type=25>value?"success":50>value?"info":75>value?"warning":"danger"};if($scope.feStatus=!0,$scope.tStatus=!0,$scope.fStatus=!0,$scope.uStatus=!0,$scope.mStatus=!0,$scope.feBudgetSet=!1,$scope.tBudgetSet=!1,$scope.fBudgetSet=!1,$scope.mBudgetSet=!1,$scope.uBudgetSet=!1,$scope.allBudgetSet=!1,$scope.displayThisMonthFixedExpenseTotal=0,$scope.displayThisMonthTransportTotal=0,$scope.displayThisMonthFoodTotal=0,$scope.displayThisMonthUtilitiesTotal=0,$scope.displayThisMonthMiscTotal=0,console.log($scope.budgetLimit),"undefined"!=typeof $scope.budgetLimit){0!==$scope.budgetLimit.fixedExpenseB&&($scope.feBudgetSet=!0,console.log("Entered")),0!==$scope.budgetLimit.transportB&&($scope.tBudgetSet=!0),0!==$scope.budgetLimit.foodB&&($scope.fBudgetSet=!0),0!==$scope.budgetLimit.miscB&&($scope.mBudgetSet=!0),0!==$scope.budgetLimit.utilitiesB&&($scope.uBudgetSet=!0);for(var ii=0;ii<$scope.user.incomeExpenseRecords.length;ii++){var record=$scope.user.incomeExpenseRecords[ii];if(record.month===thisMonth&&record.year===thisYear){record.monthlyExpense.fixedExpense;$scope.thisMonthFixedExpenseTotal=record.fixedExpenseAmt,$scope.displayThisMonthFixedExpenseTotal=Number(record.fixedExpenseAmt);var valueE=$scope.thisMonthFixedExpenseTotal/$scope.budgetLimit.fixedExpenseB*100,typeE=progressInfo(valueE);$scope.dynamicE=Math.floor(valueE),$scope.typeE=typeE,$scope.feStatus=standingCheck($scope.thisMonthFixedExpenseTotal,$scope.budgetLimit.fixedExpenseB),console.log("hello"+$scope.feStatus),$scope.displayFeExceed=$scope.displayThisMonthFixedExpenseTotal-$scope.budgetLimit.fixedExpenseB;record.monthlyExpense.transport;$scope.thisMonthTransportTotal=record.transportAmt,$scope.displayThisMonthTransportTotal=Number(record.transportAmt);var valueT=$scope.thisMonthTransportTotal/$scope.budgetLimit.transportB*100,typeT=progressInfo(valueT);$scope.dynamicT=Math.floor(valueT),$scope.typeT=typeT,$scope.tStatus=standingCheck($scope.thisMonthTransportTotal,$scope.budgetLimit.transportB),$scope.displayTExceed=($scope.displayThisMonthTransportTotal-$scope.budgetLimit.transportB).toFixed(2);record.monthlyExpense.foodNecessities;$scope.thisMonthFoodTotal=record.foodNecessitiesAmt,$scope.displayThisMonthFoodTotal=Number(record.foodNecessitiesAmt);var valueF=$scope.thisMonthFoodTotal/$scope.budgetLimit.foodB*100,typeF=progressInfo(valueF);$scope.dynamicF=Math.floor(valueF),$scope.typeF=typeF,$scope.fStatus=standingCheck($scope.thisMonthFoodTotal,$scope.budgetLimit.foodB),$scope.displayFExceed=($scope.displayThisMonthFoodTotal-$scope.budgetLimit.foodB).toFixed(2);record.monthlyExpense.utilityHousehold;$scope.thisMonthUtilitiesTotal=record.utilityHouseholdAmt,$scope.displayThisMonthUtilitiesTotal=Number(record.utilityHouseholdAmt);var valueU=$scope.thisMonthUtilitiesTotal/$scope.budgetLimit.utilitiesB*100,typeU=progressInfo(valueU);$scope.dynamicU=Math.floor(valueU),$scope.typeU=typeU,$scope.uStatus=standingCheck($scope.thisMonthUtilitiesTotal,$scope.budgetLimit.utilitiesB),$scope.displayUExceed=($scope.displayThisMonthUtilitiesTotal-$scope.budgetLimit.utilitiesB).toFixed(2);record.monthlyExpense.misc;$scope.thisMonthMiscTotal=record.miscAmt,$scope.displayThisMonthMiscTotal=Number(record.miscAmt);var valueM=$scope.thisMonthMiscTotal/$scope.budgetLimit.miscB*100,typeM=progressInfo(valueM);$scope.dynamicM=Math.floor(valueM),$scope.typeM=typeM,$scope.mStatus=standingCheck($scope.thisMonthMiscTotal,$scope.budgetLimit.miscB),$scope.displayMExceed=($scope.displayThisMonthMiscTotal-$scope.budgetLimit.miscB).toFixed(2)}}}$scope.decachedAdvUrl=!1;var getLatestAdv=function(){var advImageUrl="https://hexapic.s3.amazonaws.com/assets/";$http.get("/admin/retrieveCurrentAd").success(function(response){console.log(response),0===response.length&&($scope.adHidden=!1),$scope.decachedImageUrl=advImageUrl+response.name+"?decache="+Math.random()}).error(function(){})};getLatestAdv(),$scope.adHidden=!0}]),angular.module("core").controller("LandingController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("core").controller("NotificationController",["$rootScope","$scope","Authentication","Menus","$http","$state",function($rootScope,$scope,Authentication,Menus,$http,$state){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.redirectHome="/#!/",$scope.user&&($scope.redirectHome="/#!/home"),$scope.user||($scope.redirectHome="/#!/"),$scope.$watch("authentication.user",function(){$scope.user=Authentication.user,$scope.authentication.user&&$http.get("/notification/retrieveAll").then(function(response){var notificationAll=response.data.notificationListAll,notificationListNew=response.data.notificationListNew;$scope.numNotification=notificationListNew.length,$scope.list=notificationListNew,$scope.listAll=notificationAll,0===notificationListNew.length&&($scope.list[0]={title:"No new notification"}),console.log($scope.listAll)})}),$scope.getNotification=function(){$http.get("/notification/retrieveAll").then(function(response){var notificationAll=response.data.notificationListAll,notificationListNew=response.data.notificationListNew;$scope.numNotification=notificationListNew.length,$scope.list=notificationListNew,$scope.listAll=notificationAll,0===notificationListNew.length&&($scope.list[0]={title:"No new notification"}),console.log($scope.listAll)})},$scope.viewNotification=function(){0!==$scope.numNotification&&$http.put("/notification/viewedNotification",{notificationListNew:$scope.list}).success(function(response){$scope.numNotification=0}).error(function(){console.log("error updating notication")})}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,
uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("SocketService",["socketFactory",function(socketFactory){}]),angular.module("financial").config(["$stateProvider",function($stateProvider){}]),angular.module("financial").controller("AssetsController",["$scope","$rootScope","$stateParams","$location","Authentication","AssetsService","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,AssetsService,Users,$q){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.oneAtATime=!1,$scope.assetChartDisplay=!0,$scope.assetsDoughnutData=[1],$scope.assetsDoughnutLabels=["No Data"],$scope.updateUserFinances=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.assetsRecordsPeriod?$scope.user.assetsRecordsPeriod.minYear===$scope.user.assetsRecordsPeriod.maxYear&&$scope.user.assetsRecordsPeriod.minMonth===$scope.user.assetsRecordsPeriod.maxMonth?$scope.year===$scope.user.assetsRecordsPeriod.minYear?$scope.month<$scope.user.assetsRecordsPeriod.minMonth?$scope.user.assetsRecordsPeriod.minMonth=$scope.month:$scope.month>$scope.user.assetsRecordsPeriod.maxMonth&&($scope.user.assetsRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.assetsRecordsPeriod.minYear?($scope.user.assetsRecordsPeriod.minYear=$scope.year,$scope.user.assetsRecordsPeriod.minMonth=$scope.month):$scope.year>$scope.user.assetsRecordsPeriod.maxYear&&($scope.user.assetsRecordsPeriod.maxYear=$scope.year,$scope.user.assetsRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.assetsRecordsPeriod.minYear||$scope.year===$scope.user.assetsRecordsPeriod.minYear&&$scope.month<$scope.user.assetsRecordsPeriod.minMonth?($scope.user.assetsRecordsPeriod.minYear=$scope.year,$scope.user.assetsRecordsPeriod.minMonth=$scope.month):($scope.year>$scope.user.assetsRecordsPeriod.maxYear||$scope.year===$scope.user.assetsRecordsPeriod.maxYear&&$scope.month>$scope.user.assetsRecordsPeriod.maxMonth)&&($scope.user.assetsRecordsPeriod.maxYear=$scope.year,$scope.user.assetsRecordsPeriod.maxMonth=$scope.month):($scope.user.assetsRecordsPeriod={},$scope.user.assetsRecordsPeriod.minMonth=$scope.month,$scope.user.assetsRecordsPeriod.minYear=$scope.year,$scope.user.assetsRecordsPeriod.maxMonth=$scope.month,$scope.user.assetsRecordsPeriod.maxYear=$scope.year);var cashEquivalentsArr=$scope.displayAssetsRecords.cashEquivalents,cashEquivalentsTotal=0;angular.forEach(cashEquivalentsArr,function(value,key){cashEquivalentsTotal+=Number(value.value)});var personalUseAssetsArr=$scope.displayAssetsRecords.personalUseAssets,personalUseAssetsTotal=0;angular.forEach(personalUseAssetsArr,function(value,key){personalUseAssetsTotal+=Number(value.value)});var investedAssetsArr=$scope.displayAssetsRecords.investedAssets,investedAssetsTotal=0;angular.forEach(investedAssetsArr,function(value,key){investedAssetsTotal+=Number(value.value)});var cpfSavingsArr=$scope.displayAssetsRecords.cpfSavings,cpfSavingsTotal=0;angular.forEach(cpfSavingsArr,function(value,key){cpfSavingsTotal+=Number(value.value)});var otherAssetsArr=$scope.displayAssetsRecords.otherAssets,otherAssetsTotal=0;angular.forEach(otherAssetsArr,function(value,key){otherAssetsTotal+=Number(value.value)});var assetsTotal=cashEquivalentsTotal+personalUseAssetsTotal+investedAssetsTotal+cpfSavingsTotal+otherAssetsTotal;if($scope.displayAssetsRecords.cashEquivalentsAmt=cashEquivalentsTotal.toFixed(2),$scope.displayAssetsRecords.personalUseAssetsAmt=personalUseAssetsTotal.toFixed(2),$scope.displayAssetsRecords.investedAssetsAmt=investedAssetsTotal.toFixed(2),$scope.displayAssetsRecords.cpfSavingsAmt=cpfSavingsTotal.toFixed(2),$scope.displayAssetsRecords.otherAssetsAmt=otherAssetsTotal.toFixed(2),$scope.displayAssetsRecords.totalAmt=assetsTotal.toFixed(2),$scope.user.assetsRecords){for(var recordExist=!1,num=0;num<$scope.user.assetsRecords.length;num++)$scope.user.assetsRecords[num].year===$scope.year&&$scope.user.assetsRecords[num].month===$scope.month&&($scope.user.assetsRecords[num]=$scope.displayAssetsRecords,recordExist=!0);if(console.log(recordExist),console.log($scope.displayAssetsRecords),console.log($scope.user.assetsRecords),recordExist===!1){var toInsertArr=angular.copy($scope.displayAssetsRecords);toInsertArr.year=angular.copy($scope.year),toInsertArr.month=angular.copy($scope.month),$scope.user.assetsRecords.push(toInsertArr)}}else $scope.user.assetsRecords=[],$scope.user.assetsRecords.push($scope.displayAssetsRecords);$scope.user.updatedAssets=!0;var user=new Users($scope.user);console.log(user),user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){console.log(response),$scope.error=response.data.message})}else $scope.submitted=!0};var current=function(){$scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),$scope.monthDisplay=$scope.selectedMonth,$scope.selectedYear=$scope.year,console.log($scope.month),console.log($scope.year)};current(),$scope.monthArr=["January","February","March","April","May","June","July","August","September","October","November","December"];var reloadData=function(){if(!$scope.user.assetsRecordsPeriod||$scope.user.assetsRecordsPeriod.minMonth>$scope.month&&$scope.user.assetsRecordsPeriod.minYear>=$scope.year||$scope.user.assetsRecordsPeriod.minYear>$scope.year)$scope.displayAssetsRecords=angular.copy(AssetsService.assetsRecords),$scope.displayAssetsRecords.year=angular.copy($scope.year),$scope.displayAssetsRecords.month=angular.copy($scope.month),$scope.recordFound="No record exists for and prior to selected month/year.";else if($scope.user.assetsRecordsPeriod.minMonth===$scope.user.assetsRecordsPeriod.maxMonth&&$scope.user.assetsRecordsPeriod.minYear===$scope.user.assetsRecordsPeriod.maxYear)$scope.displayAssetsRecords=angular.copy($scope.user.assetsRecords[0]);else{var targetYear,targetMonth,latestRecord,minimumYear=$scope.user.assetsRecordsPeriod.minYear,minimumMonth=$scope.user.assetsRecordsPeriod.minMonth,maximumYear=$scope.user.assetsRecordsPeriod.maxYear,maximumMonth=$scope.user.assetsRecordsPeriod.maxMonth,latestYear=minimumYear,latestMonth=minimumMonth;if($scope.year>maximumYear||$scope.year===maximumYear&&$scope.month>=maximumMonth){targetYear=maximumYear,targetMonth=maximumMonth;for(var r2 in $scope.user.assetsRecords)$scope.user.assetsRecords[r2].year===targetYear&&$scope.user.assetsRecords[r2].month===targetMonth&&(latestRecord=angular.copy($scope.user.assetsRecords[r2]))}else{targetYear=$scope.year,targetMonth=$scope.month;for(var r3 in $scope.user.assetsRecords)($scope.user.assetsRecords[r3].year<targetYear||$scope.user.assetsRecords[r3].year===targetYear&&$scope.user.assetsRecords[r3].month<=targetMonth)&&($scope.user.assetsRecords[r3].year===latestYear&&$scope.user.assetsRecords[r3].month>=latestMonth?(latestRecord=angular.copy($scope.user.assetsRecords[r3]),latestMonth=angular.copy($scope.user.assetsRecords[r3].month)):$scope.user.assetsRecords[r3].year>latestYear&&(latestRecord=angular.copy($scope.user.assetsRecords[r3]),latestMonth=angular.copy($scope.user.assetsRecords[r3].month),latestYear=angular.copy($scope.user.assetsRecords[r3].year)))}$scope.displayAssetsRecords=latestRecord}$scope.displayAssetsRecords.cashEquivalentsAmt||$scope.displayAssetsRecords.personalUseAssetsAmt||$scope.displayAssetsRecords.investedAssetsAmt||$scope.displayAssetsRecords.cpfSavingsAmt||$scope.displayAssetsRecords.otherAssetsAmt?($scope.assetsDoughnutData=[$scope.displayAssetsRecords.cashEquivalentsAmt,$scope.displayAssetsRecords.personalUseAssetsAmt,$scope.displayAssetsRecords.investedAssetsAmt,$scope.displayAssetsRecords.cpfSavingsAmt,$scope.displayAssetsRecords.otherAssetsAmt],$scope.assetsDoughnutLabels=["Cash & Cash Equivalents","Personal Use Assets","Invested Assets","CPF Savings","Other Assets"]):($scope.assetsDoughnutData=[1],$scope.assetsDoughnutLabels=["No Data"]),console.log($scope.selectedMonth),($scope.displayAssetsRecords.year!==$scope.selectedYear||$scope.monthArr[$scope.displayAssetsRecords.month]!==$scope.selectedMonth)&&($scope.recordFound="No record exists for selected month/year. Displaying records for "+$scope.monthArr[$scope.displayAssetsRecords.month]+", "+$scope.displayAssetsRecords.year)},retrieveRecord=function(){$scope.month=$scope.monthArr.indexOf($scope.selectedMonth),$scope.monthDisplay=$scope.selectedMonth,$scope.year=$scope.selectedYear,$scope.recordFound=null,($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1),$scope.$watch("user",function(){reloadData()})};$scope.$watch("selectedMonth",function(){retrieveRecord()}),$scope.$watch("selectedYear",function(){retrieveRecord()}),$scope.$watch("user",function(){$scope.month=$scope.monthArr.indexOf($scope.selectedMonth),$scope.monthDisplay=$scope.selectedMonth,$scope.year=$scope.selectedYear,console.log($scope.user.assetsRecords),reloadData()}),$scope.clearSuccessMessage=function(){($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1)}}]),angular.module("financial").controller("BudgetController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q","IncomeExpenseService","BudgetService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q,IncomeExpenseService,BudgetService){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords);$scope.fixedExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense,$scope.transportExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.transport,$scope.utilityExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.utilityHousehold,$scope.foodExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.foodNecessities,$scope.miscExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.misc;var today=($scope.user.incomeExpenseRecords,new Date),presentMonth=today.getMonth(),presentYear=today.getYear()+1900,dateObjStart=new Date(today.getFullYear(),today.getMonth(),1);1===(dateObjStart.getMonth()+1).toString().length?$scope.firstDay=dateObjStart.getFullYear()+"-0"+(dateObjStart.getMonth()+1)+"-0"+dateObjStart.getDate():$scope.firstDay=dateObjStart.getFullYear()+"-"+(dateObjStart.getMonth()+1)+"-0"+dateObjStart.getDate();var dateObjEnd=new Date(today.getFullYear(),today.getMonth()+1,0);1===(dateObjEnd.getMonth()+1).toString().length?$scope.lastDay=dateObjEnd.getFullYear()+"-0"+(dateObjEnd.getMonth()+1)+"-"+dateObjEnd.getDate():$scope.lastDay=dateObjEnd.getFullYear()+"-"+(dateObjEnd.getMonth()+1)+"-"+dateObjEnd.getDate(),$scope.feStatus=!0,$scope.tStatus=!0,$scope.fStatus=!0,$scope.uStatus=!0,$scope.mStatus=!0,$scope.formSubmitted=!1,$scope.mth=[],$scope.mth[0]="January",$scope.mth[1]="February",$scope.mth[2]="March",$scope.mth[3]="April",$scope.mth[4]="May",$scope.mth[5]="June",$scope.mth[6]="July",$scope.mth[7]="August",$scope.mth[8]="September",$scope.mth[9]="October",$scope.mth[10]="November",$scope.mth[11]="December";var monthString=$scope.mth[presentMonth];$scope.month=today.getMonth(),$scope.year=today.getFullYear(),$scope.displayDate=monthString+", "+presentYear;var dateFormatter=function(date){var mth=[];mth[0]="Jan",mth[1]="Feb",mth[2]="Mar",mth[3]="Apr",mth[4]="May",mth[5]="Jun",mth[6]="Jul",mth[7]="Aug",mth[8]="Sept",mth[9]="Oct",mth[10]="Nov",mth[11]="Dec";var monthString=mth[date.getMonth()],dateString=date.getDate(),yearString=date.getYear()+1900,final_String=dateString+"-"+monthString+"-"+yearString;return final_String},progressInfo=function(value){var type;return type=25>value?"success":50>value?"info":75>value?"warning":"danger"},standingCheck=function(actual,budget){return budget>=actual?!0:!1};$scope.$watch("selectedMonth",function(){presentMonth=$scope.mth.indexOf($scope.selectedMonth),$scope.loadTables()}),$scope.$watch("selectedYear",function(){presentYear=$scope.selectedYear,$scope.loadTables()}),$scope.loadTables=function(){$scope.incomeExpenseChartDisplay=!0,$scope.incomeExpenseDoughnutData=[1],$scope.incomeExpenseDoughnutLabels=["No Data"],$scope.fixedExpenseB=0,$scope.transportB=0,$scope.foodB=0,$scope.miscB=0,$scope.utilitiesB=0,$scope.feBudgetSet=!1,$scope.tBudgetSet=!1,$scope.fBudgetSet=!1,$scope.mBudgetSet=!1,$scope.uBudgetSet=!1,$scope.allBudgetSet=!1;var exist=0;console.log($scope.user.budgetLimits);for(var ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(exist++,$scope.fixedExpenseB=budgetLimit.fixedExpenseB,$scope.transportB=budgetLimit.transportB,$scope.foodB=budgetLimit.foodB,$scope.miscB=budgetLimit.miscB,$scope.utilitiesB=budgetLimit.utilitiesB,0!==budgetLimit.fixedExpenseB&&($scope.feBudgetSet=!0),0!==budgetLimit.transportB&&($scope.tBudgetSet=!0),0!==budgetLimit.foodB&&($scope.fBudgetSet=!0),0!==budgetLimit.miscB&&($scope.mBudgetSet=!0),0!==budgetLimit.utilitiesB&&($scope.uBudgetSet=!0),$scope.feBudgetSet&&$scope.tBudgetSet&&$scope.fBudgetSet&&$scope.mBudgetSet&&$scope.uBudgetSet&&($scope.allBudgetSet=!0),$scope.displayFixedExpenseB=budgetLimit.fixedExpenseB,$scope.displayTransportB=budgetLimit.transportB,$scope.displayFoodB=budgetLimit.foodB,$scope.displayUtilitiesB=budgetLimit.utilitiesB,$scope.displayMiscB=budgetLimit.miscB)}$scope.userExpenseCopy=[],angular.copy($scope.user.incomeExpenseRecords,$scope.userExpenseCopy),$scope.thisMonthFixedExpenseTotal="0.00",$scope.thisMonthTransportTotal="0.00",$scope.thisMonthMiscTotal="0.00",$scope.thisMonthUtilitiesTotal="0.00",$scope.thisMonthFoodTotal="0.00",$scope.totalExpense="0.00",$scope.displayThisMonthFixedExpenseTotal=0,$scope.displayThisMonthTransportTotal=0,$scope.displayThisMonthFoodTotal=0,$scope.displayThisMonthUtilitiesTotal=0,$scope.displayThisMonthMiscTotal=0,$scope.feDiffTable=[],$scope.tDiffTable=[],$scope.fDiffTable=[],$scope.mDiffTable=[],$scope.uDiffTable=[],$scope.fixedExpenseTable=[],$scope.transportTable=[],$scope.foodTable=[],$scope.miscTable=[],$scope.utilitiesTable=[];for(var i=0;i<$scope.userExpenseCopy.length;i++){var record=$scope.userExpenseCopy[i];if(record.month===presentMonth&&record.year===presentYear){var fixedExpenseArr=record.monthlyExpense.fixedExpense;$scope.thisMonthFixedExpenseTotal=record.fixedExpenseAmt,$scope.displayThisMonthFixedExpenseTotal=Number(record.fixedExpenseAmt);var valueE=$scope.thisMonthFixedExpenseTotal/$scope.fixedExpenseB*100,typeE=progressInfo(valueE);$scope.dynamicE=Math.floor(valueE),$scope.typeE=typeE,$scope.feStatus=standingCheck($scope.thisMonthFixedExpenseTotal,$scope.fixedExpenseB),$scope.displayFeExceed=($scope.displayThisMonthFixedExpenseTotal-$scope.fixedExpenseB).toFixed(2);var transportArr=record.monthlyExpense.transport;$scope.thisMonthTransportTotal=record.transportAmt,$scope.displayThisMonthTransportTotal=Number(record.transportAmt);var valueT=$scope.thisMonthTransportTotal/$scope.transportB*100,typeT=progressInfo(valueT);$scope.dynamicT=Math.floor(valueT),$scope.typeT=typeT,$scope.tStatus=standingCheck($scope.thisMonthTransportTotal,$scope.transportB),$scope.displayTExceed=($scope.displayThisMonthTransportTotal-$scope.transportB).toFixed(2);var foodArr=record.monthlyExpense.foodNecessities;$scope.thisMonthFoodTotal=record.foodNecessitiesAmt,$scope.displayThisMonthFoodTotal=Number(record.foodNecessitiesAmt);var valueF=$scope.thisMonthFoodTotal/$scope.foodB*100,typeF=progressInfo(valueF);$scope.dynamicF=Math.floor(valueF),$scope.typeF=typeF,$scope.fStatus=standingCheck($scope.thisMonthFoodTotal,$scope.foodB),$scope.displayFExceed=($scope.displayThisMonthFoodTotal-$scope.foodB).toFixed(2);var utilitiesArr=record.monthlyExpense.utilityHousehold;$scope.thisMonthUtilitiesTotal=record.utilityHouseholdAmt,$scope.displayThisMonthUtilitiesTotal=Number(record.utilityHouseholdAmt);var valueU=$scope.thisMonthUtilitiesTotal/$scope.utilitiesB*100,typeU=progressInfo(valueU);$scope.dynamicU=Math.floor(valueU),$scope.typeU=typeU,$scope.uStatus=standingCheck($scope.thisMonthUtilitiesTotal,$scope.utilitiesB),$scope.displayUExceed=($scope.displayThisMonthUtilitiesTotal-$scope.utilitiesB).toFixed(2);var miscArr=record.monthlyExpense.misc;$scope.thisMonthMiscTotal=record.miscAmt,$scope.displayThisMonthMiscTotal=Number(record.miscAmt);var valueM=$scope.thisMonthMiscTotal/$scope.miscB*100,typeM=progressInfo(valueM);$scope.dynamicM=Math.floor(valueM),$scope.typeM=typeM,$scope.mStatus=standingCheck($scope.thisMonthMiscTotal,$scope.miscB),$scope.displayMExceed=($scope.displayThisMonthMiscTotal-$scope.miscB).toFixed(2),record.fixedExpenseAmt||record.transportAmt||record.utilityHouseholdAmt||record.foodNecessitiesAmt||record.miscAmt?($scope.incomeExpenseDoughnutData=[record.fixedExpenseAmt,record.transportAmt,record.utilityHouseholdAmt,record.foodNecessitiesAmt,record.miscAmt],$scope.incomeExpenseDoughnutLabels=["Fixed Expense","Transport","Utilities & Household Maintenance","Food & Necessities","Miscellaneous"],$scope.totalExpense=record.monthlyExpenseAmt):($scope.incomeExpenseDoughnutData=[1],$scope.incomeExpenseDoughnutLabels=["No Data"]);var rt,feType,feRecords,recordsTotal,diff,diffObj,indRecord,a,dateFormatted,amount,modRecord;for(rt in fixedExpenseArr)for(feType=fixedExpenseArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.feDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.fixedExpenseTable.push(modRecord);for(rt in transportArr)for(feType=transportArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.tDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.transportTable.push(modRecord);for(rt in foodArr)for(feType=foodArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.fDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.foodTable.push(modRecord);for(rt in utilitiesArr)for(feType=utilitiesArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.uDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.utilitiesTable.push(modRecord);for(rt in miscArr)for(feType=miscArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.mDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.miscTable.push(modRecord)}}},$scope.loadTables(),$scope.addNewExpense=function(){if($scope.type=$scope.type.trim(),$scope.user.incomeExpenseRecordsPeriod?($scope.user.incomeExpenseRecordsPeriod.maxMonth<=presentMonth&&$scope.user.incomeExpenseRecordsPeriod.maxYear<=presentYear||$scope.user.incomeExpenseRecordsPeriod.maxMonth>presentMonth&&$scope.user.incomeExpenseRecordsPeriod.maxYear<presentYear)&&(console.log("do you enter2?"),$scope.user.incomeExpenseRecordsPeriod.maxMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.maxYear=presentYear):(console.log("do you enter?"),$scope.user.incomeExpenseRecordsPeriod={},$scope.user.incomeExpenseRecordsPeriod.minMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.minYear=presentYear,$scope.user.incomeExpenseRecordsPeriod.maxMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.maxYear=presentYear),0===$scope.user.incomeExpenseRecords.length)console.log("1st"),$scope.displayIncomeExpenseRecords.year=presentYear,$scope.displayIncomeExpenseRecords.month=presentMonth,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords);else{for(var existenceCheck=0,j=0;j<$scope.user.incomeExpenseRecords.length;j++){var recordChecker=$scope.user.incomeExpenseRecords[j];recordChecker.month===presentMonth&&recordChecker.year===presentYear&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&($scope.displayIncomeExpenseRecords.year=presentYear,$scope.displayIncomeExpenseRecords.month=presentMonth,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords),console.log("3rd"))}for(var i=0;i<$scope.user.incomeExpenseRecords.length;i++){var expenseRecord=$scope.user.incomeExpenseRecords[i];if(expenseRecord.month===presentMonth&&expenseRecord.year===presentYear){var thisMonthSpecExpense={};"fixedExpense"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.fixedExpense:"transport"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.transport:"utility"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.utilityHousehold:"food"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.foodNecessities:"misc"===$scope.formRef&&(thisMonthSpecExpense=expenseRecord.monthlyExpense.misc);var record={detail:$scope.detail,date:$scope.date,amount:$scope.expenseAmt};console.log("Almost THERE");for(var get in thisMonthSpecExpense){var obj=thisMonthSpecExpense[get];$scope.type===obj.description&&(console.log("SUCCESS"),obj.recordsTotal+=$scope.expenseAmt,obj.records.push(record),obj.recordsTotal>=obj.value&&(obj.value=obj.recordsTotal))}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var rt in fixedExpenseArr){var obj1=fixedExpenseArr[rt];fixedExpenseTotal+=obj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var rt1 in transportArr){var obj2=transportArr[rt1];transportTotal+=obj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var rt2 in utilityHouseholdArr){var obj3=utilityHouseholdArr[rt2];utilityHouseholdTotal+=obj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var rt3 in foodNecessitiesArr){var obj4=foodNecessitiesArr[rt3];foodNecessitiesTotal+=obj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var rt4 in miscArr){var obj5=miscArr[rt4];miscTotal+=obj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.formSubmitted=!0,$scope.detail="",$scope.date="",$scope.expenseAmt="",$scope.type="",$scope.loadTables()},$scope.resetModal=function(){$scope.formSubmitted=!1},$scope.forms={},$scope.$watch("forms.addFixedExpenseForm.$valid",function(){console.log("watching feForm"+$scope.forms.addFixedExpenseForm.$valid)}),$scope.setFixedExpenseBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.fixedExpenseB=$scope.fixedExpenseB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.fixedExpenseB=$scope.fixedExpenseB,$scope.user.budgetLimits.push(newBudget)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setTransportBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.transportB=$scope.transportB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.transportB=$scope.transportB,$scope.user.budgetLimits.push(newBudget)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setUtilitiestBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.utilitiesB=$scope.utilitiesB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.utilitiesB=$scope.utilitiesB,$scope.user.budgetLimits.push(newBudget)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setFoodBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.foodB=$scope.foodB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.foodB=$scope.foodB,$scope.user.budgetLimits.push(newBudget)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setMiscBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.miscB=$scope.miscB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.miscB=$scope.miscB,$scope.user.budgetLimits.push(newBudget)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.standbyForDelete=function(item,expenseType){$scope.item=item,$scope.expenseType=expenseType},$scope.cancelDelete=function(){$scope.item="",$scope.expenseType=""},$scope.deleteRecord=function(){for(var i=0;i<$scope.user.incomeExpenseRecords.length;i++){var expenseRecord=$scope.user.incomeExpenseRecords[i];if(expenseRecord.month===presentMonth&&expenseRecord.year===presentYear){console.log("level1");var expenseSelected;"fixedExpense"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.fixedExpense,console.log("level2.1")):"transport"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.transport,console.log("level2.2")):"utility"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.utilityHousehold,console.log("level2.3")):"food"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.foodNecessities,console.log("level2.4")):"misc"===$scope.expenseType&&(expenseSelected=expenseRecord.monthlyExpense.misc,console.log("level2.5"));for(var get in expenseSelected){var obj=expenseSelected[get];if($scope.item.description===obj.description){console.log("SUCCESS");for(var a=0;a<obj.records.length;a++){var specRec=obj.records[a],itemNo=Number($scope.item.amount);specRec.detail===$scope.item.detail&&specRec.amount===itemNo&&(obj.recordsTotal-=itemNo,obj.value-=itemNo,obj.records.splice(a,1),console.log("Make it?"))}}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var rt in fixedExpenseArr){var obj1=fixedExpenseArr[rt];fixedExpenseTotal+=obj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var rt1 in transportArr){var obj2=transportArr[rt1];transportTotal+=obj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var rt2 in utilityHouseholdArr){var obj3=utilityHouseholdArr[rt2];utilityHouseholdTotal+=obj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var rt3 in foodNecessitiesArr){var obj4=foodNecessitiesArr[rt3];foodNecessitiesTotal+=obj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var rt4 in miscArr){var obj5=miscArr[rt4];miscTotal+=obj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),
expenseRecord.netCashFlow=netCashFlow.toFixed(2)}}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.item="",$scope.expenseType="",$scope.loadTables()},$scope.setFixedExpense=function(){$scope.selectedExpense=$scope.fixedExpense,$scope.formRef="fixedExpense"},$scope.setTransportExpense=function(){$scope.selectedExpense=$scope.transportExpense,$scope.formRef="transport"},$scope.setUtilityExpense=function(){$scope.selectedExpense=$scope.utilityExpense,$scope.formRef="utility"},$scope.setFoodExpense=function(){$scope.selectedExpense=$scope.foodExpense,$scope.formRef="food"},$scope.setMiscExpense=function(){$scope.selectedExpense=$scope.miscExpense,$scope.formRef="misc"}}]),angular.module("financial").controller("BudgetController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q","IncomeExpenseService","BudgetService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q,IncomeExpenseService,BudgetService){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords);$scope.fixedExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense,$scope.transportExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.transport,$scope.utilityExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.utilityHousehold,$scope.foodExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.foodNecessities,$scope.miscExpense=$scope.displayIncomeExpenseRecords.monthlyExpense.misc;var today=($scope.user.incomeExpenseRecords,new Date),presentMonth=today.getMonth(),presentYear=today.getYear()+1900,dateObjStart=new Date(today.getFullYear(),today.getMonth(),1);1===(dateObjStart.getMonth()+1).toString().length?$scope.firstDay=dateObjStart.getFullYear()+"-0"+(dateObjStart.getMonth()+1)+"-0"+dateObjStart.getDate():$scope.firstDay=dateObjStart.getFullYear()+"-"+(dateObjStart.getMonth()+1)+"-0"+dateObjStart.getDate();var dateObjEnd=new Date(today.getFullYear(),today.getMonth()+1,0);1===(dateObjEnd.getMonth()+1).toString().length?$scope.lastDay=dateObjEnd.getFullYear()+"-0"+(dateObjEnd.getMonth()+1)+"-"+dateObjEnd.getDate():$scope.lastDay=dateObjEnd.getFullYear()+"-"+(dateObjEnd.getMonth()+1)+"-"+dateObjEnd.getDate(),$scope.feStatus=!0,$scope.tStatus=!0,$scope.fStatus=!0,$scope.uStatus=!0,$scope.mStatus=!0,$scope.formSubmitted=!1,$scope.mth=[],$scope.mth[0]="January",$scope.mth[1]="February",$scope.mth[2]="March",$scope.mth[3]="April",$scope.mth[4]="May",$scope.mth[5]="June",$scope.mth[6]="July",$scope.mth[7]="August",$scope.mth[8]="September",$scope.mth[9]="October",$scope.mth[10]="November",$scope.mth[11]="December";var monthString=$scope.mth[presentMonth];$scope.month=today.getMonth(),$scope.year=today.getFullYear(),$scope.displayDate=monthString+", "+presentYear;var dateFormatter=function(date){var mth=[];mth[0]="Jan",mth[1]="Feb",mth[2]="Mar",mth[3]="Apr",mth[4]="May",mth[5]="Jun",mth[6]="Jul",mth[7]="Aug",mth[8]="Sept",mth[9]="Oct",mth[10]="Nov",mth[11]="Dec";var monthString=mth[date.getMonth()],dateString=date.getDate(),yearString=date.getYear()+1900,final_String=dateString+"-"+monthString+"-"+yearString;return final_String},progressInfo=function(value){var type;return type=25>value?"success":50>value?"info":75>value?"warning":"danger"},standingCheck=function(actual,budget){return budget>=actual?!0:!1};$scope.$watch("selectedMonth",function(){presentMonth=$scope.mth.indexOf($scope.selectedMonth),$scope.loadTables()}),$scope.$watch("selectedYear",function(){presentYear=$scope.selectedYear,$scope.loadTables()}),$scope.loadTables=function(){$scope.incomeExpenseChartDisplay=!0,$scope.incomeExpenseDoughnutData=[1],$scope.incomeExpenseDoughnutLabels=["No Data"],$scope.fixedExpenseB=0,$scope.transportB=0,$scope.foodB=0,$scope.miscB=0,$scope.utilitiesB=0,$scope.feBudgetSet=!1,$scope.tBudgetSet=!1,$scope.fBudgetSet=!1,$scope.mBudgetSet=!1,$scope.uBudgetSet=!1,$scope.allBudgetSet=!1;var exist=0;console.log($scope.user.budgetLimits);for(var ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(exist++,$scope.fixedExpenseB=budgetLimit.fixedExpenseB,$scope.transportB=budgetLimit.transportB,$scope.foodB=budgetLimit.foodB,$scope.miscB=budgetLimit.miscB,$scope.utilitiesB=budgetLimit.utilitiesB,0!==budgetLimit.fixedExpenseB&&($scope.feBudgetSet=!0),0!==budgetLimit.transportB&&($scope.tBudgetSet=!0),0!==budgetLimit.foodB&&($scope.fBudgetSet=!0),0!==budgetLimit.miscB&&($scope.mBudgetSet=!0),0!==budgetLimit.utilitiesB&&($scope.uBudgetSet=!0),$scope.feBudgetSet&&$scope.tBudgetSet&&$scope.fBudgetSet&&$scope.mBudgetSet&&$scope.uBudgetSet&&($scope.allBudgetSet=!0),$scope.displayFixedExpenseB=budgetLimit.fixedExpenseB,$scope.displayTransportB=budgetLimit.transportB,$scope.displayFoodB=budgetLimit.foodB,$scope.displayUtilitiesB=budgetLimit.utilitiesB,$scope.displayMiscB=budgetLimit.miscB)}$scope.userExpenseCopy=[],angular.copy($scope.user.incomeExpenseRecords,$scope.userExpenseCopy),$scope.thisMonthFixedExpenseTotal="0.00",$scope.thisMonthTransportTotal="0.00",$scope.thisMonthMiscTotal="0.00",$scope.thisMonthUtilitiesTotal="0.00",$scope.thisMonthFoodTotal="0.00",$scope.totalExpense="0.00",$scope.displayThisMonthFixedExpenseTotal=0,$scope.displayThisMonthTransportTotal=0,$scope.displayThisMonthFoodTotal=0,$scope.displayThisMonthUtilitiesTotal=0,$scope.displayThisMonthMiscTotal=0,$scope.feDiffTable=[],$scope.tDiffTable=[],$scope.fDiffTable=[],$scope.mDiffTable=[],$scope.uDiffTable=[],$scope.fixedExpenseTable=[],$scope.transportTable=[],$scope.foodTable=[],$scope.miscTable=[],$scope.utilitiesTable=[];for(var i=0;i<$scope.userExpenseCopy.length;i++){var record=$scope.userExpenseCopy[i];if(record.month===presentMonth&&record.year===presentYear){var fixedExpenseArr=record.monthlyExpense.fixedExpense;$scope.thisMonthFixedExpenseTotal=record.fixedExpenseAmt,$scope.displayThisMonthFixedExpenseTotal=Number(record.fixedExpenseAmt);var valueE=$scope.thisMonthFixedExpenseTotal/$scope.fixedExpenseB*100,typeE=progressInfo(valueE);$scope.dynamicE=Math.floor(valueE),$scope.typeE=typeE,$scope.feStatus=standingCheck($scope.thisMonthFixedExpenseTotal,$scope.fixedExpenseB),$scope.displayFeExceed=($scope.displayThisMonthFixedExpenseTotal-$scope.fixedExpenseB).toFixed(2);var transportArr=record.monthlyExpense.transport;$scope.thisMonthTransportTotal=record.transportAmt,$scope.displayThisMonthTransportTotal=Number(record.transportAmt);var valueT=$scope.thisMonthTransportTotal/$scope.transportB*100,typeT=progressInfo(valueT);$scope.dynamicT=Math.floor(valueT),$scope.typeT=typeT,$scope.tStatus=standingCheck($scope.thisMonthTransportTotal,$scope.transportB),$scope.displayTExceed=($scope.displayThisMonthTransportTotal-$scope.transportB).toFixed(2);var foodArr=record.monthlyExpense.foodNecessities;$scope.thisMonthFoodTotal=record.foodNecessitiesAmt,$scope.displayThisMonthFoodTotal=Number(record.foodNecessitiesAmt);var valueF=$scope.thisMonthFoodTotal/$scope.foodB*100,typeF=progressInfo(valueF);$scope.dynamicF=Math.floor(valueF),$scope.typeF=typeF,$scope.fStatus=standingCheck($scope.thisMonthFoodTotal,$scope.foodB),$scope.displayFExceed=($scope.displayThisMonthFoodTotal-$scope.foodB).toFixed(2);var utilitiesArr=record.monthlyExpense.utilityHousehold;$scope.thisMonthUtilitiesTotal=record.utilityHouseholdAmt,$scope.displayThisMonthUtilitiesTotal=Number(record.utilityHouseholdAmt);var valueU=$scope.thisMonthUtilitiesTotal/$scope.utilitiesB*100,typeU=progressInfo(valueU);$scope.dynamicU=Math.floor(valueU),$scope.typeU=typeU,$scope.uStatus=standingCheck($scope.thisMonthUtilitiesTotal,$scope.utilitiesB),$scope.displayUExceed=($scope.displayThisMonthUtilitiesTotal-$scope.utilitiesB).toFixed(2);var miscArr=record.monthlyExpense.misc;$scope.thisMonthMiscTotal=record.miscAmt,$scope.displayThisMonthMiscTotal=Number(record.miscAmt);var valueM=$scope.thisMonthMiscTotal/$scope.miscB*100,typeM=progressInfo(valueM);$scope.dynamicM=Math.floor(valueM),$scope.typeM=typeM,$scope.mStatus=standingCheck($scope.thisMonthMiscTotal,$scope.miscB),$scope.displayMExceed=($scope.displayThisMonthMiscTotal-$scope.miscB).toFixed(2),record.fixedExpenseAmt||record.transportAmt||record.utilityHouseholdAmt||record.foodNecessitiesAmt||record.miscAmt?($scope.incomeExpenseDoughnutData=[record.fixedExpenseAmt,record.transportAmt,record.utilityHouseholdAmt,record.foodNecessitiesAmt,record.miscAmt],$scope.incomeExpenseDoughnutLabels=["Fixed Expense","Transport","Utilities & Household Maintenance","Food & Necessities","Miscellaneous"],$scope.totalExpense=record.monthlyExpenseAmt):($scope.incomeExpenseDoughnutData=[1],$scope.incomeExpenseDoughnutLabels=["No Data"]);var rt,feType,feRecords,recordsTotal,diff,diffObj,indRecord,a,dateFormatted,amount,modRecord;for(rt in fixedExpenseArr)for(feType=fixedExpenseArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.feDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.fixedExpenseTable.push(modRecord);for(rt in transportArr)for(feType=transportArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.tDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.transportTable.push(modRecord);for(rt in foodArr)for(feType=foodArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.fDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.foodTable.push(modRecord);for(rt in utilitiesArr)for(feType=utilitiesArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.uDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.utilitiesTable.push(modRecord);for(rt in miscArr)for(feType=miscArr[rt],feRecords=feType.records,recordsTotal=feType.recordsTotal,feType.value>feType.recordsTotal&&(diff=(feType.value-feType.recordsTotal).toFixed(2),diffObj={type:feType.description,diff:diff},$scope.mDiffTable.push(diffObj)),a=0;a<feRecords.length;a++)indRecord=feRecords[a],dateFormatted=dateFormatter(new Date(feRecords[a].date)),amount=feRecords[a].amount.toFixed(2),modRecord={detail:feRecords[a].detail,date:dateFormatted,amount:amount,description:feType.description},$scope.miscTable.push(modRecord)}}},$scope.loadTables(),$scope.addNewExpense=function(){if($scope.type=$scope.type.trim(),$scope.user.incomeExpenseRecordsPeriod?($scope.user.incomeExpenseRecordsPeriod.maxMonth<=presentMonth&&$scope.user.incomeExpenseRecordsPeriod.maxYear<=presentYear||$scope.user.incomeExpenseRecordsPeriod.maxMonth>presentMonth&&$scope.user.incomeExpenseRecordsPeriod.maxYear<presentYear)&&(console.log("do you enter2?"),$scope.user.incomeExpenseRecordsPeriod.maxMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.maxYear=presentYear):(console.log("do you enter?"),$scope.user.incomeExpenseRecordsPeriod={},$scope.user.incomeExpenseRecordsPeriod.minMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.minYear=presentYear,$scope.user.incomeExpenseRecordsPeriod.maxMonth=presentMonth,$scope.user.incomeExpenseRecordsPeriod.maxYear=presentYear),0===$scope.user.incomeExpenseRecords.length)console.log("1st"),$scope.displayIncomeExpenseRecords.year=presentYear,$scope.displayIncomeExpenseRecords.month=presentMonth,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords);else{for(var existenceCheck=0,j=0;j<$scope.user.incomeExpenseRecords.length;j++){var recordChecker=$scope.user.incomeExpenseRecords[j];recordChecker.month===presentMonth&&recordChecker.year===presentYear&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&($scope.displayIncomeExpenseRecords.year=presentYear,$scope.displayIncomeExpenseRecords.month=presentMonth,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords),console.log("3rd"))}for(var i=0;i<$scope.user.incomeExpenseRecords.length;i++){var expenseRecord=$scope.user.incomeExpenseRecords[i];if(expenseRecord.month===presentMonth&&expenseRecord.year===presentYear){var thisMonthSpecExpense={};"fixedExpense"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.fixedExpense:"transport"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.transport:"utility"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.utilityHousehold:"food"===$scope.formRef?thisMonthSpecExpense=expenseRecord.monthlyExpense.foodNecessities:"misc"===$scope.formRef&&(thisMonthSpecExpense=expenseRecord.monthlyExpense.misc);var record={detail:$scope.detail,date:$scope.date,amount:$scope.expenseAmt};console.log("Almost THERE");for(var get in thisMonthSpecExpense){var obj=thisMonthSpecExpense[get];$scope.type===obj.description&&(console.log("SUCCESS"),obj.recordsTotal+=$scope.expenseAmt,obj.records.push(record),obj.recordsTotal>=obj.value&&(obj.value=obj.recordsTotal))}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var rt in fixedExpenseArr){var obj1=fixedExpenseArr[rt];fixedExpenseTotal+=obj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var rt1 in transportArr){var obj2=transportArr[rt1];transportTotal+=obj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var rt2 in utilityHouseholdArr){var obj3=utilityHouseholdArr[rt2];utilityHouseholdTotal+=obj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var rt3 in foodNecessitiesArr){var obj4=foodNecessitiesArr[rt3];foodNecessitiesTotal+=obj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var rt4 in miscArr){var obj5=miscArr[rt4];miscTotal+=obj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.formSubmitted=!0,$scope.detail="",$scope.date="",$scope.expenseAmt="",$scope.type="",$scope.loadTables()},$scope.resetModal=function(){$scope.formSubmitted=!1},$scope.forms={},$scope.$watch("forms.addFixedExpenseForm.$valid",function(){console.log("watching feForm"+$scope.forms.addFixedExpenseForm.$valid)}),$scope.setFixedExpenseBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.fixedExpenseB=$scope.fixedExpenseB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.fixedExpenseB=$scope.fixedExpenseB,$scope.user.budgetLimits.push(newBudget)}0!==$scope.user.budgetLimits.length&&($scope.user.updatedBudget=!0);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setTransportBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.transportB=$scope.transportB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.transportB=$scope.transportB,$scope.user.budgetLimits.push(newBudget)}0!==$scope.user.budgetLimits.length&&($scope.user.updatedBudget=!0);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setUtilitiestBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.utilitiesB=$scope.utilitiesB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.utilitiesB=$scope.utilitiesB,$scope.user.budgetLimits.push(newBudget)}0!==$scope.user.budgetLimits.length&&($scope.user.updatedBudget=!0);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setFoodBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.foodB=$scope.foodB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.foodB=$scope.foodB,$scope.user.budgetLimits.push(newBudget)}0!==$scope.user.budgetLimits.length&&($scope.user.updatedBudget=!0);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.setMiscBudget=function(){for(var checker=0,ab=0;ab<$scope.user.budgetLimits.length;ab++){var budgetLimit=$scope.user.budgetLimits[ab];budgetLimit.year===presentYear&&budgetLimit.month===presentMonth&&(budgetLimit.miscB=$scope.miscB,checker++)}if(0===checker){var newBudget=angular.copy(BudgetService.budgetLimits);newBudget.year=presentYear,newBudget.month=presentMonth,newBudget.miscB=$scope.miscB,$scope.user.budgetLimits.push(newBudget)}0!==$scope.user.budgetLimits.length&&($scope.user.updatedBudget=!0);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),alert("Budget Set!"),$scope.loadTables()},$scope.standbyForDelete=function(item,expenseType){$scope.item=item,$scope.expenseType=expenseType},$scope.cancelDelete=function(){$scope.item="",$scope.expenseType=""},$scope.deleteRecord=function(){for(var i=0;i<$scope.user.incomeExpenseRecords.length;i++){var expenseRecord=$scope.user.incomeExpenseRecords[i];if(expenseRecord.month===presentMonth&&expenseRecord.year===presentYear){console.log("level1");var expenseSelected;"fixedExpense"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.fixedExpense,console.log("level2.1")):"transport"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.transport,console.log("level2.2")):"utility"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.utilityHousehold,console.log("level2.3")):"food"===$scope.expenseType?(expenseSelected=expenseRecord.monthlyExpense.foodNecessities,console.log("level2.4")):"misc"===$scope.expenseType&&(expenseSelected=expenseRecord.monthlyExpense.misc,console.log("level2.5"));for(var get in expenseSelected){var obj=expenseSelected[get];if($scope.item.description===obj.description){console.log("SUCCESS");for(var a=0;a<obj.records.length;a++){var specRec=obj.records[a],itemNo=Number($scope.item.amount);specRec.detail===$scope.item.detail&&specRec.amount===itemNo&&(obj.recordsTotal-=itemNo,obj.value-=itemNo,obj.records.splice(a,1),console.log("Make it?"))}}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var rt in fixedExpenseArr){var obj1=fixedExpenseArr[rt];fixedExpenseTotal+=obj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var rt1 in transportArr){var obj2=transportArr[rt1];transportTotal+=obj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var rt2 in utilityHouseholdArr){var obj3=utilityHouseholdArr[rt2];utilityHouseholdTotal+=obj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var rt3 in foodNecessitiesArr){var obj4=foodNecessitiesArr[rt3];foodNecessitiesTotal+=obj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var rt4 in miscArr){var obj5=miscArr[rt4];miscTotal+=obj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.item="",$scope.expenseType="",$scope.loadTables()},$scope.setFixedExpense=function(){$scope.selectedExpense=$scope.fixedExpense,$scope.formRef="fixedExpense"},$scope.setTransportExpense=function(){$scope.selectedExpense=$scope.transportExpense,$scope.formRef="transport"},$scope.setUtilityExpense=function(){$scope.selectedExpense=$scope.utilityExpense,$scope.formRef="utility"},$scope.setFoodExpense=function(){$scope.selectedExpense=$scope.foodExpense,$scope.formRef="food"},$scope.setMiscExpense=function(){$scope.selectedExpense=$scope.miscExpense,$scope.formRef="misc"}}]),angular.module("financial").controller("DebtsController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q","LiabilitiesService","IncomeExpenseService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q,LiabilitiesService,IncomeExpenseService){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.add1show=!0,$scope.add2show=!1,$scope.mth=[],$scope.mth[0]="January",$scope.mth[1]="February",$scope.mth[2]="March",$scope.mth[3]="April",$scope.mth[4]="May",$scope.mth[5]="June",$scope.mth[6]="July",$scope.mth[7]="August",$scope.mth[8]="September",$scope.mth[9]="October",$scope.mth[10]="November",$scope.mth[11]="December";var dt=new Date,month=dt.getMonth();$scope.month=dt.getMonth(),$scope.monthDisplay=$scope.mth[month];var year=dt.getFullYear();$scope.year=dt.getFullYear(),$scope.displayDate=$scope.mth[month]+", "+year,$scope.selectedYear=$scope.year,$scope.selectedMonth=$scope.mth[$scope.month],$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords);var displayLiabilitiesRecords=angular.copy(LiabilitiesService.liabilitiesRecords),loanMortgageArr=displayLiabilitiesRecords.loansMortgages;$scope.liabilities=[],angular.forEach(loanMortgageArr,function(value,key){$scope.liabilities.push(value)}),$scope.$watch("selectedMonth",function(){$scope.selectedMonthNo=$scope.mth.indexOf($scope.selectedMonth),setDebtRecord(),console.log($scope.selectedMonthNo)}),$scope.$watch("selectedYear",function(){setDebtRecord()});var setDebtRecord=function(){var debtRe=$scope.debt,counterCheckAgn=0;if("undefined"!=typeof debtRe)for(var c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===$scope.selectedYear&&recordDebt.month===$scope.selectedMonthNo&&($scope.recordReq=recordDebt,counterCheckAgn++,console.log("exist?"),$scope.noRecordsToDisplay=!1,$scope.selectedYear===year&&$scope.selectedMonthNo===month?($scope.presentMonthCheck=!0,console.log("Tester")):$scope.presentMonthCheck=!1)}0===counterCheckAgn&&(console.log("No Records"),$scope.noRecordsToDisplay=!0)};$scope.updateRecordsForNewMonth=function(){for(var needToUpdate=!1,b=0;b<$scope.user.debtsInfoArr.length;b++){var debtRe=$scope.user.debtsInfoArr[b];if(debtRe.id=$scope.user.debtsInfoArr.indexOf(debtRe)+1,"In Progress"===debtRe.status){for(var counterCheck=0,c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===year&&recordDebt.month===month&&(console.log("enter or not?"),counterCheck++)}if(0===counterCheck){needToUpdate=!0,console.log("CREATING NEW RECORDS");var record={month:month,year:year,loanBalance:debtRe.loanBalance,monthly:0,monthlyPayStatus:!1,repaymentNo:debtRe.repaymentNo};debtRe.records.push(record),($scope.user.liabilitiesRecordsPeriod.maxMonth<=month&&$scope.user.liabilitiesRecordsPeriod.maxYear<=year||$scope.user.liabilitiesRecordsPeriod.maxMonth>month&&$scope.user.liabilitiesRecordsPeriod.maxYear<year)&&($scope.user.liabilitiesRecordsPeriod.maxMonth=month,$scope.user.liabilitiesRecordsPeriod.maxYear=year);for(var existenceCheck=0,j=0;j<$scope.user.liabilitiesRecords.length;j++){var recordChecker=$scope.user.liabilitiesRecords[j];recordChecker.month===month&&recordChecker.year===year&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&(displayLiabilitiesRecords.year=year,displayLiabilitiesRecords.month=month,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords),console.log("3rd"));for(var i=0;i<$scope.user.liabilitiesRecords.length;i++){var liabilityRecord=$scope.user.liabilitiesRecords[i];if(liabilityRecord.month===month&&liabilityRecord.year===year){var loansMortgagesRec=liabilityRecord.loansMortgages;for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];debtRe.type===obj.description&&(obj.value+=debtRe.loanBalance,obj.minValue+=debtRe.loanBalance)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}}}}if(console.log(needToUpdate),needToUpdate){var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),console.log("logic works")}},$scope.updateRecordsForNewMonth(),$scope.contributionModal=function(debt){$scope.debtDetails=!0,$scope.contributionConfirm=!1,$scope.success=!1,$scope.debt=debt;var debtRe=$scope.debt;console.log($scope.selectedYear),console.log($scope.selectedMonth);for(var c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===$scope.selectedYear&&recordDebt.month===$scope.selectedMonthNo&&($scope.recordReq=recordDebt,console.log($scope.recordReq),$scope.noRecordsToDisplay=!1,$scope.presentMonthCheck=!0)}},$scope.contribute=function(){$scope.debtDetails=!1,$scope.contributionConfirm=!0},$scope.confirmContribute=function(){var expenseChecker;if("Yes"===$scope.debt.linkedStatus){for(var j=0;j<$scope.user.liabilitiesRecords.length;j++){var liabilityRecord=$scope.user.liabilitiesRecords[j];if(liabilityRecord.month===month&&liabilityRecord.year===year){var loansMortgagesRec=liabilityRecord.loansMortgages;for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];$scope.debt.type===obj.description&&(obj.value-=$scope.debt.monthly,obj.minValue-=$scope.debt.monthly)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}if($scope.user.incomeExpenseRecordsPeriod?($scope.user.incomeExpenseRecordsPeriod.maxMonth<=month&&$scope.user.incomeExpenseRecordsPeriod.maxYear<=year||$scope.user.incomeExpenseRecordsPeriod.maxMonth>month&&$scope.user.incomeExpenseRecordsPeriod.maxYear<year)&&(console.log("do you enter2?"),$scope.user.incomeExpenseRecordsPeriod.maxMonth=month,$scope.user.incomeExpenseRecordsPeriod.maxYear=year):(console.log("do you enter?"),$scope.user.incomeExpenseRecordsPeriod={},$scope.user.incomeExpenseRecordsPeriod.minMonth=month,$scope.user.incomeExpenseRecordsPeriod.minYear=year,$scope.user.incomeExpenseRecordsPeriod.maxMonth=month,$scope.user.incomeExpenseRecordsPeriod.maxYear=year),0===$scope.user.incomeExpenseRecords.length)console.log("1st"),$scope.displayIncomeExpenseRecords.year=year,$scope.displayIncomeExpenseRecords.month=month,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords);else{for(var existenceCheck=0,k=0;k<$scope.user.incomeExpenseRecords.length;k++){
var recordChecker=$scope.user.incomeExpenseRecords[k];recordChecker.month===month&&recordChecker.year===year&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&($scope.displayIncomeExpenseRecords.year=year,$scope.displayIncomeExpenseRecords.month=month,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords),console.log("3rd"))}for(var a=0;a<$scope.user.incomeExpenseRecords.length;a++){var expenseRecord=$scope.user.incomeExpenseRecords[a];if(expenseRecord.month===month&&expenseRecord.year===year){var thisMonthSpecExpense={};if(console.log("DIE HERE"),"Car Loan"!==$scope.debt.type){thisMonthSpecExpense=expenseRecord.monthlyExpense.fixedExpense;for(var get10 in thisMonthSpecExpense){var obj10=thisMonthSpecExpense[get10];"Mortgage Loan"===$scope.debt.type&&"Mortgage Repayments"===obj10.description?(console.log("SUCCESS"),obj10.value+=$scope.debt.monthly,expenseChecker=obj10.description):"Mortgage Loan"!==$scope.debt.type&&"Other Loan Repayments"===obj10.description&&(obj10.value+=$scope.debt.monthly,expenseChecker=obj10.description)}}else{thisMonthSpecExpense=expenseRecord.monthlyExpense.transport;for(var get11 in thisMonthSpecExpense){var obj11=thisMonthSpecExpense[get11];"Car Loan Repayments"===obj11.description&&(console.log("SUCCESS"),obj11.value+=$scope.debt.monthly,expenseChecker=obj11.description)}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var at in fixedExpenseArr){var abj1=fixedExpenseArr[at];fixedExpenseTotal+=abj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var at1 in transportArr){var abj2=transportArr[at1];transportTotal+=abj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var at2 in utilityHouseholdArr){var abj3=utilityHouseholdArr[at2];utilityHouseholdTotal+=abj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var at3 in foodNecessitiesArr){var abj4=foodNecessitiesArr[at3];foodNecessitiesTotal+=abj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var at4 in miscArr){var abj5=miscArr[at4];miscTotal+=abj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}}}for(var i=0;i<$scope.user.debtsInfoArr.length;i++){var debtRe=$scope.user.debtsInfoArr[i];if(debtRe.lender===$scope.debt.lender&&debtRe.amt===$scope.debt.amt){debtRe.loanBalance-=debtRe.monthly,debtRe.repaymentNo+=1;for(var c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===year&&recordDebt.month===month&&(console.log("Working so far"),recordDebt.monthly=debtRe.monthly,recordDebt.expenseType=expenseChecker,recordDebt.loanBalance=debtRe.loanBalance,recordDebt.monthlyPayStatus=!0,recordDebt.repaymentNo=debtRe.repaymentNo)}0===debtRe.loanBalance&&(debtRe.status="Completed",debtRe.statusBoolean=!0)}}$scope.debt.monthlyPayStatus=!0;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.contributionConfirm=!1,$scope.success=!0,$scope.debt=null},$scope.addDebtOne=function(){$scope.loanBalance=$scope.newDebt.monthly*$scope.newDebt.lenOfLoan-$scope.newDebt.monthly*$scope.newDebt.repaymentNo,$scope.loanBalance<=0?($scope.loanBalance=0,alert("Check inputs again!")):($scope.displayLoanBalance=$scope.loanBalance.toFixed(2),$scope.newDebt.loanBalance=$scope.loanBalance,console.log($scope.newDebt),$scope.add1show=!1,$scope.add2show=!0)},$scope.setNewLoanBalance=function(){$scope.loanBalance=$scope.newLoanBalance,console.log("TESTER"),$scope.displayLoanBalance=$scope.loanBalance.toFixed(2),$scope.newDebt.loanBalance=$scope.loanBalance},$scope.createNoLinkedDebt=function(){$scope.newDebt.linkedStatus="No",$scope.newDebt.status="In Progress",$scope.newDebt.statusBoolean=!1,$scope.newDebt.id=$scope.user.debtsInfoArr.length+1,$scope.newDebt.creationRecord={month:month,year:year,loanBalance:$scope.newDebt.loanBalance,repaymentNo:$scope.newDebt.repaymentNo},$scope.newDebt.records=[];var record={month:month,year:year,loanBalance:$scope.newDebt.loanBalance,monthly:0,monthlyPayStatus:!1,repaymentNo:$scope.newDebt.repaymentNo};$scope.newDebt.records.push(record),$scope.user.debtsInfoArr.push($scope.newDebt);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.add2show=!1,$scope.add3show=!0},$scope.createLinkedDebt=function(){console.log($scope.newDebt.loanBalance),$scope.newDebt.linkedStatus="Yes",$scope.newDebt.status="In Progress",$scope.newDebt.statusBoolean=!1,$scope.newDebt.id=$scope.user.debtsInfoArr.length+1,$scope.newDebt.creationRecord={month:month,year:year,loanBalance:$scope.newDebt.loanBalance,repaymentNo:$scope.newDebt.repaymentNo},$scope.newDebt.records=[];var record={month:month,year:year,loanBalance:$scope.newDebt.loanBalance,monthly:0,monthlyPayStatus:!1,repaymentNo:$scope.newDebt.repaymentNo};if($scope.newDebt.records.push(record),$scope.user.debtsInfoArr.push($scope.newDebt),console.log(month),console.log(year),$scope.user.liabilitiesRecordsPeriod?($scope.user.liabilitiesRecordsPeriod.maxMonth<=month&&$scope.user.liabilitiesRecordsPeriod.maxYear<=year||$scope.user.liabilitiesRecordsPeriod.maxMonth>month&&$scope.user.liabilitiesRecordsPeriod.maxYear<year)&&($scope.user.liabilitiesRecordsPeriod.maxMonth=month,$scope.user.liabilitiesRecordsPeriod.maxYear=year):($scope.user.liabilitiesRecordsPeriod={},$scope.user.liabilitiesRecordsPeriod.minMonth=month,$scope.user.liabilitiesRecordsPeriod.minYear=year,$scope.user.liabilitiesRecordsPeriod.maxMonth=month,$scope.user.liabilitiesRecordsPeriod.maxYear=year),0===$scope.user.liabilitiesRecords.length)console.log("1st"),displayLiabilitiesRecords.year=year,displayLiabilitiesRecords.month=month,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords);else{for(var existenceCheck=0,j=0;j<$scope.user.liabilitiesRecords.length;j++){var recordChecker=$scope.user.liabilitiesRecords[j];recordChecker.month===month&&recordChecker.year===year&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&(displayLiabilitiesRecords.year=year,displayLiabilitiesRecords.month=month,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords),console.log("3rd"))}for(var i=0;i<$scope.user.liabilitiesRecords.length;i++){var liabilityRecord=$scope.user.liabilitiesRecords[i];if(liabilityRecord.month===month&&liabilityRecord.year===year){var loansMortgagesRec=liabilityRecord.loansMortgages;for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];$scope.newDebt.type===obj.description&&(obj.value+=$scope.newDebt.loanBalance,obj.minValue+=$scope.newDebt.loanBalance)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.add2show=!1,$scope.add3show=!0},$scope.resetModal=function(){$scope.add1show=!0,$scope.add2show=!1,$scope.add3show=!1,$scope.newDebt=null},$scope.previousModal1=function(){$scope.add1show=!0,$scope.add2show=!1},$scope.selectDeleteRecord=function(debt){$scope.debt=debt},$scope.deleteRecord=function(){$scope.showAdd=!1;var index=$scope.user.debtsInfoArr.indexOf($scope.debt);$scope.user.debtsInfoArr.splice(index,1);for(var b=0;b<$scope.user.debtsInfoArr.length;b++){var debtRe=$scope.user.debtsInfoArr[b];debtRe.id=$scope.user.debtsInfoArr.indexOf(debtRe)+1}var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})},$scope.cancel=function(){$scope.showAdd=!1,$scope.selectedDebtRecord=null}}]),angular.module("financial").controller("DebtsController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q","LiabilitiesService","IncomeExpenseService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q,LiabilitiesService,IncomeExpenseService){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.add1show=!0,$scope.add2show=!1,$scope.mth=[],$scope.mth[0]="January",$scope.mth[1]="February",$scope.mth[2]="March",$scope.mth[3]="April",$scope.mth[4]="May",$scope.mth[5]="June",$scope.mth[6]="July",$scope.mth[7]="August",$scope.mth[8]="September",$scope.mth[9]="October",$scope.mth[10]="November",$scope.mth[11]="December";var dt=new Date;console.log(dt);var month=dt.getMonth();$scope.month=dt.getMonth(),$scope.monthDisplay=$scope.mth[month];var year=dt.getFullYear();$scope.year=dt.getFullYear(),$scope.displayDate=$scope.mth[month]+", "+year,$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords);var displayLiabilitiesRecords=angular.copy(LiabilitiesService.liabilitiesRecords),loanMortgageArr=displayLiabilitiesRecords.loansMortgages;$scope.liabilities=[],angular.forEach(loanMortgageArr,function(value,key){$scope.liabilities.push(value)}),$scope.newDebt={};var monthPartString,datePartString;monthPartString=1===(dt.getMonth()+1).toString().length?"-0"+(dt.getMonth()+1):"-"+(dt.getMonth()+1),datePartString=1===dt.getDate().toString().length?"-0"+dt.getDate():"-"+dt.getDate(),$scope.newDebt.startDate=dt.getFullYear()+monthPartString+datePartString;var dateFormatter=function(date){var mth=[];mth[0]="Jan",mth[1]="Feb",mth[2]="Mar",mth[3]="Apr",mth[4]="May",mth[5]="Jun",mth[6]="Jul",mth[7]="Aug",mth[8]="Sept",mth[9]="Oct",mth[10]="Nov",mth[11]="Dec";var monthString=mth[date.getMonth()],dateString=date.getDate(),yearString=date.getYear()+1900,final_String=dateString+"-"+monthString+"-"+yearString;return final_String},noOfMonths=function(date1,date2){var Nomonths;return Nomonths=12*(date2.getFullYear()-date1.getFullYear()),Nomonths-=date1.getMonth()+1,Nomonths+=date2.getMonth(),0>=Nomonths?0:Nomonths},jan312009=new Date(2015,9,4),eightMonthsFromJan312009=new Date(new Date(jan312009).setMonth(jan312009.getMonth()+3));console.log("TESTER"),console.log(jan312009),console.log(eightMonthsFromJan312009),$scope.updateRecordsForNewMonth=function(){for(var needToUpdate=!1,b=0;b<$scope.user.debtsInfoArr.length;b++){var debtRe=$scope.user.debtsInfoArr[b];if(debtRe.id=$scope.user.debtsInfoArr.indexOf(debtRe)+1,"In Progress"===debtRe.status){for(var counterCheck=0,c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===year&&recordDebt.month===month&&(console.log("enter or not?"),counterCheck++)}if(0===counterCheck){needToUpdate=!0;var monthCounter=noOfMonths(new Date($scope.user.lastUpdateDebts),dt)+1;console.log("no of months is: "+monthCounter);for(var m=1;monthCounter>=m;m++){displayLiabilitiesRecords=angular.copy(LiabilitiesService.liabilitiesRecords);var fromDate=new Date($scope.user.lastUpdateDebts),currentDate=new Date(fromDate.setMonth(fromDate.getMonth()+m)),thisMonth=currentDate.getMonth(),thisYear=currentDate.getFullYear();console.log("what is this month?:"+thisMonth),console.log("what is this year?:"+thisYear),console.log("CREATING NEW RECORDS");var record={id:debtRe.records.length+1,month:thisMonth,year:thisYear,loanBalance:debtRe.loanBalance,monthly:0,monthlyPayStatus:!1,repaymentNo:debtRe.repaymentNo,liabilitiesRecordsCreated:!0,IERecordsCreated:!1};debtRe.records.push(record),($scope.user.liabilitiesRecordsPeriod.maxMonth<=thisMonth&&$scope.user.liabilitiesRecordsPeriod.maxYear<=thisYear||$scope.user.liabilitiesRecordsPeriod.maxMonth>thisMonth&&$scope.user.liabilitiesRecordsPeriod.maxYear<thisYear)&&($scope.user.liabilitiesRecordsPeriod.maxMonth=thisMonth,$scope.user.liabilitiesRecordsPeriod.maxYear=thisYear);for(var existenceCheck=0,j=0;j<$scope.user.liabilitiesRecords.length;j++){var recordChecker=$scope.user.liabilitiesRecords[j];recordChecker.month===thisMonth&&recordChecker.year===thisYear&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&(displayLiabilitiesRecords.year=thisYear,displayLiabilitiesRecords.month=thisMonth,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords),console.log("3rd"),console.log("Test 1 "+thisMonth),console.log("Test 1"+thisYear));for(var i=0;i<$scope.user.liabilitiesRecords.length;i++){var liabilityRecord=$scope.user.liabilitiesRecords[i];if(liabilityRecord.month===thisMonth&&liabilityRecord.year===thisYear){var loansMortgagesRec=liabilityRecord.loansMortgages;console.log("Test 2 "+thisMonth),console.log("Test 2 "+thisYear);for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];debtRe.type===obj.description&&(obj.value+=debtRe.loanBalance,obj.minValue+=debtRe.loanBalance)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}}}}}if(console.log(needToUpdate),needToUpdate){$scope.user.lastUpdateDebts=dt.getFullYear()+"-"+(dt.getMonth()+1)+"-"+dt.getDate();var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),console.log("logic works")}},$scope.updateRecordsForNewMonth(),$scope.contributionModal=function(debt){$scope.debtDetails=!0,$scope.contributionConfirm=!1,$scope.success=!1,$scope.debt=debt,$scope.displayStartDate=dateFormatter(new Date($scope.debt.startDate)),$scope.displayEndDate=dateFormatter(new Date($scope.debt.endDate));var debtRe=$scope.debt;console.log($scope.selectedYear),console.log($scope.selectedMonth);for(var c=0;c<debtRe.records.length;c++){var recordDebt=debtRe.records[c];recordDebt.year===$scope.selectedYear&&recordDebt.month===$scope.selectedMonthNo&&($scope.recordReq=recordDebt,console.log($scope.recordReq),$scope.noRecordsToDisplay=!1,$scope.presentMonthCheck=!0)}},$scope.contribute=function(){$scope.debtDetails=!1,$scope.contributionConfirm=!0},$scope.confirmContribute=function(){var expenseChecker;if($scope.user.incomeExpenseRecordsPeriod?($scope.user.incomeExpenseRecordsPeriod.maxMonth<=$scope.item.month&&$scope.user.incomeExpenseRecordsPeriod.maxYear<=$scope.item.year||$scope.user.incomeExpenseRecordsPeriod.maxMonth>$scope.item.month&&$scope.user.incomeExpenseRecordsPeriod.maxYear<$scope.item.year)&&(console.log("do you enter2?"),$scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.item.month,$scope.user.incomeExpenseRecordsPeriod.maxYear=$scope.item.year):(console.log("do you enter?"),$scope.user.incomeExpenseRecordsPeriod={},$scope.user.incomeExpenseRecordsPeriod.minMonth=$scope.item.month,$scope.user.incomeExpenseRecordsPeriod.minYear=$scope.item.year,$scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.item.month,$scope.user.incomeExpenseRecordsPeriod.maxYear=$scope.item.year),0===$scope.user.incomeExpenseRecords.length)console.log("1st"),$scope.displayIncomeExpenseRecords.year=$scope.item.year,$scope.displayIncomeExpenseRecords.month=$scope.item.month,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords);else{for(var existenceCheck=0,k=0;k<$scope.user.incomeExpenseRecords.length;k++){var recordChecker=$scope.user.incomeExpenseRecords[k];recordChecker.month===$scope.item.month&&recordChecker.year===$scope.item.year&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&($scope.displayIncomeExpenseRecords.year=$scope.item.year,$scope.displayIncomeExpenseRecords.month=$scope.item.month,$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords),console.log("3rd"))}for(var a=0;a<$scope.user.incomeExpenseRecords.length;a++){var expenseRecord=$scope.user.incomeExpenseRecords[a];if(expenseRecord.month===$scope.item.month&&expenseRecord.year===$scope.item.year){var thisMonthSpecExpense={};if(console.log("DIE HERE"),"Car Loan"!==$scope.debt.type){thisMonthSpecExpense=expenseRecord.monthlyExpense.fixedExpense;for(var get10 in thisMonthSpecExpense){var obj10=thisMonthSpecExpense[get10];"Mortgage Loan"===$scope.debt.type&&"Mortgage Repayments"===obj10.description?(console.log("SUCCESS"),obj10.value+=$scope.debt.monthly,expenseChecker=obj10.description):"Mortgage Loan"!==$scope.debt.type&&"Other Loan Repayments"===obj10.description&&(obj10.value+=$scope.debt.monthly,expenseChecker=obj10.description)}}else{thisMonthSpecExpense=expenseRecord.monthlyExpense.transport;for(var get11 in thisMonthSpecExpense){var obj11=thisMonthSpecExpense[get11];"Car Loan Repayments"===obj11.description&&(console.log("SUCCESS"),obj11.value+=$scope.debt.monthly,expenseChecker=obj11.description)}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var at in fixedExpenseArr){var abj1=fixedExpenseArr[at];fixedExpenseTotal+=abj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var at1 in transportArr){var abj2=transportArr[at1];transportTotal+=abj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var at2 in utilityHouseholdArr){var abj3=utilityHouseholdArr[at2];utilityHouseholdTotal+=abj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var at3 in foodNecessitiesArr){var abj4=foodNecessitiesArr[at3];foodNecessitiesTotal+=abj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var at4 in miscArr){var abj5=miscArr[at4];miscTotal+=abj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}}var dateItemStart=new Date($scope.item.year,$scope.item.month,1),monthCounter=noOfMonths(dateItemStart,new Date($scope.user.lastUpdateDebts))+1;console.log(dateItemStart),console.log(new Date($scope.user.lastUpdateDebts)),console.log("no of months is: "+monthCounter),console.log("Month Zero update");for(var i=0;i<$scope.user.debtsInfoArr.length;i++){var debtRe=$scope.user.debtsInfoArr[i];if(debtRe.id===$scope.debt.id)for(var m=0;monthCounter>=m;m++){console.log("m is: "+m),dateItemStart=new Date($scope.item.year,$scope.item.month,1);var recordDebt,currentDate=new Date(dateItemStart.setMonth(dateItemStart.getMonth()+m)),thisMonth=currentDate.getMonth(),thisYear=currentDate.getFullYear();if(console.log("STARTING OF DEBUG"),console.log(currentDate),0===m){debtRe.loanBalance-=$scope.debt.monthly,debtRe.loanBalance<0&&(debtRe.loanBalance=0),debtRe.repaymentNo+=1,debtRe.monthly=$scope.debt.monthly,0===debtRe.loanBalance&&(debtRe.status="Completed",debtRe.statusBoolean=!0,monthPartString=1===(dt.getMonth()+1).toString().length?"-0"+(dt.getMonth()+1):"-"+(dt.getMonth()+1),datePartString=1===dt.getDate().toString().length?"-0"+dt.getDate():"-"+dt.getDate(),debtRe.actualEndDate=dt.getFullYear()+monthPartString+datePartString);for(var c=0;c<debtRe.records.length;c++)recordDebt=debtRe.records[c],recordDebt.year===thisYear&&recordDebt.month===thisMonth&&(console.log("Month Zero update"),recordDebt.monthly=$scope.debt.monthly,recordDebt.expenseType=expenseChecker,recordDebt.loanBalance-=$scope.debt.monthly,recordDebt.loanBalance<0&&(recordDebt.loanBalance=0),recordDebt.monthlyPayStatus=!0,recordDebt.repaymentNo=debtRe.repaymentNo,recordDebt.date=dt,recordDebt.IERecordsCreated=!0)}else for(var d=0;d<debtRe.records.length;d++)recordDebt=debtRe.records[d],recordDebt.year===thisYear&&recordDebt.month===thisMonth&&(console.log("Month update"),recordDebt.loanBalance-=$scope.debt.monthly,recordDebt.loanBalance<0&&(recordDebt.loanBalance=0),recordDebt.repaymentNo=debtRe.repaymentNo,recordDebt.IERecordsCreated=!1);for(var j=0;j<$scope.user.liabilitiesRecords.length;j++){var liabilityRecord=$scope.user.liabilitiesRecords[j];if(console.log("Is every month running? "+m),liabilityRecord.month===thisMonth&&liabilityRecord.year===thisYear){var loansMortgagesRec=liabilityRecord.loansMortgages;console.log("WHAT THE FUCK IS M: "+m),console.log("this month: "+thisMonth);for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];$scope.debt.type===obj.description&&(obj.value-=$scope.debt.monthly,obj.minValue-=$scope.debt.monthly,console.log("obj value"+obj.value),obj.value<0&&(obj.value=0),obj.minValue<0&&(obj.minValue=0))}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}}}var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})},$scope.markAsComplete=function(debt){var completedObj=debt;completedObj.id=$scope.user.completedMilestones.length+1,console.log(completedObj),$scope.user.debtsCompletedArr.push(completedObj);for(var i=0;i<$scope.user.debtsInfoArr.length;i++){var debtSelected=$scope.user.debtsInfoArr[i];debtSelected.id===debt.id&&$scope.user.debtsInfoArr.splice(i,1)}$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})},$scope.addDebtOne=function(){$scope.loanBalance=$scope.newDebt.monthly*$scope.newDebt.lenOfLoan-$scope.newDebt.monthly*$scope.newDebt.repaymentNo,$scope.loanBalance<=0?($scope.loanBalance=0,alert("Check inputs again!")):($scope.displayLoanBalance=$scope.loanBalance.toFixed(2),$scope.newDebt.loanBalance=$scope.loanBalance,console.log($scope.newDebt),$scope.add1show=!1,$scope.add2show=!0)},$scope.setNewLoanBalance=function(){$scope.loanBalance=$scope.newLoanBalance,console.log("TESTER"),$scope.displayLoanBalance=$scope.loanBalance.toFixed(2),$scope.newDebt.loanBalance=$scope.loanBalance},$scope.getItem=function(item){$scope.item=item,console.log($scope.item),console.log($scope.debt)},$scope.createLinkedDebt=function(){console.log($scope.newDebt.loanBalance),console.log(typeof $scope.newDebt.startDate),$scope.newDebt.status="In Progress",$scope.newDebt.statusBoolean=!1;var startDate=new Date($scope.newDebt.startDate),endDate=new Date(new Date(startDate).setMonth(startDate.getMonth()+$scope.newDebt.lenOfLoan));if(endDate>dt){var monthPartString,datePartString;monthPartString=1===(endDate.getMonth()+1).toString().length?"-0"+(endDate.getMonth()+1):"-"+(endDate.getMonth()+1),datePartString=1===endDate.getDate().toString().length?"-0"+endDate.getDate():"-"+endDate.getDate(),$scope.newDebt.endDate=endDate.getFullYear()+monthPartString+datePartString,$scope.newDebt.id=$scope.user.debtsInfoArr.length+1,$scope.newDebt.creationRecord={month:month,year:year,loanBalance:$scope.newDebt.loanBalance,repaymentNo:$scope.newDebt.repaymentNo},$scope.newDebt.records=[];var record={id:$scope.newDebt.records.length+1,month:month,year:year,loanBalance:$scope.newDebt.loanBalance,monthly:0,monthlyPayStatus:!1,repaymentNo:$scope.newDebt.repaymentNo,liabilitiesRecordsCreated:!0,IERecordsCreated:!1};if($scope.newDebt.records.push(record),$scope.user.debtsInfoArr.push($scope.newDebt),console.log(month),console.log(year),$scope.user.liabilitiesRecordsPeriod?($scope.user.liabilitiesRecordsPeriod.maxMonth<=month&&$scope.user.liabilitiesRecordsPeriod.maxYear<=year||$scope.user.liabilitiesRecordsPeriod.maxMonth>month&&$scope.user.liabilitiesRecordsPeriod.maxYear<year)&&($scope.user.liabilitiesRecordsPeriod.maxMonth=month,$scope.user.liabilitiesRecordsPeriod.maxYear=year):($scope.user.liabilitiesRecordsPeriod={},$scope.user.liabilitiesRecordsPeriod.minMonth=month,$scope.user.liabilitiesRecordsPeriod.minYear=year,$scope.user.liabilitiesRecordsPeriod.maxMonth=month,$scope.user.liabilitiesRecordsPeriod.maxYear=year),0===$scope.user.liabilitiesRecords.length)console.log("1st"),displayLiabilitiesRecords.year=year,displayLiabilitiesRecords.month=month,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords);else{for(var existenceCheck=0,j=0;j<$scope.user.liabilitiesRecords.length;j++){var recordChecker=$scope.user.liabilitiesRecords[j];recordChecker.month===month&&recordChecker.year===year&&(existenceCheck++,console.log("2nd"))}0===existenceCheck&&(displayLiabilitiesRecords.year=year,displayLiabilitiesRecords.month=month,$scope.user.liabilitiesRecords.push(displayLiabilitiesRecords),console.log("3rd"))}for(var i=0;i<$scope.user.liabilitiesRecords.length;i++){var liabilityRecord=$scope.user.liabilitiesRecords[i];if(liabilityRecord.month===month&&liabilityRecord.year===year){var loansMortgagesRec=liabilityRecord.loansMortgages;for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];$scope.newDebt.type===obj.description&&(obj.value+=$scope.newDebt.loanBalance,obj.minValue+=$scope.newDebt.loanBalance)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}$scope.user.lastUpdateDebts=dt.getFullYear()+"-"+(dt.getMonth()+1)+"-"+dt.getDate();var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.add2show=!1,$scope.add3show=!0}else alert("Set an active loan. Loan must be completed after today.")},$scope.resetModal=function(){$scope.add1show=!0,$scope.add2show=!1,$scope.add3show=!1,$scope.newDebt={},1===(dt.getMonth()+1).toString().length?$scope.newDebt.startDate=dt.getFullYear()+"-0"+(dt.getMonth()+1)+"-0"+dt.getDate():$scope.newDebt.startDate=dt.getFullYear()+"-"+(dt.getMonth()+1)+"-0"+dt.getDate(),console.log($scope.newDebt.startDate)},$scope.previousModal1=function(){$scope.add1show=!0,$scope.add2show=!1},$scope.selectDeleteRecord=function(debt){$scope.debt=debt},$scope.deleteRecord=function(type){var deleteType=type;console.log(deleteType),console.log($scope.debt),$scope.debt.actualEndDate||($scope.debt.actualEndDate=new Date);var dateItemStart=new Date($scope.debt.startDate),monthCounter=noOfMonths(dateItemStart,new Date($scope.debt.actualEndDate))+1;console.log(dateItemStart),console.log("no of months is: "+monthCounter);for(var m=0;monthCounter>=m;m++){console.log("m is: "+m),dateItemStart=new Date($scope.debt.startDate);var recordDebt,currentDate=new Date(dateItemStart.setMonth(dateItemStart.getMonth()+m)),thisMonth=currentDate.getMonth(),thisYear=currentDate.getFullYear();console.log("STARTING OF DEBUG"),console.log(currentDate);for(var c=0;c<$scope.debt.records.length;c++){var currentDebtRecord=$scope.debt.records[c];currentDebtRecord.year===thisYear&&currentDebtRecord.month===thisMonth&&(recordDebt=currentDebtRecord)}for(var j=0;j<$scope.user.liabilitiesRecords.length;j++){var liabilityRecord=$scope.user.liabilitiesRecords[j];if(liabilityRecord.month===thisMonth&&liabilityRecord.year===thisYear){var loansMortgagesRec=liabilityRecord.loansMortgages;console.log("Deleting");for(var get in loansMortgagesRec){var obj=loansMortgagesRec[get];$scope.debt.type===obj.description&&(console.log("Got Minus?"),obj.value-=recordDebt.loanBalance,obj.minValue-=recordDebt.loanBalance)}var shortTermCreditArr=liabilityRecord.shortTermCredit,shortTermCreditTotal=0;for(var rt in shortTermCreditArr){var obj1=shortTermCreditArr[rt];shortTermCreditTotal+=obj1.value}var loansMortgagesArr=liabilityRecord.loansMortgages,loansMortgagesTotal=0;for(var rt1 in loansMortgagesArr){var obj2=loansMortgagesArr[rt1];loansMortgagesTotal+=obj2.value}var otherLiabilitiesArr=liabilityRecord.otherLiabilities,otherLiabilitiesTotal=0;for(var rt2 in otherLiabilitiesArr){var obj3=otherLiabilitiesArr[rt2];otherLiabilitiesTotal+=obj3.value}var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;liabilityRecord.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),
liabilityRecord.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),liabilityRecord.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),liabilityRecord.totalAmt=liabilitiesTotal.toFixed(2)}}for(var a=0;a<$scope.user.incomeExpenseRecords.length;a++){var expenseRecord=$scope.user.incomeExpenseRecords[a];if(expenseRecord.month===thisMonth&&expenseRecord.year===thisYear){var thisMonthSpecExpense={};if(console.log("DIE HERE"),"Car Loan"!==$scope.debt.type){thisMonthSpecExpense=expenseRecord.monthlyExpense.fixedExpense;for(var get10 in thisMonthSpecExpense){var obj10=thisMonthSpecExpense[get10];"Mortgage Loan"===$scope.debt.type&&"Mortgage Repayments"===obj10.description?(console.log("SUCCESS"),obj10.value-=recordDebt.monthly):"Mortgage Loan"!==$scope.debt.type&&"Other Loan Repayments"===obj10.description&&(obj10.value-=recordDebt.monthly)}}else{thisMonthSpecExpense=expenseRecord.monthlyExpense.transport;for(var get11 in thisMonthSpecExpense){var obj11=thisMonthSpecExpense[get11];"Car Loan Repayments"===obj11.description&&(console.log("SUCCESS"),obj11.value-=recordDebt.monthly)}}var fixedExpenseArr=expenseRecord.monthlyExpense.fixedExpense,fixedExpenseTotal=0;for(var at in fixedExpenseArr){var abj1=fixedExpenseArr[at];fixedExpenseTotal+=abj1.value}expenseRecord.fixedExpenseAmt=fixedExpenseTotal.toFixed(2);var transportArr=expenseRecord.monthlyExpense.transport,transportTotal=0;for(var at1 in transportArr){var abj2=transportArr[at1];transportTotal+=abj2.value}expenseRecord.transportAmt=transportTotal.toFixed(2);var utilityHouseholdArr=expenseRecord.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;for(var at2 in utilityHouseholdArr){var abj3=utilityHouseholdArr[at2];utilityHouseholdTotal+=abj3.value}expenseRecord.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2);var foodNecessitiesArr=expenseRecord.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;for(var at3 in foodNecessitiesArr){var abj4=foodNecessitiesArr[at3];foodNecessitiesTotal+=abj4.value}expenseRecord.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2);var miscArr=expenseRecord.monthlyExpense.misc,miscTotal=0;for(var at4 in miscArr){var abj5=miscArr[at4];miscTotal+=abj5.value}expenseRecord.miscAmt=miscTotal.toFixed(2);var monthlyIncomeAmt=Number(expenseRecord.monthlyIncomeAmt),monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;expenseRecord.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),expenseRecord.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),expenseRecord.netCashFlow=netCashFlow.toFixed(2)}}}var index,debtRe;if("progressArray"===deleteType){index=$scope.user.debtsInfoArr.indexOf($scope.debt),$scope.user.debtsInfoArr.splice(index,1);for(var b=0;b<$scope.user.debtsInfoArr.length;b++)debtRe=$scope.user.debtsInfoArr[b],debtRe.id=$scope.user.debtsInfoArr.indexOf(debtRe)+1}else{index=$scope.user.debtsCompletedArr.indexOf($scope.debt),$scope.user.debtsCompletedArr.splice(index,1);for(var bc=0;bc<$scope.user.debtsCompletedArr.length;bc++)debtRe=$scope.user.debtsCompletedArr[bc],debtRe.id=$scope.user.debtsCompletedArr.indexOf(debtRe)+1}var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})},$scope.cancel=function(){$scope.showAdd=!1,$scope.selectedDebtRecord=null}}]),angular.module("financial").controller("FinancesController",["$scope","$rootScope","$stateParams","$location","Authentication","LiabilitiesService","AssetsService","IncomeExpenseService","Users","$q","FinancialHealthService",function($scope,$rootScope,$stateParams,$location,Authentication,LiabilitiesService,AssetsService,IncomeExpenseService,Users,$q,FinancialHealthService){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.displayHome={},$scope.homeHealth=[{value:100,type:"info"}],$scope.homeHealthDisplay=!1,$scope.displayOverview={},$scope.displayOverview.ratioLiquidity="N/A",$scope.displayOverview.ratioTotalLiquidity="N/A",$scope.displayOverview.ratioSaving="N/A",$scope.displayOverview.ratioBasicSaving="N/A",$scope.displayOverview.ratioEssentialExpenses="N/A",$scope.displayOverview.ratioLifestyleExpenses="N/A",$scope.displayOverview.ratioAssetDebt="N/A",$scope.displayOverview.ratioDebtService="N/A",$scope.displayOverview.ratioHouseExpense="N/A",$scope.displayOverview.ratioDebtIncome="N/A",$scope.displayOverview.ratioConsumerDebt="N/A",$scope.displayOverview.ratioNetWorthBenchmark="N/A",$scope.displayOverview.ratioSolvency="N/A",$scope.displayOverview.ratioCurrentAssetDebt="N/A",$scope.displayOverview.ratioInvestment="N/A",$scope.check={ratio:"liquidity"},$scope.checkTotal={},$scope.checkTotal.assets=!0,$scope.checkTotal.liabilities=!0,$scope.checkTotal.netGrossIncome=!0,$scope.tips=FinancialHealthService.tips,$scope.analysisRatio=FinancialHealthService.analysisRatio,$scope.displayAnalysis={},this.$setScope=function(context){$scope=context},$scope.oneAtATime=!1,$scope.monthArr=["January","February","March","April","May","June","July","August","September","October","November","December"];var current=function(){$scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),$scope.monthDisplay=$scope.selectedMonth,console.log($scope.month),console.log($scope.year),$scope.selectedMonth=$scope.monthArr[$scope.month],console.log($scope.selectedMonth),$scope.selectedYear=$scope.year};current(),$scope.selectedChartOption="0";var ratioLiquidityArr=[],ratioIdealLiquidityMinArr=[],ratioIdealLiquidityMaxArr=[],ratioTotalLiquidityArr=[],ratioIdealTotalLiquidityMinArr=[],ratioSavingArr=[],ratioIdealSavingMinArr=[],ratioIdealSavingMaxArr=[],ratioBasicSavingArr=[],ratioIdealBasicSavingMinArr=[],ratioEssentialExpensesArr=[],ratioIdealEssentialExpensesMaxArr=[],ratioLifestyleExpensesArr=[],ratioIdealLifestyleExpensesMaxArr=[],ratioAssetDebtArr=[],ratioIdealAssetDebtMinArr=[],ratioIdealAssetDebtMaxArr=[],ratioDebtServiceArr=[],ratioIdealDebtServiceMinArr=[],ratioIdealDebtServiceMaxArr=[],ratioHouseExpenseArr=[],ratioIdealHouseExpenseMinArr=[],ratioIdealHouseExpenseMaxArr=[],ratioDebtIncomeArr=[],ratioIdealDebtIncomeMinArr=[],ratioIdealDebtIncomeMaxArr=[],ratioConsumerDebtArr=[],ratioIdealConsumerDebtMinArr=[],ratioIdealConsumerDebtMaxArr=[],ratioNetWorthBenchmarkArr=[],ratioIdealNetWorthBenchmarkMinArr=[],ratioSolvencyArr=[],ratioIdealSolvencyMinArr=[],ratioCurrentAssetDebtArr=[],ratioIdealCurrentAssetDebtMinArr=[],ratioInvestmentArr=[],ratioIdealInvestmentMinArr=[];$scope.$watch("selectedMonth",function(){retrieveLatestRecords()}),$scope.$watch("selectedYear",function(){retrieveLatestRecords()});var retrieveLatestRecords=function(){$scope.month=$scope.monthArr.indexOf($scope.selectedMonth),$scope.monthDisplay=$scope.selectedMonth,$scope.year=$scope.selectedYear,$scope.displayAssetsRecords=retrieveAssetsRecord($scope.month,$scope.year),$scope.displayLiabilitiesRecords=retrieveLiabilitiesRecords($scope.month,$scope.year),$scope.displayIncomeExpenseRecords=retrieveIncomeExpenseRecords($scope.month,$scope.year),$scope.displayOverview.totalAssets=$scope.displayAssetsRecords.totalAmt,$scope.displayOverview.totalLiabilities=$scope.displayLiabilitiesRecords.totalAmt,$scope.displayOverview.netWorth=($scope.displayAssetsRecords.totalAmt-$scope.displayLiabilitiesRecords.totalAmt).toFixed(2),$scope.displayOverview.totalNetGrossIncome=$scope.displayIncomeExpenseRecords.netCashFlow,$scope.displayOverview.monthlyIncome=$scope.displayIncomeExpenseRecords.monthlyIncomeAmt,$scope.displayOverview.monthlyExpense=$scope.displayIncomeExpenseRecords.monthlyExpenseAmt,calculateRatios(),$scope.$watch("selectedChartOption",function(){updateChart()})};$scope.r=function(){retrieveLatestRecords()},$scope.$watch("selectedChartOption",function(){updateChart()}),$scope.$watch("check.ratio",function(){updateChart()}),$scope.$watch("checkTotal.assets",function(){updateChart()}),$scope.$watch("checkTotal.liabilities",function(){updateChart()}),$scope.$watch("checkTotal.netWorth",function(){updateChart()}),$scope.$watch("checkTotal.netGrossIncome",function(){updateChart()}),$scope.$watch("checkTotal.monthlyIncome",function(){updateChart()}),$scope.$watch("checkTotal.monthlyExpense",function(){updateChart()});var updateChart=function(){var ratioMthNum,aRecords,lRecords,ieRecords,ratioMthArr=[],ratioMth=angular.copy($scope.month),ratioYear=angular.copy($scope.year),aRecordsTotalAmtArr=[],lRecordsTotalAmtArr=[],netWorthTotalAmtArr=[],ieRecordsTotalAmtArr=[],ieRecordsIncomeArr=[],ieRecordsExpenseArr=[];if("0"===$scope.selectedChartOption)for(ratioMthNum=2;ratioMthNum>=0;ratioMthNum--){ratioMthArr[ratioMthNum]=$scope.monthArr[ratioMth],aRecords=retrieveAssetsRecord(ratioMth,ratioYear),lRecords=retrieveLiabilitiesRecords(ratioMth,ratioYear),ieRecords=retrieveIncomeExpenseRecords(ratioMth,ratioYear);try{aRecordsTotalAmtArr[ratioMthNum]=aRecords.totalAmt}catch(e){aRecordsTotalAmtArr[ratioMthNum]=0}try{lRecordsTotalAmtArr[ratioMthNum]=lRecords.totalAmt}catch(e){lRecordsTotalAmtArr[ratioMthNum]=0}try{netWorthTotalAmtArr[ratioMthNum]=aRecords.totalAmt-lRecords.totalAmt}catch(e){netWorthTotalAmtArr[ratioMthNum]=0}try{ieRecordsTotalAmtArr[ratioMthNum]=ieRecords.netCashFlow}catch(e){ieRecordsTotalAmtArr[ratioMthNum]=0}try{ieRecordsIncomeArr[ratioMthNum]=ieRecords.monthlyIncomeAmt}catch(e){ieRecordsIncomeArr[ratioMthNum]=0}try{ieRecordsExpenseArr[ratioMthNum]=ieRecords.monthlyExpenseAmt}catch(e){ieRecordsExpenseArr[ratioMthNum]=0}calculateRatiosChart(aRecords,lRecords,ieRecords,ratioMthNum),ratioMth--,0>ratioMth&&(ratioMth=11,ratioYear--)}else if("1"===$scope.selectedChartOption)for(ratioMthNum=5;ratioMthNum>=0;ratioMthNum--){ratioMthArr[ratioMthNum]=$scope.monthArr[ratioMth],aRecords=retrieveAssetsRecord(ratioMth,ratioYear),lRecords=retrieveLiabilitiesRecords(ratioMth,ratioYear),ieRecords=retrieveIncomeExpenseRecords(ratioMth,ratioYear);try{aRecordsTotalAmtArr[ratioMthNum]=aRecords.totalAmt}catch(e){aRecordsTotalAmtArr[ratioMthNum]=0}try{lRecordsTotalAmtArr[ratioMthNum]=lRecords.totalAmt}catch(e){lRecordsTotalAmtArr[ratioMthNum]=0}try{netWorthTotalAmtArr[ratioMthNum]=aRecords.totalAmt-lRecords.totalAmt}catch(e){netWorthTotalAmtArr[ratioMthNum]=0}try{ieRecordsTotalAmtArr[ratioMthNum]=ieRecords.netCashFlow}catch(e){ieRecordsTotalAmtArr[ratioMthNum]=0}try{ieRecordsIncomeArr[ratioMthNum]=ieRecords.monthlyIncomeAmt}catch(e){ieRecordsIncomeArr[ratioMthNum]=0}try{ieRecordsExpenseArr[ratioMthNum]=ieRecords.monthlyExpenseAmt}catch(e){ieRecordsExpenseArr[ratioMthNum]=0}calculateRatiosChart(aRecords,lRecords,ieRecords,ratioMthNum),ratioMth--,0>ratioMth&&(ratioMth=11,ratioYear--)}else if("2"===$scope.selectedChartOption)for(ratioMthNum=11;ratioMthNum>=0;ratioMthNum--){ratioMthArr[ratioMthNum]=$scope.monthArr[ratioMth],aRecords=retrieveAssetsRecord(ratioMth,ratioYear),lRecords=retrieveLiabilitiesRecords(ratioMth,ratioYear),ieRecords=retrieveIncomeExpenseRecords(ratioMth,ratioYear);try{aRecordsTotalAmtArr[ratioMthNum]=aRecords.totalAmt}catch(e){aRecordsTotalAmtArr[ratioMthNum]=0}try{lRecordsTotalAmtArr[ratioMthNum]=lRecords.totalAmt}catch(e){lRecordsTotalAmtArr[ratioMthNum]=0}try{netWorthTotalAmtArr[ratioMthNum]=(aRecords.totalAmt-lRecords.totalAmt).toFixed(2)}catch(e){netWorthTotalAmtArr[ratioMthNum]=0}try{ieRecordsTotalAmtArr[ratioMthNum]=ieRecords.netCashFlow}catch(e){ieRecordsTotalAmtArr[ratioMthNum]=0}try{ieRecordsIncomeArr[ratioMthNum]=ieRecords.monthlyIncomeAmt}catch(e){ieRecordsIncomeArr[ratioMthNum]=0}try{ieRecordsExpenseArr[ratioMthNum]=ieRecords.monthlyExpenseAmt}catch(e){ieRecordsExpenseArr[ratioMthNum]=0}calculateRatiosChart(aRecords,lRecords,ieRecords,ratioMthNum),ratioMth--,0>ratioMth&&(ratioMth=11,ratioYear--)}$scope.labels=ratioMthArr,$scope.series=[],$scope.data=[],"liquidity"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Current Liquidity Ratio"),$scope.data.push(ratioIdealLiquidityMinArr,ratioIdealLiquidityMaxArr,ratioLiquidityArr)),"totalLiquidity"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Total Liquidity Ratio"),$scope.data.push(ratioIdealTotalLiquidityMinArr,ratioTotalLiquidityArr)),"saving"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Surplus Income Ratio"),$scope.data.push(ratioIdealSavingMinArr,ratioIdealSavingMaxArr,ratioSavingArr)),"basicSaving"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Basic Saving Ratio"),$scope.data.push(ratioIdealBasicSavingMinArr,ratioBasicSavingArr)),"essentialExpenses"===$scope.check.ratio&&($scope.series.push("Max Ideal Ratio","Essential Expenses to Income Ratio"),$scope.data.push(ratioIdealEssentialExpensesMaxArr,ratioEssentialExpensesArr)),"lifestyleExpenses"===$scope.check.ratio&&($scope.series.push("Max Ideal Ratio","Lifestyle Expenses to Income Ratio"),$scope.data.push(ratioIdealLifestyleExpensesMaxArr,ratioLifestyleExpensesArr)),"assetDebt"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Total Debt to Annual Income Ratio"),$scope.data.push(ratioIdealAssetDebtMinArr,ratioIdealAssetDebtMaxArr,ratioAssetDebtArr)),"debtService"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Current Debt to Annual Income Ratio"),$scope.data.push(ratioIdealDebtServiceMinArr,ratioIdealDebtServiceMaxArr,ratioDebtServiceArr)),"houseExpense"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Property Debt to Total Income Ratio"),$scope.data.push(ratioIdealHouseExpenseMinArr,ratioIdealHouseExpenseMaxArr,ratioHouseExpenseArr)),"debtIncome"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Monthly Debt Servicing to Income Ratio"),$scope.data.push(ratioIdealDebtIncomeMinArr,ratioIdealDebtIncomeMaxArr,ratioDebtIncomeArr)),"consumerDebt"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Max Ideal Ratio","Monthly Credit Card Debt to Income Ratio"),$scope.data.push(ratioIdealConsumerDebtMinArr,ratioIdealConsumerDebtMaxArr,ratioConsumerDebtArr)),"netWorthBenchmark"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Net Worth Benchmark"),$scope.data.push(ratioIdealNetWorthBenchmarkMinArr,ratioNetWorthBenchmarkArr)),"solvency"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Solvency Ratio"),$scope.data.push(ratioIdealSolvencyMinArr,ratioSolvencyArr)),"currentAssetDebt"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Current Asset to Debt Ratio"),$scope.data.push(ratioIdealCurrentAssetDebtMinArr,ratioCurrentAssetDebtArr)),"investment"===$scope.check.ratio&&($scope.series.push("Min Ideal Ratio","Investment Assets to Total Assets Ratio"),$scope.data.push(ratioIdealInvestmentMinArr,ratioInvestmentArr)),$scope.labelsOverview=ratioMthArr,$scope.seriesOverview=[],$scope.dataOverview=[],$scope.checkTotal.assets&&($scope.seriesOverview.push("Assets"),$scope.dataOverview.push(aRecordsTotalAmtArr)),$scope.checkTotal.liabilities&&($scope.seriesOverview.push("Liabilities"),$scope.dataOverview.push(lRecordsTotalAmtArr)),$scope.checkTotal.netWorth&&($scope.seriesOverview.push("Net Worth"),$scope.dataOverview.push(netWorthTotalAmtArr)),$scope.checkTotal.monthlyIncome&&($scope.seriesOverview.push("Monthly Income"),$scope.dataOverview.push(ieRecordsIncomeArr)),$scope.checkTotal.monthlyExpense&&($scope.seriesOverview.push("Monthly Expense"),$scope.dataOverview.push(ieRecordsExpenseArr)),$scope.checkTotal.netGrossIncome&&($scope.seriesOverview.push("Net Gross Income"),$scope.dataOverview.push(ieRecordsTotalAmtArr))},retrieveAssetsRecord=function(month,year){var displayAssetsRecords;if(!$scope.user.assetsRecordsPeriod||$scope.user.assetsRecordsPeriod.minMonth>month&&$scope.user.assetsRecordsPeriod.minYear>=year||$scope.user.assetsRecordsPeriod.minYear>year)displayAssetsRecords=AssetsService.assetsRecords,displayAssetsRecords.year=angular.copy(year),displayAssetsRecords.month=angular.copy(month);else if($scope.user.assetsRecordsPeriod.minMonth===$scope.user.assetsRecordsPeriod.maxMonth&&$scope.user.assetsRecordsPeriod.minYear===$scope.user.assetsRecordsPeriod.maxYear)displayAssetsRecords=angular.copy($scope.user.assetsRecords[0]);else{var targetAssetsYear,targetAssetsMonth,latestAssetsRecord,minimumAssetsYear=$scope.user.assetsRecordsPeriod.minYear,minimumAssetsMonth=$scope.user.assetsRecordsPeriod.minMonth,maximumAssetsYear=$scope.user.assetsRecordsPeriod.maxYear,maximumAssetsMonth=$scope.user.assetsRecordsPeriod.maxMonth,latestAssetsYear=minimumAssetsYear,latestAssetsMonth=minimumAssetsMonth;if(year>maximumAssetsYear||year===maximumAssetsYear&&month>=maximumAssetsMonth){targetAssetsYear=maximumAssetsYear,targetAssetsMonth=maximumAssetsMonth;for(var rA1 in $scope.user.assetsRecords)$scope.user.assetsRecords[rA1].year===targetAssetsYear&&$scope.user.assetsRecords[rA1].month===targetAssetsMonth&&(latestAssetsRecord=angular.copy($scope.user.assetsRecords[rA1]))}else{targetAssetsYear=year,targetAssetsMonth=month;for(var rA2 in $scope.user.assetsRecords)($scope.user.assetsRecords[rA2].year<targetAssetsYear||$scope.user.assetsRecords[rA2].year===targetAssetsYear&&$scope.user.assetsRecords[rA2].month<=targetAssetsMonth)&&($scope.user.assetsRecords[rA2].year===latestAssetsYear&&$scope.user.assetsRecords[rA2].month>=latestAssetsMonth?(latestAssetsRecord=angular.copy($scope.user.assetsRecords[rA2]),latestAssetsMonth=angular.copy($scope.user.assetsRecords[rA2].month)):$scope.user.assetsRecords[rA2].year>latestAssetsYear&&(latestAssetsRecord=angular.copy($scope.user.assetsRecords[rA2]),latestAssetsMonth=angular.copy($scope.user.assetsRecords[rA2].month),latestAssetsYear=angular.copy($scope.user.assetsRecords[rA2].year)))}displayAssetsRecords=latestAssetsRecord}return displayAssetsRecords},retrieveLiabilitiesRecords=function(month,year){var displayLiabilitiesRecords;if(!$scope.user.liabilitiesRecordsPeriod||$scope.user.liabilitiesRecordsPeriod.minMonth>month&&$scope.user.liabilitiesRecordsPeriod.minYear>=year||$scope.user.liabilitiesRecordsPeriod.minYear>year)displayLiabilitiesRecords=LiabilitiesService.liabilitiesRecords,displayLiabilitiesRecords.year=angular.copy(year),displayLiabilitiesRecords.month=angular.copy(month);else if($scope.user.liabilitiesRecordsPeriod.minMonth===$scope.user.liabilitiesRecordsPeriod.maxMonth&&$scope.user.liabilitiesRecordsPeriod.minYear===$scope.user.liabilitiesRecordsPeriod.maxYear)displayLiabilitiesRecords=angular.copy($scope.user.liabilitiesRecords[0]);else{var targetLiabilitiesYear,targetLiabilitiesMonth,latestLiabilitiesRecord,minimumLiabilitiesYear=$scope.user.liabilitiesRecordsPeriod.minYear,minimumLiabilitiesMonth=$scope.user.liabilitiesRecordsPeriod.minMonth,maximumLiabilitiesYear=$scope.user.liabilitiesRecordsPeriod.maxYear,maximumLiabilitiesMonth=$scope.user.liabilitiesRecordsPeriod.maxMonth,latestLiabilitiesYear=minimumLiabilitiesYear,latestLiabilitiesMonth=minimumLiabilitiesMonth;if(year>maximumLiabilitiesYear||year===maximumLiabilitiesYear&&month>=maximumLiabilitiesMonth){targetLiabilitiesYear=maximumLiabilitiesYear,targetLiabilitiesMonth=maximumLiabilitiesMonth;for(var rL1 in $scope.user.liabilitiesRecords)$scope.user.liabilitiesRecords[rL1].year===targetLiabilitiesYear&&$scope.user.liabilitiesRecords[rL1].month===targetLiabilitiesMonth&&(latestLiabilitiesRecord=angular.copy($scope.user.liabilitiesRecords[rL1]))}else{targetLiabilitiesYear=year,targetLiabilitiesMonth=month;for(var rL2 in $scope.user.liabilitiesRecords)($scope.user.liabilitiesRecords[rL2].year<targetLiabilitiesYear||$scope.user.liabilitiesRecords[rL2].year===targetLiabilitiesYear&&$scope.user.liabilitiesRecords[rL2].month<=targetLiabilitiesMonth)&&($scope.user.liabilitiesRecords[rL2].year===latestLiabilitiesYear&&$scope.user.liabilitiesRecords[rL2].month>=latestLiabilitiesMonth?(latestLiabilitiesRecord=angular.copy($scope.user.liabilitiesRecords[rL2]),latestLiabilitiesMonth=angular.copy($scope.user.liabilitiesRecords[rL2].month)):$scope.user.liabilitiesRecords[rL2].year>latestLiabilitiesYear&&(latestLiabilitiesRecord=angular.copy($scope.user.liabilitiesRecords[rL2]),latestLiabilitiesMonth=angular.copy($scope.user.liabilitiesRecords[rL2].month),latestLiabilitiesYear=angular.copy($scope.user.liabilitiesRecords[rL2].year)))}displayLiabilitiesRecords=latestLiabilitiesRecord}return displayLiabilitiesRecords},retrieveIncomeExpenseRecords=function(month,year){var displayIncomeExpenseRecords;if(!$scope.user.incomeExpenseRecordsPeriod||$scope.user.incomeExpenseRecordsPeriod.minMonth>month&&$scope.user.incomeExpenseRecordsPeriod.minYear>=year||$scope.user.incomeExpenseRecordsPeriod.minYear>year)displayIncomeExpenseRecords=IncomeExpenseService.incomeExpenseRecords,displayIncomeExpenseRecords.year=angular.copy(year),displayIncomeExpenseRecords.month=angular.copy(month);else if($scope.user.incomeExpenseRecordsPeriod.minMonth===$scope.user.incomeExpenseRecordsPeriod.maxMonth&&$scope.user.incomeExpenseRecordsPeriod.minYear===$scope.user.incomeExpenseRecordsPeriod.maxYear)displayIncomeExpenseRecords=angular.copy($scope.user.incomeExpenseRecords[0]);else{var targetIEYear,targetIEMonth,latestIERecord,minimumIEYear=$scope.user.incomeExpenseRecordsPeriod.minYear,minimumIEMonth=$scope.user.incomeExpenseRecordsPeriod.minMonth,maximumIEYear=$scope.user.incomeExpenseRecordsPeriod.maxYear,maximumIEMonth=$scope.user.incomeExpenseRecordsPeriod.maxMonth,latestIEYear=minimumIEYear,latestIEMonth=minimumIEMonth;if(year>maximumIEYear||year===maximumIEYear&&month>=maximumIEMonth){targetIEYear=maximumIEYear,targetIEMonth=maximumIEMonth;for(var rIE1 in $scope.user.incomeExpenseRecords)$scope.user.incomeExpenseRecords[rIE1].year===targetIEYear&&$scope.user.incomeExpenseRecords[rIE1].month===targetIEMonth&&(latestIERecord=angular.copy($scope.user.incomeExpenseRecords[rIE1]))}else{targetIEYear=year,targetIEMonth=month;for(var rIE2 in $scope.user.incomeExpenseRecords)($scope.user.incomeExpenseRecords[rIE2].year<targetIEYear||$scope.user.incomeExpenseRecords[rIE2].year===targetIEYear&&$scope.user.incomeExpenseRecords[rIE2].month<=targetIEMonth)&&($scope.user.incomeExpenseRecords[rIE2].year===latestIEYear&&$scope.user.incomeExpenseRecords[rIE2].month>=latestIEMonth?(latestIERecord=angular.copy($scope.user.incomeExpenseRecords[rIE2]),latestIEMonth=angular.copy($scope.user.incomeExpenseRecords[rIE2].month)):$scope.user.incomeExpenseRecords[rIE2].year>latestIEYear&&(latestIERecord=angular.copy($scope.user.incomeExpenseRecords[rIE2]),latestIEMonth=angular.copy($scope.user.incomeExpenseRecords[rIE2].month),latestIEYear=angular.copy($scope.user.incomeExpenseRecords[rIE2].year)))}displayIncomeExpenseRecords=latestIERecord}return displayIncomeExpenseRecords},calculateRatios=function(){var numHealthyRatio=0,numUnHealthyRatio=0;$scope.homeHealthyRatioArr=[],$scope.homeUnHealthyRatioArr=[];var ratioEssentialExpenses,publicTransportValue,ratioLiquidity=angular.copy($scope.displayAssetsRecords.cashEquivalentsAmt)/angular.copy($scope.displayIncomeExpenseRecords.monthlyExpenseAmt),ratioTotalLiquidity=(Number($scope.displayAssetsRecords.cashEquivalentsAmt)+Number($scope.displayAssetsRecords.investedAssetsAmt))/$scope.displayIncomeExpenseRecords.monthlyExpenseAmt,ratioSaving=$scope.displayIncomeExpenseRecords.netCashFlow/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt,ratioBasicSaving=$scope.displayIncomeExpenseRecords.optionalSavingsAmt/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt;try{publicTransportValue=$scope.displayIncomeExpenseRecords.monthlyExpense.transport.publicTransport.value}catch(e){publicTransportValue=0}var maidValue;try{maidValue=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense.maid.value}catch(e){maidValue=0}ratioEssentialExpenses=(Number($scope.displayIncomeExpenseRecords.fixedExpenseAmt)+Number(publicTransportValue)+Number($scope.displayIncomeExpenseRecords.utilityHouseholdAmt)+Number($scope.displayIncomeExpenseRecords.foodNecessitiesAmt)-Number(maidValue))/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt;var ratioLifestyleExpenses;ratioLifestyleExpenses=(Number(maidValue)+Number($scope.displayIncomeExpenseRecords.transportAmt)-Number(publicTransportValue)+Number($scope.displayIncomeExpenseRecords.miscAmt))/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt;var ratioDebtIncome,mortgageRepaymentsValue,rentalRepaymentsValue,carLoanRepaymentValue,otherLoanRepaymentsValue,ratioAssetDebt=$scope.displayLiabilitiesRecords.totalAmt/$scope.displayAssetsRecords.totalAmt,ratioDebtService=$scope.displayLiabilitiesRecords.totalAmt/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt,ratioHouseExpense=($scope.displayIncomeExpenseRecords.monthlyExpenseAmt-$scope.displayIncomeExpenseRecords.fixedExpenseAmt)/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt;try{mortgageRepaymentsValue=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense.mortgageRepayments.value}catch(e){mortgageRepaymentsValue=0}try{rentalRepaymentsValue=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense.rentalRepaymentsValue.value}catch(e){rentalRepaymentsValue=0}try{carLoanRepaymentValue=$scope.displayIncomeExpenseRecords.monthlyExpense.transport.carLoanRepayment.value}catch(e){carLoanRepaymentValue=0}try{otherLoanRepaymentsValue=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense.otherLoanRepayments.value}catch(e){otherLoanRepaymentsValue=0}ratioDebtIncome=(Number(mortgageRepaymentsValue)+Number(rentalRepaymentsValue)+Number(carLoanRepaymentValue)+Number(otherLoanRepaymentsValue))/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt;var ratioInvestment,privatePropertiesValue,ratioConsumerDebt=$scope.displayLiabilitiesRecords.shortTermCreditAmt/$scope.displayIncomeExpenseRecords.monthlyIncomeAmt,netWorthBenchmark=Number($scope.user.age)*Number($scope.displayIncomeExpenseRecords.monthlyIncomeAmt)/10,ratioNetWorthBenchmark=(Number($scope.displayAssetsRecords.totalAmt)-Number($scope.displayLiabilitiesRecords.totalAmt))/netWorthBenchmark,ratioSolvency=($scope.displayAssetsRecords.totalAmt-$scope.displayLiabilitiesRecords.totalAmt)/$scope.displayAssetsRecords.totalAmt,ratioCurrentAssetDebt=$scope.displayAssetsRecords.cashEquivalentsAmt/$scope.displayLiabilitiesRecords.shortTermCreditAmt;try{privatePropertiesValue=$scope.displayAssetsRecords.investedAssets.privateProperties.value}catch(e){privatePropertiesValue=0}ratioInvestment=(Number($scope.displayAssetsRecords.cashEquivalentsAmt)+Number($scope.displayAssetsRecords.investedAssetsAmt)-Number(privatePropertiesValue))/$scope.displayAssetsRecords.totalAmt,isFinite(ratioLiquidity)?$scope.displayOverview.ratioLiquidity=ratioLiquidity.toFixed(2):$scope.displayOverview.ratioLiquidity="N/A",isFinite(ratioTotalLiquidity)?$scope.displayOverview.ratioTotalLiquidity=ratioTotalLiquidity.toFixed(2):$scope.displayOverview.ratioTotalLiquidity="N/A",isFinite(ratioSaving)?$scope.displayOverview.ratioSaving=ratioSaving.toFixed(2):$scope.displayOverview.ratioSaving="N/A",isFinite(ratioBasicSaving)?$scope.displayOverview.ratioBasicSaving=ratioBasicSaving.toFixed(2):$scope.displayOverview.ratioBasicSaving="N/A",isFinite(ratioEssentialExpenses)?$scope.displayOverview.ratioEssentialExpenses=ratioEssentialExpenses.toFixed(2):$scope.displayOverview.ratioEssentialExpenses="N/A",isFinite(ratioLifestyleExpenses)?$scope.displayOverview.ratioLifestyleExpenses=ratioLifestyleExpenses.toFixed(2):$scope.displayOverview.ratioLifestyleExpenses="N/A",isFinite(ratioAssetDebt)?$scope.displayOverview.ratioAssetDebt=ratioAssetDebt.toFixed(2):$scope.displayOverview.ratioAssetDebt="N/A",isFinite(ratioDebtService)?$scope.displayOverview.ratioDebtService=ratioDebtService.toFixed(2):$scope.displayOverview.ratioDebtService="N/A",isFinite(ratioHouseExpense)?$scope.displayOverview.ratioHouseExpense=ratioHouseExpense.toFixed(2):$scope.displayOverview.ratioHouseExpense="N/A",isFinite(ratioDebtIncome)?$scope.displayOverview.ratioDebtIncome=ratioDebtIncome.toFixed(2):$scope.displayOverview.ratioDebtIncome="N/A",isFinite(ratioConsumerDebt)?$scope.displayOverview.ratioConsumerDebt=ratioConsumerDebt.toFixed(2):$scope.displayOverview.ratioConsumerDebt="N/A",isFinite(ratioNetWorthBenchmark)?$scope.displayOverview.ratioNetWorthBenchmark=ratioNetWorthBenchmark.toFixed(2):$scope.displayOverview.ratioNetWorthBenchmark="N/A",isFinite(ratioSolvency)?$scope.displayOverview.ratioSolvency=ratioSolvency.toFixed(2):$scope.displayOverview.ratioSolvency="N/A",isFinite(ratioCurrentAssetDebt)?$scope.displayOverview.ratioCurrentAssetDebt=ratioCurrentAssetDebt.toFixed(2):$scope.displayOverview.ratioCurrentAssetDebt="N/A",isFinite(ratioInvestment)?$scope.displayOverview.ratioInvestment=ratioInvestment.toFixed(2):$scope.displayOverview.ratioInvestment="N/A","N/A"!==$scope.displayOverview.ratioLiquidity?$scope.displayOverview.ratioLiquidity<2?($scope.displayAnalysis.liquidity=$scope.analysisRatio.analysisLiquidity.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Current Liquidity Ratio"),$scope.liquidityHealth=2):$scope.displayOverview.ratioLiquidity>=2&&$scope.displayOverview.ratioLiquidity<6?($scope.displayAnalysis.liquidity=$scope.analysisRatio.analysisLiquidity.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Current Liquidity Ratio"),$scope.liquidityHealth=1):$scope.displayOverview.ratioLiquidity>=6&&($scope.displayAnalysis.liquidity=$scope.analysisRatio.analysisLiquidity.healthy[1],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Current Liquidity Ratio"),$scope.liquidityHealth=1):($scope.displayAnalysis.liquidity="Unable to generate ratio due to missing inputs",$scope.liquidityHealth=0),"N/A"!==$scope.displayOverview.ratioTotalLiquidity?$scope.displayOverview.ratioTotalLiquidity<6?($scope.displayAnalysis.totalLiquidity=$scope.analysisRatio.analysisTotalLiquidity.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Total Liquidity Ratio"),$scope.totalLiquidityHealth=2):$scope.displayOverview.ratioTotalLiquidity>=6&&($scope.displayAnalysis.totalLiquidity=$scope.analysisRatio.analysisTotalLiquidity.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Total Liquidity Ratio"),$scope.totalLiquidityHealth=1):($scope.displayAnalysis.totalLiquidity="Unable to generate ratio due to missing inputs",$scope.totalLiquidityHealth=0),"N/A"!==$scope.displayOverview.ratioSaving?$scope.displayOverview.ratioSaving<.12?($scope.displayAnalysis.saving=$scope.analysisRatio.analysisSaving.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Surplus Income Ratio"),$scope.savingHealth=2):$scope.displayOverview.ratioSaving>=.12&&$scope.displayOverview.ratioSaving<=.7?($scope.displayAnalysis.saving=$scope.analysisRatio.analysisSaving.healthy[1],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Surplus Income Ratio"),$scope.savingHealth=1):$scope.displayOverview.ratioSaving>.7&&($scope.displayAnalysis.saving=$scope.analysisRatio.analysisSaving.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Surplus Income Ratio"),$scope.savingHealth=1):($scope.displayAnalysis.saving="Unable to generate ratio due to missing inputs",$scope.savingHealth=0),"N/A"!==$scope.displayOverview.ratioBasicSaving?$scope.displayOverview.ratioBasicSaving<.1?($scope.displayAnalysis.basicSaving=$scope.analysisRatio.analysisBasicSaving.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Basic Saving Ratio"),$scope.basicSavingHealth=2):$scope.displayOverview.ratioBasicSaving>=.1&&($scope.displayAnalysis.basicSaving=$scope.analysisRatio.analysisBasicSaving.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Basic Saving Ratio"),$scope.basicSavingHealth=1):($scope.displayAnalysis.basicSaving="Unable to generate ratio due to missing inputs",$scope.basicSavingHealth=0),"N/A"!==$scope.displayOverview.ratioEssentialExpenses?$scope.displayOverview.ratioEssentialExpenses>=.5?($scope.displayAnalysis.essentialExpenses=$scope.analysisRatio.analysisEssentialExpenses.unhealthy[0],numUnHealthyRatio++,
$scope.homeUnHealthyRatioArr.push("Essential Expenses to Income Ratio"),$scope.essentialExpensesHealth=2):$scope.displayOverview.ratioEssentialExpenses<.5&&($scope.displayAnalysis.essentialExpenses=$scope.analysisRatio.analysisEssentialExpenses.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Essential Expenses to Income Ratio"),$scope.essentialExpensesHealth=1):($scope.displayAnalysis.essentialExpenses="Unable to generate ratio due to missing inputs",$scope.essentialExpensesHealth=0),"N/A"!==$scope.displayOverview.ratioLifestyleExpenses?$scope.displayOverview.ratioLifestyleExpenses>=.3?($scope.displayAnalysis.lifestyleExpenses=$scope.analysisRatio.analysisLifestyleExpenses.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Lifestyle Expenses to Income Ratio"),$scope.lifestyleExpensesHealth=2):$scope.displayOverview.ratioLifestyleExpenses<.3&&($scope.displayAnalysis.lifestyleExpenses=$scope.analysisRatio.analysisLifestyleExpenses.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Lifestyle Expenses to Income Ratio"),$scope.lifestyleExpensesHealth=1):($scope.displayAnalysis.lifestyleExpenses="Unable to generate ratio due to missing inputs",$scope.lifestyleExpensesHealth=0),"N/A"!==$scope.displayOverview.ratioAssetDebt?$scope.displayOverview.ratioAssetDebt<.4?($scope.displayAnalysis.assetDebt=$scope.analysisRatio.analysisAssetDebt.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Total Debt to Annual Income Ratio"),$scope.assetDebtHealth=1):$scope.displayOverview.ratioAssetDebt>=.4&&$scope.displayOverview.ratioAssetDebt<.6?($scope.displayAnalysis.assetDebt=$scope.analysisRatio.analysisAssetDebt.healthy[1],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Total Debt to Annual Income Ratio"),$scope.assetDebtHealth=1):$scope.displayOverview.ratioAssetDebt>=.6&&($scope.displayAnalysis.assetDebt=$scope.analysisRatio.analysisAssetDebt.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Total Debt to Annual Income Ratio"),$scope.assetDebtHealth=2):($scope.displayAnalysis.assetDebt="Unable to generate ratio due to missing inputs",$scope.assetDebtHealth=0),"N/A"!==$scope.displayOverview.ratioDebtService?$scope.displayOverview.ratioDebtService<=.36?($scope.displayAnalysis.debtService=$scope.analysisRatio.analysisDebtService.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Current Debt to Annual Income Ratio"),$scope.debtServiceHealth=1):$scope.displayOverview.ratioDebtService>.36&&($scope.displayAnalysis.debtService=$scope.analysisRatio.analysisDebtService.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Current Debt to Annual Income Ratio"),$scope.debtServiceHealth=2):($scope.displayAnalysis.debtService="Unable to generate ratio due to missing inputs",$scope.debtServiceHealth=0),"N/A"!==$scope.displayOverview.ratioHouseExpense?$scope.displayOverview.ratioHouseExpense<=.35?($scope.displayAnalysis.houseExpense=$scope.analysisRatio.analysisHouseExpense.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Property Debt to Total Income Ratio"),$scope.houseExpenseHealth=1):$scope.displayOverview.ratioHouseExpense>.35&&($scope.displayAnalysis.houseExpense=$scope.analysisRatio.analysisHouseExpense.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Property Debt to Total Income Ratio"),$scope.houseExpenseHealth=2):($scope.displayAnalysis.houseExpense="Unable to generate ratio due to missing inputs",$scope.houseExpenseHealth=0),"N/A"!==$scope.displayOverview.ratioDebtIncome?$scope.displayOverview.ratioDebtIncome<=.4?($scope.displayAnalysis.debtIncome=$scope.analysisRatio.analysisDebtIncome.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Monthly Debt Servicing to Income Ratio"),$scope.debtIncomeHealth=1):$scope.displayOverview.ratioDebtIncome>.4&&($scope.displayAnalysis.debtIncome=$scope.analysisRatio.analysisDebtIncome.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Monthly Debt Servicing to Income Ratio"),$scope.debtIncomeHealth=2):($scope.displayAnalysis.debtIncome="Unable to generate ratio due to missing inputs",$scope.debtIncomeHealth=0),"N/A"!==$scope.displayOverview.ratioConsumerDebt?$scope.displayOverview.ratioConsumerDebt<=.1?($scope.displayAnalysis.consumerDebt=$scope.analysisRatio.analysisConsumerDebt.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Monthly Credit Card Debt to Income Ratio"),$scope.consumerDebtHealth=1):$scope.displayOverview.ratioConsumerDebt>.1&&($scope.displayAnalysis.consumerDebt=$scope.analysisRatio.analysisConsumerDebt.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Monthly Credit Card Debt to Income Ratio"),$scope.consumerDebtHealth=2):($scope.displayAnalysis.consumerDebt="Unable to generate ratio due to missing inputs",$scope.consumerDebtHealth=0),"N/A"!==$scope.displayOverview.ratioNetWorthBenchmark?$scope.displayOverview.ratioNetWorthBenchmark<=.75?($scope.displayAnalysis.netWorthBenchmark=$scope.analysisRatio.analysisNetWorthBenchmark.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Net Worth Benchmark"),$scope.netWorthHealth=2):$scope.displayOverview.ratioNetWorthBenchmark>.75&&$scope.displayOverview.ratioNetWorthBenchmark<=1?($scope.displayAnalysis.netWorthBenchmark=$scope.analysisRatio.analysisNetWorthBenchmark.healthy[1],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Net Worth Benchmark"),$scope.netWorthHealth=1):$scope.displayOverview.ratioNetWorthBenchmark>1&&($scope.displayAnalysis.netWorthBenchmark=$scope.analysisRatio.analysisNetWorthBenchmark.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Net Worth Benchmark"),$scope.netWorthHealth=1):($scope.displayAnalysis.netWorthBenchmark="Unable to generate ratio due to missing inputs",$scope.netWorthHealth=0),"N/A"!==$scope.displayOverview.ratioSolvency?$scope.displayOverview.ratioSolvency<=.2?($scope.displayAnalysis.solvency=$scope.analysisRatio.analysisSolvency.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Solvency Ratio"),$scope.solvencyHealth=2):$scope.displayOverview.ratioSolvency>.2&&($scope.displayAnalysis.solvency=$scope.analysisRatio.analysisSolvency.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Solvency Ratio"),$scope.solvencyHealth=1):($scope.displayAnalysis.solvency="Unable to generate ratio due to missing inputs",$scope.solvencyHealth=0),"N/A"!==$scope.displayOverview.ratioCurrentAssetDebt?$scope.displayOverview.ratioCurrentAssetDebt<=.2?($scope.displayAnalysis.currentAssetDebt=$scope.analysisRatio.analysisCurrentAssetDebt.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Current Asset to Debt Ratio"),$scope.currentAssetDebtHealth=2):$scope.displayOverview.ratioInvestment>.2&&($scope.displayAnalysis.currentAssetDebt=$scope.analysisRatio.analysisCurrentAssetDebt.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Current Asset to Debt Ratio"),$scope.currentAssetDebtHealth=1):($scope.displayAnalysis.currentAssetDebt="Unable to generate ratio due to missing inputs",$scope.currentAssetDebtHealth=0),"N/A"!==$scope.displayOverview.ratioInvestment?$scope.displayOverview.ratioInvestment<=.2?($scope.displayAnalysis.investment=$scope.analysisRatio.analysisInvestment.unhealthy[0],numUnHealthyRatio++,$scope.homeUnHealthyRatioArr.push("Investment Assets to Total Assets Ratio"),$scope.investmentHealth=2):$scope.displayOverview.ratioInvestment>.2&&($scope.displayAnalysis.investment=$scope.analysisRatio.analysisInvestment.healthy[0],numHealthyRatio++,$scope.homeHealthyRatioArr.push("Investment Assets to Total Assets Ratio"),$scope.investmentHealth=1):($scope.displayAnalysis.investment="Unable to generate ratio due to missing inputs",$scope.investmentHealth=0),$scope.homeHealthDisplay=!0,$scope.homeHealth=[{value:100*numHealthyRatio/15,type:"success"},{value:100*numUnHealthyRatio/15,type:"danger"}],0===$scope.homeHealth[0].value&&0===$scope.homeHealth[1].value&&($scope.homeHealth=[{value:100,type:"info"}],$scope.homeHealthDisplay=!1)},calculateRatiosChart=function(aRecords,lRecords,ieRecords,ratioMthNum){aRecords=aRecords,lRecords=lRecords,ieRecords=ieRecords;var ratioEssentialExpensesChart,publicTransportChartValue,ratioLiquidityChart=aRecords.cashEquivalentsAmt/ieRecords.monthlyExpenseAmt,ratioTotalLiquidityChart=(Number(aRecords.cashEquivalentsAmt)+Number(aRecords.investedAssetsAmt))/ieRecords.monthlyExpenseAmt,ratioSavingChart=ieRecords.netCashFlow/ieRecords.monthlyIncomeAmt,ratioBasicSavingChart=ieRecords.optionalSavingsAmt/ieRecords.monthlyIncomeAmt;try{publicTransportChartValue=ieRecords.monthlyExpense.transport.publicTransport.value}catch(e){publicTransportChartValue=0}var maidChartValue;try{maidChartValue=ieRecords.monthlyExpense.fixedExpense.maid.value}catch(e){maidChartValue=0}ratioEssentialExpensesChart=(Number(ieRecords.fixedExpenseAmt)+Number(publicTransportChartValue)+Number(ieRecords.utilityHouseholdAmt)+Number(ieRecords.foodNecessitiesAmt)-Number(maidChartValue))/ieRecords.monthlyIncomeAmt;var ratioLifestyleExpensesChart;ratioLifestyleExpensesChart=(Number(maidChartValue)+Number(ieRecords.transportAmt)-Number(publicTransportChartValue)+Number(ieRecords.miscAmt))/ieRecords.monthlyIncomeAmt;var ratioDebtIncomeChart,mortgageRepaymentsChartValue,rentalRepaymentsChartValue,carLoanRepaymentChartValue,otherLoanRepaymentsChartValue,ratioAssetDebtChart=lRecords.totalAmt/aRecords.totalAmt,ratioDebtServiceChart=lRecords.totalAmt/ieRecords.monthlyIncomeAmt,ratioHouseExpenseChart=(Number(ieRecords.monthlyExpenseAmt)-Number(ieRecords.fixedExpenseAmt))/ieRecords.monthlyIncomeAmt;try{mortgageRepaymentsChartValue=ieRecords.monthlyExpense.fixedExpense.mortgageRepayments.value}catch(e){mortgageRepaymentsChartValue=0}try{rentalRepaymentsChartValue=ieRecords.monthlyExpense.fixedExpense.rentalRepayments.value}catch(e){rentalRepaymentsChartValue=0}try{carLoanRepaymentChartValue=ieRecords.monthlyExpense.transport.carLoanRepayment.value}catch(e){carLoanRepaymentChartValue=0}try{otherLoanRepaymentsChartValue=ieRecords.monthlyExpense.fixedExpense.otherLoanRepayments.value}catch(e){otherLoanRepaymentsChartValue=0}ratioDebtIncomeChart=(Number(mortgageRepaymentsChartValue)+Number(rentalRepaymentsChartValue)+Number(carLoanRepaymentChartValue)+Number(otherLoanRepaymentsChartValue))/ieRecords.monthlyIncomeAmt;var ratioInvestmentChart,privatePropertiesChartValue,ratioConsumerDebtChart=lRecords.shortTermCreditAmt/ieRecords.monthlyIncomeAmt,netWorthBenchmarkChart=$scope.user.age*ieRecords.monthlyIncomeAmt/10,ratioNetWorthBenchmarkChart=(Number(aRecords.totalAmt)-Number(lRecords.totalAmt))/netWorthBenchmarkChart,ratioSolvencyChart=(aRecords.totalAmt-lRecords.totalAmt)/aRecords.totalAmt,ratioCurrentAssetDebtChart=aRecords.cashEquivalentsAmt/lRecords.shortTermCreditAmt;try{privatePropertiesChartValue=aRecords.investedAssets.privateProperties.value}catch(e){privatePropertiesChartValue=0}ratioInvestmentChart=(Number(aRecords.cashEquivalentsAmt)+Number(aRecords.investedAssetsAmt)-Number(privatePropertiesChartValue))/aRecords.totalAmt,isFinite(ratioLiquidityChart)?ratioLiquidityArr[ratioMthNum]=Number(ratioLiquidityChart.toFixed(2)):ratioLiquidityArr[ratioMthNum]=0,ratioIdealLiquidityMinArr[ratioMthNum]=2,ratioIdealLiquidityMaxArr[ratioMthNum]=6,isFinite(ratioTotalLiquidityChart)?ratioTotalLiquidityArr[ratioMthNum]=Number(ratioTotalLiquidityChart.toFixed(2)):ratioTotalLiquidityArr[ratioMthNum]=0,ratioIdealTotalLiquidityMinArr[ratioMthNum]=6,isFinite(ratioSavingChart)?ratioSavingArr[ratioMthNum]=Number(ratioSavingChart.toFixed(2)):ratioSavingArr[ratioMthNum]=0,ratioIdealSavingMinArr[ratioMthNum]=.12,ratioIdealSavingMaxArr[ratioMthNum]=.7,isFinite(ratioBasicSavingChart)?ratioBasicSavingArr[ratioMthNum]=Number(ratioBasicSavingChart.toFixed(2)):ratioBasicSavingArr[ratioMthNum]=0,ratioIdealBasicSavingMinArr[ratioMthNum]=.1,isFinite(ratioEssentialExpensesChart)?ratioEssentialExpensesArr[ratioMthNum]=Number(ratioEssentialExpensesChart.toFixed(2)):ratioEssentialExpensesArr[ratioMthNum]=0,ratioIdealEssentialExpensesMaxArr[ratioMthNum]=.5,isFinite(ratioLifestyleExpensesChart)?ratioLifestyleExpensesArr[ratioMthNum]=Number(ratioLifestyleExpensesChart.toFixed(2)):ratioLifestyleExpensesArr[ratioMthNum]=0,ratioIdealLifestyleExpensesMaxArr[ratioMthNum]=.5,isFinite(ratioAssetDebtChart)?ratioAssetDebtArr[ratioMthNum]=Number(ratioAssetDebtChart.toFixed(2)):ratioAssetDebtArr[ratioMthNum]=0,ratioIdealAssetDebtMinArr[ratioMthNum]=0,ratioIdealAssetDebtMaxArr[ratioMthNum]=.3,isFinite(ratioDebtServiceChart)?ratioDebtServiceArr[ratioMthNum]=Number(ratioDebtServiceChart.toFixed(2)):ratioDebtServiceArr[ratioMthNum]=0,ratioIdealDebtServiceMinArr[ratioMthNum]=0,ratioIdealDebtServiceMaxArr[ratioMthNum]=.36,isFinite(ratioHouseExpenseChart)?ratioHouseExpenseArr[ratioMthNum]=Number(ratioHouseExpenseChart.toFixed(2)):ratioHouseExpenseArr[ratioMthNum]=0,ratioIdealHouseExpenseMinArr[ratioMthNum]=0,ratioIdealHouseExpenseMaxArr[ratioMthNum]=.35,isFinite(ratioDebtIncomeChart)?ratioDebtIncomeArr[ratioMthNum]=Number(ratioDebtIncomeChart.toFixed(2)):ratioDebtIncomeArr[ratioMthNum]=0,ratioIdealDebtIncomeMinArr[ratioMthNum]=0,ratioIdealDebtIncomeMaxArr[ratioMthNum]=.4,isFinite(ratioConsumerDebtChart)?ratioConsumerDebtArr[ratioMthNum]=Number(ratioConsumerDebtChart.toFixed(2)):ratioConsumerDebtArr[ratioMthNum]=0,ratioIdealConsumerDebtMinArr[ratioMthNum]=0,ratioIdealConsumerDebtMaxArr[ratioMthNum]=.1,isFinite(ratioNetWorthBenchmarkChart)?ratioNetWorthBenchmarkArr[ratioMthNum]=Number(ratioNetWorthBenchmarkChart.toFixed(2)):ratioNetWorthBenchmarkArr[ratioMthNum]=0,ratioIdealNetWorthBenchmarkMinArr[ratioMthNum]=.75,isFinite(ratioSolvencyChart)?ratioSolvencyArr[ratioMthNum]=Number(ratioSolvencyChart.toFixed(2)):ratioSolvencyArr[ratioMthNum]=0,ratioIdealSolvencyMinArr[ratioMthNum]=.2,isFinite(ratioCurrentAssetDebtChart)?ratioCurrentAssetDebtArr[ratioMthNum]=Number(ratioCurrentAssetDebtChart.toFixed(2)):ratioCurrentAssetDebtArr[ratioMthNum]=0,ratioIdealCurrentAssetDebtMinArr[ratioMthNum]=.1,isFinite(ratioInvestmentChart)?ratioInvestmentArr[ratioMthNum]=Number(ratioInvestmentChart.toFixed(2)):ratioInvestmentArr[ratioMthNum]=0,ratioIdealInvestmentMinArr[ratioMthNum]=.2};console.log($scope.homeHealth)}]),angular.module("financial").controller("IncomeExpenseController",["$scope","$rootScope","$stateParams","$location","Authentication","IncomeExpenseService","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,IncomeExpenseService,Users,$q){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.oneAtATime=!1,$scope.incomeExpenseChartDisplay=!0,$scope.incomeDoughnutData=[1],$scope.expenseDoughnutLabels=["No Data"],$scope.expenseDoughnutData=[1],$scope.incomeDoughnutLabels=["No Data"];var current=function(){$scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),$scope.monthDisplay=$scope.selectedMonth,console.log($scope.month),console.log($scope.year)};current(),$scope.monthArr=["January","February","March","April","May","June","July","August","September","October","November","December"];var retrieveRecord=function(){$scope.month=$scope.monthArr.indexOf($scope.selectedMonth),$scope.monthDisplay=$scope.selectedMonth,$scope.year=$scope.selectedYear,$scope.recordFound=null,($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1),$scope.$watch("user",function(){reloadData()})},reloadData=function(){if(!$scope.user.incomeExpenseRecordsPeriod||$scope.user.incomeExpenseRecordsPeriod.minMonth>$scope.month&&$scope.user.incomeExpenseRecordsPeriod.minYear>=$scope.year||$scope.user.incomeExpenseRecordsPeriod.minYear>$scope.year)$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords),$scope.displayIncomeExpenseRecords.year=angular.copy($scope.year),$scope.displayIncomeExpenseRecords.month=angular.copy($scope.month),$scope.recordFound="No record exists for and prior to selected month/year.";else if($scope.user.incomeExpenseRecordsPeriod.minMonth===$scope.user.incomeExpenseRecordsPeriod.maxMonth&&$scope.user.incomeExpenseRecordsPeriod.minYear===$scope.user.incomeExpenseRecordsPeriod.maxYear)$scope.displayIncomeExpenseRecords=angular.copy($scope.user.incomeExpenseRecords[0]);else{var targetYear,targetMonth,latestRecord,minimumYear=$scope.user.incomeExpenseRecordsPeriod.minYear,minimumMonth=$scope.user.incomeExpenseRecordsPeriod.minMonth,maximumYear=$scope.user.incomeExpenseRecordsPeriod.maxYear,maximumMonth=$scope.user.incomeExpenseRecordsPeriod.maxMonth,latestYear=minimumYear,latestMonth=minimumMonth;if($scope.year>maximumYear||$scope.year===maximumYear&&$scope.month>=maximumMonth){targetYear=maximumYear,targetMonth=maximumMonth;for(var r2 in $scope.user.incomeExpenseRecords)$scope.user.incomeExpenseRecords[r2].year===targetYear&&$scope.user.incomeExpenseRecords[r2].month===targetMonth&&(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r2]))}else{targetYear=$scope.year,targetMonth=$scope.month;for(var r3 in $scope.user.incomeExpenseRecords)($scope.user.incomeExpenseRecords[r3].year<targetYear||$scope.user.incomeExpenseRecords[r3].year===targetYear&&$scope.user.incomeExpenseRecords[r3].month<=targetMonth)&&($scope.user.incomeExpenseRecords[r3].year===latestYear&&$scope.user.incomeExpenseRecords[r3].month>=latestMonth?(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r3]),latestMonth=angular.copy($scope.user.incomeExpenseRecords[r3].month)):$scope.user.incomeExpenseRecords[r3].year>latestYear&&(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r3]),latestMonth=angular.copy($scope.user.incomeExpenseRecords[r3].month),latestYear=angular.copy($scope.user.incomeExpenseRecords[r3].year)))}$scope.displayIncomeExpenseRecords=latestRecord}$scope.displayIncomeExpenseRecords.incomeNormalAmt||$scope.displayIncomeExpenseRecords.otherIncomeAmt||$scope.displayIncomeExpenseRecords.fixedExpenseAmt||$scope.displayIncomeExpenseRecords.transportAmt||$scope.displayIncomeExpenseRecords.utilityHouseholdAmt||$scope.displayIncomeExpenseRecords.foodNecessitiesAmt||$scope.displayIncomeExpenseRecords.miscAmt||$scope.displayIncomeExpenseRecords.optionalSavingsAmt?($scope.incomeDoughnutData=[$scope.displayIncomeExpenseRecords.incomeNormalAmt,$scope.displayIncomeExpenseRecords.otherIncomeAmt],$scope.incomeDoughnutLabels=["Employment Income","Other Income"],$scope.expenseDoughnutData=[$scope.displayIncomeExpenseRecords.fixedExpenseAmt,$scope.displayIncomeExpenseRecords.transportAmt,$scope.displayIncomeExpenseRecords.utilityHouseholdAmt,$scope.displayIncomeExpenseRecords.foodNecessitiesAmt,$scope.displayIncomeExpenseRecords.miscAmt,$scope.displayIncomeExpenseRecords.optionalSavingsAmt],$scope.expenseDoughnutLabels=["Fixed Expense","Transport","Utilities & Household Maintenance","Food & Necessities","Miscellaneous","Optional Savings"],0===parseFloat($scope.displayIncomeExpenseRecords.monthlyIncomeAmt)&&($scope.incomeDoughnutData=[1],$scope.incomeDoughnutLabels=["No Data"]),0===parseFloat($scope.displayIncomeExpenseRecords.monthlyExpenseAmt)&&($scope.expenseDoughnutData=[1],$scope.expenseDoughnutLabels=["No Data"]),console.log($scope.incomeDoughnutData)):($scope.incomeDoughnutData=[1],$scope.incomeDoughnutLabels=["No Data"],$scope.expenseDoughnutData=[1],$scope.expenseDoughnutLabels=["No Data"]),($scope.displayIncomeExpenseRecords.year!==$scope.selectedYear||$scope.monthArr[$scope.displayIncomeExpenseRecords.month]!==$scope.selectedMonth)&&($scope.recordFound="No record exists for selected month/year. Displaying records for "+$scope.monthArr[$scope.displayIncomeExpenseRecords.month]+", "+$scope.displayIncomeExpenseRecords.year)};$scope.updateUserFinances=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.incomeExpenseRecordsPeriod?$scope.user.incomeExpenseRecordsPeriod.minYear===$scope.user.incomeExpenseRecordsPeriod.maxYear&&$scope.user.incomeExpenseRecordsPeriod.minMonth===$scope.user.incomeExpenseRecordsPeriod.maxMonth?$scope.year===$scope.user.incomeExpenseRecordsPeriod.minYear?$scope.month<$scope.user.incomeExpenseRecordsPeriod.minMonth?$scope.user.incomeExpenseRecordsPeriod.minMonth=$scope.month:$scope.month>$scope.user.incomeExpenseRecordsPeriod.maxMonth&&($scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.incomeExpenseRecordsPeriod.minYear?($scope.user.incomeExpenseRecordsPeriod.minYear=$scope.year,$scope.user.incomeExpenseRecordsPeriod.minMonth=$scope.month):$scope.year>$scope.user.incomeExpenseRecordsPeriod.maxYear&&($scope.user.incomeExpenseRecordsPeriod.maxYear=$scope.year,$scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.incomeExpenseRecordsPeriod.minYear||$scope.year===$scope.user.incomeExpenseRecordsPeriod.minYear&&$scope.month<$scope.user.incomeExpenseRecordsPeriod.minMonth?($scope.user.incomeExpenseRecordsPeriod.minYear=$scope.year,$scope.user.incomeExpenseRecordsPeriod.minMonth=$scope.month):($scope.year>$scope.user.incomeExpenseRecordsPeriod.maxYear||$scope.year===$scope.user.incomeExpenseRecordsPeriod.maxYear&&$scope.month>$scope.user.incomeExpenseRecordsPeriod.maxMonth)&&($scope.user.incomeExpenseRecordsPeriod.maxYear=$scope.year,$scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.month):(console.log("Hello??"),$scope.user.incomeExpenseRecordsPeriod={},$scope.user.incomeExpenseRecordsPeriod.minMonth=$scope.month,$scope.user.incomeExpenseRecordsPeriod.minYear=$scope.year,$scope.user.incomeExpenseRecordsPeriod.maxMonth=$scope.month,$scope.user.incomeExpenseRecordsPeriod.maxYear=$scope.year);var errorCheck=0,incomeNormalArr=$scope.displayIncomeExpenseRecords.monthlyIncome.incomeNormal,incomeNormalTotal=0;angular.forEach(incomeNormalArr,function(value,key){incomeNormalTotal+=Number(value.value)});var otherIncomeArr=$scope.displayIncomeExpenseRecords.monthlyIncome.otherIncome,otherIncomeTotal=0;angular.forEach(otherIncomeArr,function(value,key){otherIncomeTotal+=Number(value.value)}),console.log(otherIncomeTotal);var fixedExpenseArr=$scope.displayIncomeExpenseRecords.monthlyExpense.fixedExpense,fixedExpenseTotal=0;angular.forEach(fixedExpenseArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),fixedExpenseTotal+=Number(value.value)});var transportArr=$scope.displayIncomeExpenseRecords.monthlyExpense.transport,transportTotal=0;angular.forEach(transportArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),transportTotal+=Number(value.value)});var utilityHouseholdArr=$scope.displayIncomeExpenseRecords.monthlyExpense.utilityHousehold,utilityHouseholdTotal=0;angular.forEach(utilityHouseholdArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),utilityHouseholdTotal+=Number(value.value)});var foodNecessitiesArr=$scope.displayIncomeExpenseRecords.monthlyExpense.foodNecessities,foodNecessitiesTotal=0;angular.forEach(foodNecessitiesArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),foodNecessitiesTotal+=Number(value.value)});var miscArr=$scope.displayIncomeExpenseRecords.monthlyExpense.misc,miscTotal=0;angular.forEach(miscArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),miscTotal+=Number(value.value)});var optionalSavingsArr=$scope.displayIncomeExpenseRecords.monthlyExpense.optionalSavings,optionalSavingsTotal=0;angular.forEach(optionalSavingsArr,function(value,key){value.value<value.recordsTotal&&(value.value=value.recordsTotal,alert("Minimum Expense for "+value.description+" is: $"+value.value),errorCheck+=1),optionalSavingsTotal+=Number(value.value)});var monthlyIncomeAmt=incomeNormalTotal+otherIncomeTotal,monthlyExpenseAmt=fixedExpenseTotal+transportTotal+utilityHouseholdTotal+foodNecessitiesTotal+miscTotal+optionalSavingsTotal,netCashFlow=monthlyIncomeAmt-monthlyExpenseAmt;if($scope.displayIncomeExpenseRecords.incomeNormalAmt=incomeNormalTotal.toFixed(2),$scope.displayIncomeExpenseRecords.otherIncomeAmt=otherIncomeTotal.toFixed(2),$scope.displayIncomeExpenseRecords.fixedExpenseAmt=fixedExpenseTotal.toFixed(2),$scope.displayIncomeExpenseRecords.transportAmt=transportTotal.toFixed(2),$scope.displayIncomeExpenseRecords.utilityHouseholdAmt=utilityHouseholdTotal.toFixed(2),$scope.displayIncomeExpenseRecords.foodNecessitiesAmt=foodNecessitiesTotal.toFixed(2),$scope.displayIncomeExpenseRecords.miscAmt=miscTotal.toFixed(2),$scope.displayIncomeExpenseRecords.optionalSavingsAmt=optionalSavingsTotal.toFixed(2),$scope.displayIncomeExpenseRecords.monthlyIncomeAmt=monthlyIncomeAmt.toFixed(2),$scope.displayIncomeExpenseRecords.monthlyExpenseAmt=monthlyExpenseAmt.toFixed(2),$scope.displayIncomeExpenseRecords.netCashFlow=netCashFlow.toFixed(2),$scope.user.incomeExpenseRecords){for(var recordExist=!1,num=0;num<$scope.user.incomeExpenseRecords.length;num++)$scope.user.incomeExpenseRecords[num].year===$scope.year&&$scope.user.incomeExpenseRecords[num].month===$scope.month&&($scope.user.incomeExpenseRecords[num]=$scope.displayIncomeExpenseRecords,recordExist=!0);if(console.log(recordExist),console.log($scope.displayIncomeExpenseRecords),console.log($scope.user.incomeExpenseRecords),recordExist===!1){var toInsertArr=angular.copy($scope.displayIncomeExpenseRecords);toInsertArr.year=angular.copy($scope.year),toInsertArr.month=angular.copy($scope.month),$scope.user.incomeExpenseRecords.push(toInsertArr)}}else $scope.user.incomeExpenseRecords=[],$scope.user.incomeExpenseRecords.push($scope.displayIncomeExpenseRecords);if(0===errorCheck){$scope.user.updatedIncomeExpense=!0;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}}else $scope.submitted=!0},$scope.$watch("selectedMonth",function(){retrieveRecord()}),$scope.$watch("selectedYear",function(){retrieveRecord()}),$scope.clearSuccessMessage=function(){($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1)}}]),angular.module("financial").controller("InsurancesController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context};var dt=new Date;$scope.year=dt.getFullYear();var loadPolicies=function(){$scope.displayInsuranceInfo=angular.copy($scope.user.insurancesInfoArr)};loadPolicies(),$scope.viewModal=function(insurance){$scope.insurance=insurance},$scope.addNewPolicy=function(){$scope.insurance.id=$scope.user.insurancesInfoArr.length+1,$scope.insurance.year=$scope.selectedYear,$scope.user.insurancesInfoArr.push($scope.insurance);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.success=!0,loadPolicies()},$scope.editModal=function(insurance){for(var i=0;i<$scope.user.insurancesInfoArr.length;i++)$scope.user.insurancesInfoArr[i].id===insurance.id&&($scope.insurance=$scope.user.insurancesInfoArr[i])},$scope.editPolicy=function(){if($scope.editForm.$dirty){for(var i=0;i<$scope.user.insurancesInfoArr.length;i++)$scope.user.insurancesInfoArr[i].id===$scope.insurance.id&&($scope.user.insurancesInfoArr[i]=$scope.insurance);var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.success=!0,loadPolicies(),$scope.editForm.$setPristine()}else $scope.error="No Changes Detected"},$scope.deleteModal=function(insurance){$scope.insurance=insurance},$scope.deletePolicy=function(){var index=$scope.user.insurancesInfoArr.indexOf($scope.insurance);$scope.user.insurancesInfoArr.splice(index,1);for(var b=0;b<$scope.user.insurancesInfoArr.length;b++){var insuranceRe=$scope.user.insurancesInfoArr[b];insuranceRe.id=$scope.user.insurancesInfoArr.indexOf(insuranceRe)+1}var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.success=!0,loadPolicies()},$scope.cancel=function(){$scope.success=!1,$scope.insurance=null,$scope.error=""}}]),angular.module("financial").controller("LiabilitiesController",["$scope","$rootScope","$stateParams","$location","Authentication","LiabilitiesService","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,LiabilitiesService,Users,$q){$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.oneAtATime=!1;var current=function(){$scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),$scope.monthDisplay=$scope.selectedMonth,console.log($scope.month),console.log($scope.year)};$scope.liabilitiesChartDisplay=!0,$scope.liabilitiesDoughnutData=[1],$scope.liabilitiesDoughnutLabels=["No Data"],current(),$scope.monthArr=["January","February","March","April","May","June","July","August","September","October","November","December"];var retrieveRecord=function(){$scope.month=$scope.monthArr.indexOf($scope.selectedMonth),$scope.monthDisplay=$scope.selectedMonth,$scope.year=$scope.selectedYear,$scope.recordFound=null,($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1),$scope.$watch("user",function(){reloadData()})},reloadData=function(){if(!$scope.user.liabilitiesRecordsPeriod||$scope.user.liabilitiesRecordsPeriod.minMonth>$scope.month&&$scope.user.liabilitiesRecordsPeriod.minYear>=$scope.year||$scope.user.liabilitiesRecordsPeriod.minYear>$scope.year)$scope.displayLiabilitiesRecords=angular.copy(LiabilitiesService.liabilitiesRecords),$scope.displayLiabilitiesRecords.year=angular.copy($scope.year),$scope.displayLiabilitiesRecords.month=angular.copy($scope.month),$scope.recordFound="No record exists for and prior to selected month/year.";else if($scope.user.liabilitiesRecordsPeriod.minMonth===$scope.user.liabilitiesRecordsPeriod.maxMonth&&$scope.user.liabilitiesRecordsPeriod.minYear===$scope.user.liabilitiesRecordsPeriod.maxYear)$scope.displayLiabilitiesRecords=angular.copy($scope.user.liabilitiesRecords[0]);else{var targetYear,targetMonth,latestRecord,minimumYear=$scope.user.liabilitiesRecordsPeriod.minYear,minimumMonth=$scope.user.liabilitiesRecordsPeriod.minMonth,maximumYear=$scope.user.liabilitiesRecordsPeriod.maxYear,maximumMonth=$scope.user.liabilitiesRecordsPeriod.maxMonth,latestYear=minimumYear,latestMonth=minimumMonth;if($scope.year>maximumYear||$scope.year===maximumYear&&$scope.month>=maximumMonth){targetYear=maximumYear,targetMonth=maximumMonth;for(var r2 in $scope.user.liabilitiesRecords)$scope.user.liabilitiesRecords[r2].year===targetYear&&$scope.user.liabilitiesRecords[r2].month===targetMonth&&(latestRecord=angular.copy($scope.user.liabilitiesRecords[r2]))}else{targetYear=$scope.year,targetMonth=$scope.month;for(var r3 in $scope.user.liabilitiesRecords)($scope.user.liabilitiesRecords[r3].year<targetYear||$scope.user.liabilitiesRecords[r3].year===targetYear&&$scope.user.liabilitiesRecords[r3].month<=targetMonth)&&($scope.user.liabilitiesRecords[r3].year===latestYear&&$scope.user.liabilitiesRecords[r3].month>=latestMonth?(latestRecord=angular.copy($scope.user.liabilitiesRecords[r3]),
latestMonth=angular.copy($scope.user.liabilitiesRecords[r3].month)):$scope.user.liabilitiesRecords[r3].year>latestYear&&(latestRecord=angular.copy($scope.user.liabilitiesRecords[r3]),latestMonth=angular.copy($scope.user.liabilitiesRecords[r3].month),latestYear=angular.copy($scope.user.liabilitiesRecords[r3].year)))}$scope.displayLiabilitiesRecords=latestRecord}$scope.displayLiabilitiesRecords.shortTermCreditAmt||$scope.displayLiabilitiesRecords.loansMortgagesAmt||$scope.displayLiabilitiesRecords.otherLiabilitiesAmt?($scope.liabilitiesDoughnutData=[$scope.displayLiabilitiesRecords.shortTermCreditAmt,$scope.displayLiabilitiesRecords.loansMortgagesAmt,$scope.displayLiabilitiesRecords.otherLiabilitiesAmt],$scope.liabilitiesDoughnutLabels=["Short-Term Credit","Loans & Mortgages","Other Liabilities"]):($scope.liabilitiesDoughnutData=[1],$scope.liabilitiesDoughnutLabels=["No Data"]),($scope.displayLiabilitiesRecords.year!==$scope.selectedYear||$scope.monthArr[$scope.displayLiabilitiesRecords.month]!==$scope.selectedMonth)&&($scope.recordFound="No record exists for selected month/year. Displaying records for "+$scope.monthArr[$scope.displayLiabilitiesRecords.month]+", "+$scope.displayLiabilitiesRecords.year)};$scope.updateUserFinances=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.liabilitiesRecordsPeriod?$scope.user.liabilitiesRecordsPeriod.minYear===$scope.user.liabilitiesRecordsPeriod.maxYear&&$scope.user.liabilitiesRecordsPeriod.minMonth===$scope.user.liabilitiesRecordsPeriod.maxMonth?$scope.year===$scope.user.liabilitiesRecordsPeriod.minYear?$scope.month<$scope.user.liabilitiesRecordsPeriod.minMonth?$scope.user.liabilitiesRecordsPeriod.minMonth=$scope.month:$scope.month>$scope.user.liabilitiesRecordsPeriod.maxMonth&&($scope.user.liabilitiesRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.liabilitiesRecordsPeriod.minYear?($scope.user.liabilitiesRecordsPeriod.minYear=$scope.year,$scope.user.liabilitiesRecordsPeriod.minMonth=$scope.month):$scope.year>$scope.user.liabilitiesRecordsPeriod.maxYear&&($scope.user.liabilitiesRecordsPeriod.maxYear=$scope.year,$scope.user.liabilitiesRecordsPeriod.maxMonth=$scope.month):$scope.year<$scope.user.liabilitiesRecordsPeriod.minYear||$scope.year===$scope.user.liabilitiesRecordsPeriod.minYear&&$scope.month<$scope.user.liabilitiesRecordsPeriod.minMonth?($scope.user.liabilitiesRecordsPeriod.minYear=$scope.year,$scope.user.liabilitiesRecordsPeriod.minMonth=$scope.month):($scope.year>$scope.user.liabilitiesRecordsPeriod.maxYear||$scope.year===$scope.user.liabilitiesRecordsPeriod.maxYear&&$scope.month>$scope.user.liabilitiesRecordsPeriod.maxMonth)&&($scope.user.liabilitiesRecordsPeriod.maxYear=$scope.year,$scope.user.liabilitiesRecordsPeriod.maxMonth=$scope.month):($scope.user.liabilitiesRecordsPeriod={},$scope.user.liabilitiesRecordsPeriod.minMonth=$scope.month,$scope.user.liabilitiesRecordsPeriod.minYear=$scope.year,$scope.user.liabilitiesRecordsPeriod.maxMonth=$scope.month,$scope.user.liabilitiesRecordsPeriod.maxYear=$scope.year);var errorCheck=0,shortTermCreditArr=$scope.displayLiabilitiesRecords.shortTermCredit,shortTermCreditTotal=0;angular.forEach(shortTermCreditArr,function(value,key){shortTermCreditTotal+=Number(value.value)});var loansMortgagesArr=$scope.displayLiabilitiesRecords.loansMortgages,loansMortgagesTotal=0;angular.forEach(loansMortgagesArr,function(value,key){value.value<value.minValue&&(value.value=value.minValue,alert("Minimum liability value for "+value.description+" is: $"+value.value),errorCheck++,location.reload()),loansMortgagesTotal+=Number(value.value)});var otherLiabilitiesArr=$scope.displayLiabilitiesRecords.otherLiabilities,otherLiabilitiesTotal=0;angular.forEach(otherLiabilitiesArr,function(value,key){otherLiabilitiesTotal+=Number(value.value)});var liabilitiesTotal=shortTermCreditTotal+loansMortgagesTotal+otherLiabilitiesTotal;if($scope.displayLiabilitiesRecords.shortTermCreditAmt=shortTermCreditTotal.toFixed(2),$scope.displayLiabilitiesRecords.loansMortgagesAmt=loansMortgagesTotal.toFixed(2),$scope.displayLiabilitiesRecords.otherLiabilitiesAmt=otherLiabilitiesTotal.toFixed(2),$scope.displayLiabilitiesRecords.totalAmt=liabilitiesTotal.toFixed(2),$scope.user.liabilitiesRecords){for(var recordExist=!1,num=0;num<$scope.user.liabilitiesRecords.length;num++)$scope.user.liabilitiesRecords[num].year===$scope.year&&$scope.user.liabilitiesRecords[num].month===$scope.month&&($scope.user.liabilitiesRecords[num]=$scope.displayLiabilitiesRecords,recordExist=!0);if(recordExist===!1){var toInsertArr=angular.copy($scope.displayLiabilitiesRecords);toInsertArr.year=angular.copy($scope.year),toInsertArr.month=angular.copy($scope.month),$scope.user.liabilitiesRecords.push(toInsertArr)}}else $scope.user.liabilitiesRecords=[],$scope.user.liabilitiesRecords.push($scope.displayLiabilitiesRecords);$scope.user.updatedLiabilities=!0;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.$watch("selectedMonth",function(){retrieveRecord()}),$scope.$watch("selectedYear",function(){retrieveRecord()}),$scope.clearSuccessMessage=function(){($scope.success||$scope.error)&&($scope.success=!1,$scope.error=!1)}}]),angular.module("financial").factory("AssetsService",["$resource",function($resource){var cashEquivalents={cashOnHand:{description:"Cash on Hand",order:0,value:0},currentAcc:{description:"Current Account",order:1,value:0},savingsAcc:{description:"Savings Account",order:2,value:0},fixedDeposit:{description:"Fixed Deposit",order:3,value:0},others:{description:"Others",order:4,value:0}},personalUseAssets={house:{description:"House (Residing)",order:0,value:0},car:{description:"Car",order:1,value:0},countryClubs:{description:"Country Clubs",order:2,value:0},others:{description:"Others",order:3,value:0}},investedAssets={privateProperties:{description:"Private Properties",order:0,value:0},shares:{description:"Shares",order:1,value:0},unitTrusts:{description:"Unit Trusts",order:2,value:0},corporateBonds:{description:"Corporate Bonds",order:3,value:0},singaoporeSavingsBonds:{description:"Singapore Savings Bonds",order:4,value:0},governmentBonds:{description:"Government Bonds",order:5,value:0},bondFunds:{description:"Bond Funds",order:6,value:0},bondETFs:{description:"Bond ETFs",order:7,value:0},lifeInsurance:{description:"Life Insurance",order:8,value:0},investmentInsurance:{description:"Investment Insurance",order:9,value:0},others:{description:"Others",order:10,value:0}},cpfSavings={ordinaryAcc:{description:"Ordinary Account",order:0,value:0},specialAcc:{description:"Special Account",order:1,value:0},medisaveAcc:{description:"Medisave Account",order:2,value:0},others:{description:"Others",order:3,value:0}},otherAssets={others:{description:"Others",order:0,value:0}},cashEquivalentsAmt=0,personalUseAssetsAmt=0,investedAssetsAmt=0,cpfSavingsAmt=0,otherAssetsAmt=0,totalAmt=0,assetsRecords={cashEquivalents:cashEquivalents,personalUseAssets:personalUseAssets,investedAssets:investedAssets,cpfSavings:cpfSavings,otherAssets:otherAssets,cashEquivalentsAmt:cashEquivalentsAmt,personalUseAssetsAmt:personalUseAssetsAmt,investedAssetsAmt:investedAssetsAmt,cpfSavingsAmt:cpfSavingsAmt,otherAssetsAmt:otherAssetsAmt,totalAmt:totalAmt};return{assetsRecords:assetsRecords}}]),angular.module("financial").factory("BudgetService",["$resource",function($resource){var budgetLimits={fixedExpenseB:0,foodB:0,miscB:0,utilitiesB:0,transportB:0};return{budgetLimits:budgetLimits}}]),angular.module("financial").factory("BudgetService",["$resource",function($resource){var budgetLimits={fixedExpenseB:0,foodB:0,miscB:0,utilitiesB:0,transportB:0};return{budgetLimits:budgetLimits}}]),angular.module("financial").factory("FinancialHealthService",["$resource",function($resource){var tipLiquidity="The calculated result is the number of months you can maintain your current expenses habits using your current assets.</br> This ratio is used for analysing existing emergency funds. It is a prescribed practice to maintain 2-6 months of expenses as your emergency fund.  For example, if you are suddenly presented with an investment opportunity for which you must act fast, you will probably look first to draw on your liquid assets",tipTotalLiquidity="The calculated result is the number of months you can maintain your current expenses habits using your current and invested assets.</br> This ratio measures your abilitiy to pay for your expenses using your current assets in cases of emergencies (e.g when you are suddenly out of job)",tipSaving="The calculated results shows the proportion of your monthly surplus income to your total monthly income.</br> It compares the monthly surplus being generated by an individual against total cash inflows. It will give you valuable insight on how well your finances are being managed. It also represents one&#39;s ability to achieve his/her future goals.",tipBasicSaving="The calculated results shows the proportion of your annual savings to your total annual income.</br> This ratio measures whether you have a healthy saving habit and also if you are saving enough given your current income.",tipEssentialExpenses="The calculated results shows the proportion of money you are spending monthly on essentials to your monthly income.</br> This ratio measures whether you are spending within your means on daily essentials.",tipLifestyleExpenses="The calculated results shows the proportion of money you are spending monthly on lifestyle to your monthly income.</br> This ratio measures whether you are spending within your means on non-essentials.",tipAssetDebt="This ratio compares the assets accumulated by an individual against the existing liabilities</br> and helps in determining what you own vs. what you owe.",tipDebtService="The calculated result is the proportion of short term liabilities to your monthly income.</br> This ratio defines how comfortable one is making his/her EMI (equated monthly installments) payments.",tipHouseExpense="The calculated result is the proportion of monthly expenditure on housing maintainence to your monthly income.</br> One of the best ways to determine how much housing you can afford is by calculating your housing expense ratio",tipDebtIncome="The calculated result is the proportion of monthly debt payments to your monthly income.</br> Lenders look at this ratio when they are trying to decide whether to lend you money or extend credit. A low DTI shows you have a good balance between debt and income. Lenders like this number to be low -- generally you&#39;ll want to keep it below 36, but the lower it is, the greater the chance you will be able to get the loans or credit you seek. Evidence from studies of mortgage loans suggest that borrowers with a higher debt-to-income ratio are more likely to run into trouble making monthly payments.",tipConsumerDebt="The calculated result is the proportion of monthly credit card debts to your monthly income.</br> A high consumer debt ratio could point to excessive use of credit cards.",tipNetWorthBenchmark="This metric is used to compare your actual net worth to a standard.</br> The net worth benchmark assumes that your net worth is a function</br> of your earnings and your years of earnings",tipSolvency="Solvency ratio compares an individual&#39;s net worth against total assets accumulated by him/her.</br> This ratio indicates the ability of an individual to repay all his/her existing debts</br> using existing assets in case of unforeseen events.",tipCurrentAssetDebt="This ratio measures how much liquid assets you have versus your short term debts to give you an overview of whether you are taking too much short term debts, or have too much liquid assets which you can adjust to get a higher return.",tipInvestment="This ratio compares liquid assets being held by an individual against the total assets accumulated.</br> Investments in stocks, mutual funds or other such investments,</br> which can be converted to cash easily, are considered as liquid assets.",tips={tipLiquidity:tipLiquidity,tipTotalLiquidity:tipTotalLiquidity,tipSaving:tipSaving,tipBasicSaving:tipBasicSaving,tipEssentialExpenses:tipEssentialExpenses,tipLifestyleExpenses:tipLifestyleExpenses,tipAssetDebt:tipAssetDebt,tipDebtService:tipDebtService,tipHouseExpense:tipHouseExpense,tipDebtIncome:tipDebtIncome,tipConsumerDebt:tipConsumerDebt,tipNetWorthBenchmark:tipNetWorthBenchmark,tipSolvency:tipSolvency,tipCurrentAssetDebt:tipCurrentAssetDebt,tipInvestment:tipInvestment},analysisLiquidity={healthy:["You have a healthy liquidity ratio. This means that you are able to maintain 3-6 months of your current expenses as your emergency funds. For example, if you are suddenly presented with an investment opportunity where you must act fast, your liquid assets will come in handy.","You have a healthy liquidty ratio. This means that you are able to maintain more than 6 months of your current expenses as your emergency funds. However, this is more than the recommended ratio by experts as the liquid assets you hold on hand will depreciate with inflation if not managed well. Try looking into options to grow your excess liquid assets while maintaining the healthy ratio of 3 - 6"],unhealthy:["You have an unhealthy liquidity ratio. This means that you are not able to maintain a healthy portion of your expenses as your emergency fund"]},analysisTotalLiquidity={healthy:["You have a healthy total liquidty ratio. This means that you are able to maintain more than 6 months of your current expenses as your emergency funds using your current and invested assets."],unhealthy:["You have an unhealthy liquidity ratio. This means that you are not able to maintain a healthy portion of your expenses as your emergency funds using our current and invested assets."]},analysisSaving={healthy:["You have a healthy savings ratio. This means that you have a healthy surplus of money monthly. This shows that you are able to achieve your future goals easily. However, you may have an excessive amount of income surplus. You should look to investing to prevent inflation from depreciating the value of your savings.","You have a healthy savings ratio. This means that you have a healthy surplus of money monthly. This shows that you are able to achieve your future goals easily."],unhealthy:["You have an unhealthy savings ratio. This means that you may have difficulty in achieving future goals with your current monthly savings trend.","You have an unhealthy savings ratio. You are spending more than your monthly income. This means that you will have difficulty in achieving future goals with your current monthly savings trend."]},analysisBasicSaving={healthy:["You have a healthy basic saving ratio. This means that you are saving more than 10% of your income and have a healthy saving habit."],unhealthy:["You have an unhealthy basic saving ratio. This means that you are saving less than 10% of your income. Aim to save more than 10% of your income to cultivate a healthy saving habit."]},analysisEssentialExpenses={healthy:["You have a healthy essential expense to income ratio. This means that you are spending a healthy proportion of your monthly income on essential needs such as your Fixed Expenses, Utilities and Household Maintenance and Food and Necessities."],unhealthy:["You have an unhealthy essential expense to income ratio. This means that you are spending an unhealthly large proportion of your monthly income on essential needs such as your Fixed Expenses, Utilities and Household Maintenance and Food and Necessities."]},analysisLifestyleExpenses={healthy:["You have a healthy lifestyle expense to income ratio. This means that you are spending a healthy proportion of your monthly income on lifestyle expenses such as holiday tours, entertainment, etc."],unhealthy:["You have an unhealthy essential expense to income ratio. This means that you are spending an unhealthly large proportion of your monthly income on lifestyle expenses such as holiday tours, entertainment, etc"]},analysisAssetDebt={healthy:["You have a healthy debt to assets ratio. This means that you have a lesser proportion of loans to be paid as compared to your income. Maintaining a low debt-to-assets ratio shows banks that you have a low financial","You have a almost unhealthy debt to assets ratio. This means that you have lesser proportion of loans to be paid as compared to your income but the difference is small and it poses a risk to your financial health. Banks will view you to be more of financial risky than non-risky."],unhealthy:["You have an unhealthy debt-to-asset ratio. This means that your debts are more than 60% of your assets and hence making you to be in a risky financial situation. Banks in Singapore are no longer allowed to approve you for any more loans. Note: this ratio might be lower if you have recently purchased a house or car and will improve over time if you are financially healthy."]},analysisDebtService={healthy:["You have a healthy debt service ratio. This means that you are able to make your equated monthly installments comfortably."],unhealthy:["You have an unhealthy debt service ratio. This means that paying your equated monthly installments is putting a pressure on your finances."]},analysisHouseExpense={healthy:["You have a healthy housing expense ratio. This means that you are spending a good and reasonable amount on housing expenses in proportion to your income."],unhealthy:["You have an unhealthy housing expense ratio. This means that you are spending too much on housing expenses in proportion to your income."]},analysisDebtIncome={healthy:["You have a healthy debt-to-income ratio. This means that you have a good balance of between your debt and income. Lenders are willling to lend you money as you show a low financial risk behavior."],unhealthy:["You have an unhealthy debt-to-income ratio. This means that the balance between your debt and income is not good. Lenders will often not lend you money as you exhibit high financial risk behaviour. Studies of mortgage loans have shown that borrowers with a higher debt-to-income ratio are more likely to run into trouble making monthly payments."]},analysisConsumerDebt={healthy:["You have a healthy consumer debt ratio. This means that you are borrowing wisely."],unhealthy:["You have an unhealthy consumer debt ratio. This means that you are borrowing unnecessarily and may have a serious debt problem. Only 5% of the population ows such high percentage of consumer debt. Seek help from a debt counsellor if you need to. In the meantime, stop using credit for your expenses."]},analysisNetWorthBenchmark={healthy:["Your networth is higher than your age&#39;s Networth Benchmark.","You are less than 15% away from your age&#39;s Networth Benchmark."],unhealthy:["You are below the networth benchmark for your age."]},analysisSolvency={healthy:["You have a healthy solvency ratio. This means that you will be able to repay your existing debts using existing assets in an event of emergency base on your networth."],unhealthy:["You have an unhealthy solvency ratio. This means that you will have difficulty in repaying your existing debts using existing assets in an event of emergency base on your networth."]},analysisCurrentAssetDebt={healthy:["You have a healthy current asset to debt ratio. This means that you have more short term assets than short term debts."],unhealthy:["You have an unhealthy current asset to debt ratio. This means that you have more short term debts than short term assets."]},analysisInvestment={healthy:["You have a healthy investment ratio. This means you have a healthy portion of liquid assets as compared to your total assets which can be converted to cash easily for times of need."],unhealthy:["You have an unhealthy investment ratio. This means that you hold a too small portion of liquid assets in proportion to your total assets. This means that you have lesser amounts of liquid assets that can be converted into cash easily for times of need."]},analysisRatio={analysisLiquidity:analysisLiquidity,analysisTotalLiquidity:analysisTotalLiquidity,analysisSaving:analysisSaving,analysisBasicSaving:analysisBasicSaving,analysisEssentialExpenses:analysisEssentialExpenses,analysisLifestyleExpenses:analysisLifestyleExpenses,analysisAssetDebt:analysisAssetDebt,analysisDebtService:analysisDebtService,analysisHouseExpense:analysisHouseExpense,analysisDebtIncome:analysisDebtIncome,analysisConsumerDebt:analysisConsumerDebt,analysisNetWorthBenchmark:analysisNetWorthBenchmark,analysisSolvency:analysisSolvency,analysisCurrentAssetDebt:analysisCurrentAssetDebt,analysisInvestment:analysisInvestment};return{tips:tips,analysisRatio:analysisRatio}}]),angular.module("financial").factory("IncomeExpenseService",["$resource",function($resource){var incomeNormal={employmentIncome:{description:"Employment Income",order:0,value:0},tbpvIncome:{description:"Trade, Business, Profession or Vocation",order:1,value:0}},otherIncome={dividends:{description:"Dividends",order:0,value:0},interest:{description:"Interest",order:1,value:0},rentFromProperty:{description:"Rent from Property",order:2,value:0},royaltyChargeEstate:{description:"Royalty, Charge, Estate/Trust Income",order:3,value:0},gainsProfitsIncome:{description:"Gains or Profits of an Income Nature",order:4,value:0},others:{description:"Others",order:5,value:0}},fixedExpense={mortgageRepayments:{description:"Mortgage Repayments",order:1,value:0,recordsTotal:0,records:[]},rentalRepayments:{description:"Rental Repayments",order:2,value:0,recordsTotal:0,records:[]},otherLoanRepayments:{description:"Other Loan Repayments",order:3,value:0,recordsTotal:0,records:[]},conservancyPropertyTaxes:{description:"Conservancy and Property Taxes",order:4,value:0,recordsTotal:0,records:[]},insurances:{description:"Insurances",order:5,value:0,recordsTotal:0,records:[]},childrenEducation:{description:"Children's Educations",order:6,value:0,recordsTotal:0,records:[]},allowances:{description:"Allowances for Parents & Children",order:7,value:0,recordsTotal:0,records:[]},maid:{description:"Maid",order:8,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:9,value:0,recordsTotal:0,records:[]}},transport={carLoanRepayment:{description:"Car Loan Repayments",order:0,value:0,recordsTotal:0,records:[]},motorInsurances:{description:"Motor Insurances",order:1,value:0,recordsTotal:0,records:[]},roadTax:{description:"Road Tax",order:2,value:0,recordsTotal:0,records:[]},carparkFees:{description:"Carpark Fees",order:3,value:0,recordsTotal:0,records:[]},petrolMaintenanceExpense:{description:"Petrol & Maintenance Expenses",order:4,value:0,recordsTotal:0,records:[]},publicTransport:{description:"Public Transport",order:5,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:6,value:0,recordsTotal:0,records:[]}},utilityHousehold={utilityBill:{description:"Utilities Bill",order:0,value:0,recordsTotal:0,records:[]},homeTelephone:{description:"Home Telephone",order:1,value:0,recordsTotal:0,records:[]},mobilePhone:{description:"Mobile Phone",order:2,value:0,recordsTotal:0,records:[]},cableTVInternet:{description:"Cable TV & Internet",order:3,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:4,value:0,recordsTotal:0,records:[]}},foodNecessities={groceries:{description:"Groceries",order:0,value:0,recordsTotal:0,records:[]},eatingOut:{description:"Eating Out",order:1,value:0,recordsTotal:0,records:[]},clothings:{description:"Clothings",order:2,value:0,recordsTotal:0,records:[]},personalGrooming:{description:"Personal Grooming",order:3,value:0,recordsTotal:0,records:[]},healthMedical:{description:"Health & Medical",order:4,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:5,value:0,recordsTotal:0,records:[]}},misc={tourFamilyOutings:{description:"Tour & Family Outings",order:0,value:0,recordsTotal:0,records:[]},entertainment:{description:"Entertainment",order:1,value:0,recordsTotal:0,records:[]},hobbiesSports:{description:"Hobbies & Sports",order:2,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:3,value:0,recordsTotal:0,records:[]}},optionalSavings={savings:{description:"Money set aside monthly for savings",order:0,value:0,recordsTotal:0,records:[]},others:{description:"Others",order:1,value:0,recordsTotal:0,records:[]}},monthlyIncome={incomeNormal:incomeNormal,otherIncome:otherIncome},monthlyExpense={fixedExpense:fixedExpense,transport:transport,utilityHousehold:utilityHousehold,foodNecessities:foodNecessities,misc:misc,optionalSavings:optionalSavings},incomeNormalAmt=0,otherIncomeAmt=0,fixedExpenseAmt=0,transportAmt=0,utilityHouseholdAmt=0,foodNecessitiesAmt=0,miscAmt=0,optionalSavingsAmt=0,monthlyIncomeAmt=0,monthlyExpenseAmt=0,netCashFlow=0,incomeExpenseRecords={monthlyIncome:monthlyIncome,monthlyExpense:monthlyExpense,incomeNormalAmt:incomeNormalAmt,otherIncomeAmt:otherIncomeAmt,fixedExpenseAmt:fixedExpenseAmt,transportAmt:transportAmt,utilityHouseholdAmt:utilityHouseholdAmt,foodNecessitiesAmt:foodNecessitiesAmt,miscAmt:miscAmt,optionalSavingsAmt:optionalSavingsAmt,monthlyIncomeAmt:monthlyIncomeAmt,monthlyExpenseAmt:monthlyExpenseAmt,netCashFlow:netCashFlow};return{incomeExpenseRecords:incomeExpenseRecords}}]),angular.module("financial").factory("LiabilitiesService",["$resource",function($resource){var shortTermCredit={creditCard1:{description:"Credit Card 1 Balance",order:0,value:0},creditCard2:{description:"Credit Card 2 Balance",order:1,value:0},creditCard3:{description:"Credit Card 3 Balance",order:2,value:0},overdraftBalance:{description:"Overdraft Balance",order:3,value:0},others:{description:"Others",order:4,value:0}},loansMortgages={mortgageBalance:{description:"Mortgage Loan",order:0,value:0,minValue:0},carBalance:{description:"Car Loan",order:1,value:0,minValue:0},studentLoan:{description:"Student Loan",order:2,value:0,minValue:0},personalLoan:{description:"Personal Loan",order:3,value:0,minValue:0},shareMarginFinancingLoan:{description:"Share Margin Financing Loan",order:4,value:0,minValue:0},others:{description:"Others",order:5,value:0,minValue:0}},otherLiabilities={others:{description:"Others",order:0,value:0}},shortTermCreditAmt=0,loansMortgagesAmt=0,otherLiabilitiesAmt=0,totalAmt=0,liabilitiesRecords={shortTermCredit:shortTermCredit,loansMortgages:loansMortgages,otherLiabilities:otherLiabilities,shortTermCreditAmt:shortTermCreditAmt,loansMortgagesAmt:loansMortgagesAmt,otherLiabilitiesAmt:otherLiabilitiesAmt,totalAmt:totalAmt};return{liabilitiesRecords:liabilitiesRecords}}]),angular.module("financialEducation").controller("financialEducationController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q){$scope.user=Authentication.user,$scope.user||$location.path("/")}]),angular.module("financial").controller("LoanCalculatorController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q){$scope.user=Authentication.user,$scope.monthlyRepaymentSum=0,$scope.totalCostLoan=0,$scope.results=0,$scope.principalAmtToBorrow=0,$scope.interestPaid=0;var year=0,month=0,yearMth=0,interestRate3PerMth=0,repaymentOverInterest=0,cal1=0,cal2=0;$scope.timeToRepay="0 years 0 months";var convertLoanTermToMonths=function(){return 12*$scope.calculator.loanTermYears},calculateResult=function(){$scope.results=$scope.totalCostLoan-$scope.calculator.amtBorrowed},calculateTotalLoan=function(){$scope.totalCostLoan=$scope.monthlyRepaymentSum*$scope.loanTermMonths+$scope.calculator.fees,calculateResult()};$scope.calculateMonthyRepaymentSum=function(){$scope.loanTermMonths=convertLoanTermToMonths(),$scope.monthlyRepaymentSum=$scope.calculator.amtBorrowed/((1-1/Math.pow(1+$scope.calculator.interestRate/100/12,$scope.loanTermMonths))/($scope.calculator.interestRate/100/12)),calculateTotalLoan()};var convertLoanTermToMonths2=function(){return 12*$scope.calculator.loanTermYears2},calculateInterestPaid=function(){$scope.interestPaid=$scope.calculator.affordableRepayment*$scope.loanTermMonths2-$scope.principalAmtToBorrow};$scope.calculatePrincipalAmtToBorrow=function(){$scope.loanTermMonths2=convertLoanTermToMonths2(),$scope.principalAmtToBorrow=$scope.calculator.affordableRepayment/($scope.calculator.interestRate2/100/12)*(1-1/Math.pow(1+$scope.calculator.interestRate2/100/12,$scope.loanTermMonths2)),calculateInterestPaid()};var convertToYrsMths=function(){$scope.timeToRepayVal>12?(yearMth=$scope.timeToRepayVal/12,year=Math.floor(yearMth),month=Math.ceil(yearMth%1),$scope.timeToRepay=year+" years "+month+" months"):(month=Math.ceil($scope.timeToRepayVal),$scope.timeToRepay=month+" months")};$scope.calculateTimeToRepay=function(){interestRate3PerMth=angular.copy((($scope.calculator.interestRate3/100).toFixed(4)/12).toFixed(4)),repaymentOverInterest=angular.copy(($scope.calculator.monthlyRepayment/interestRate3PerMth).toFixed(4)),cal1=Math.log(repaymentOverInterest/(repaymentOverInterest-$scope.calculator.amtOwing)).toFixed(4),cal2=Math.log(1+Number(interestRate3PerMth)).toFixed(4),$scope.timeToRepayVal=cal1/cal2,convertToYrsMths()}}]),angular.module("financialtools").controller("LoanCalculatorController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q){$scope.user=Authentication.user,$scope.monthlyRepaymentSum=0,$scope.totalCostLoan=0,$scope.results=0,$scope.principalAmtToBorrow=0,$scope.interestPaid=0,$scope.formSubmit=!1;var year=0,month=0,yearMth=0,interestAmt=0,interestRatePerMth=0,repaymentOverInterest=0,cal1=0,cal2=0;$scope.timeToRepay="0 years 0 months",$scope.isFormOpened=!1,$scope.showChart=!1,$scope.barData=[],$scope.barOptions={},$scope.monthlyRepaymentSum2=0,$scope.totalCostLoan2=0,$scope.results2=0,$scope.principalAmtToBorrow2=0,$scope.interestPaid2=0;var year2=0,month2=0,yearMth2=0,interestAmt2=0,interestRatePerMth2=0,repaymentOverInterest2=0,cal12=0,cal22=0;$scope.timeToRepay2="0 years 0 months";var convertLoanTermToMonths=function(){return 12*$scope.calculator.loanTermYears},calculateResult=function(){$scope.results=$scope.totalCostLoan-$scope.calculator.amtBorrowed,$scope.showChart=!0,$scope.barData.length>0?($scope.barData[0].val_0=$scope.calculator.amtBorrowed,$scope.barData[0].val_1=$scope.results):($scope.barData.push({x:1,val_0:$scope.calculator.amtBorrowed,val_1:$scope.results}),$scope.barOptions={axes:{x:{key:"x",type:"linear",labelFunction:function(){return""},ticks:$scope.barData.length+1},y:{type:"linear"}},stacks:[{axis:"y",series:["1","2"]}],lineMode:"cardinal",series:[{id:"1",y:"val_0",label:"Principal",type:"column",color:"#1f77b4"},{id:"2",y:"val_1",label:"Interest (including fees)",type:"column",color:"#d62728"}],tooltip:{mode:"scrubber",formatter:function(x,y,series){return series.label+" : $"+y.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")}},columnsHGap:20})},calculateTotalLoan=function(){$scope.totalCostLoan=$scope.monthlyRepaymentSum*$scope.loanTermMonths+$scope.calculator.fees,calculateResult()};$scope.calculateMonthyRepaymentSum=function(){$scope.loanTermMonths=convertLoanTermToMonths(),$scope.monthlyRepaymentSum=$scope.calculator.amtBorrowed/((1-1/Math.pow(1+$scope.calculator.interestRate/100/12,$scope.loanTermMonths))/($scope.calculator.interestRate/100/12)),calculateTotalLoan(),$scope.formSubmit=!0};var calculateInterestPaid=function(){$scope.interestPaid=$scope.calculator.affordableRepayment*$scope.loanTermMonths-$scope.principalAmtToBorrow,$scope.showChart=!0,$scope.barData.length>0?($scope.barData[0].val_0=$scope.principalAmtToBorrow,$scope.barData[0].val_1=$scope.interestPaid):($scope.barData.push({x:1,val_0:$scope.principalAmtToBorrow,val_1:$scope.interestPaid
}),$scope.barOptions={axes:{x:{key:"x",type:"linear",labelFunction:function(){return""},ticks:$scope.barData.length+1},y:{type:"linear"}},stacks:[{axis:"y",series:["1","2"]}],lineMode:"cardinal",series:[{id:"1",y:"val_0",label:"Principal",type:"column",color:"#1f77b4"},{id:"2",y:"val_1",label:"Interest",type:"column",color:"#d62728"}],tooltip:{mode:"scrubber",formatter:function(x,y,series){return series.label+" : $"+y.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")}},columnsHGap:20})};$scope.calculatePrincipalAmtToBorrow=function(){$scope.loanTermMonths=convertLoanTermToMonths(),$scope.principalAmtToBorrow=$scope.calculator.affordableRepayment/($scope.calculator.interestRate/100/12)*(1-1/Math.pow(1+$scope.calculator.interestRate/100/12,$scope.loanTermMonths)),calculateInterestPaid(),$scope.formSubmit=!0};var convertToYrsMths=function(){$scope.timeToRepayVal>12?(yearMth=$scope.timeToRepayVal,year=Math.floor(yearMth/12),month=Math.ceil(yearMth%12),$scope.timeToRepay=year+" years "+month+" months",interestAmt=$scope.calculator.monthlyRepayment*yearMth-$scope.calculator.amtOwing):(month=Math.ceil($scope.timeToRepayVal),$scope.timeToRepay=month+" months",interestAmt=$scope.calculator.monthlyRepayment*month-$scope.calculator.amtOwing),$scope.showChart=!0,$scope.barData.length>0?($scope.barData[0].val_0=$scope.calculator.amtOwing,$scope.barData[0].val_1=interestAmt):($scope.barData.push({x:1,val_0:$scope.calculator.amtOwing,val_1:interestAmt}),$scope.barOptions={axes:{x:{key:"x",type:"linear",labelFunction:function(value){var labelStr="";return 1===value?labelStr=$scope.timeToRepay:2===value&&2===$scope.barData.length&&(labelStr=$scope.timeToRepay2),labelStr},ticks:$scope.barData.length+1},y:{type:"linear"}},stacks:[{axis:"y",series:["1","2"]}],lineMode:"cardinal",series:[{id:"1",y:"val_0",label:"Principal",type:"column",color:"#1f77b4"},{id:"2",y:"val_1",label:"Interest",type:"column",color:"#d62728"}],tooltip:{mode:"scrubber",formatter:function(x,y,series){return series.label+" : $"+y.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g,"$1,")}},columnsHGap:20})};$scope.calculateTimeToRepay=function(){interestRatePerMth=($scope.calculator.interestRate/100/12).toFixed(6),repaymentOverInterest=($scope.calculator.monthlyRepayment/interestRatePerMth).toFixed(6),cal1=Math.log(repaymentOverInterest/(repaymentOverInterest-$scope.calculator.amtOwing)).toFixed(6),cal2=Math.log(1+Number(interestRatePerMth)).toFixed(6),$scope.timeToRepayVal=cal1/cal2,convertToYrsMths(),$scope.formSubmit=!0},$scope.showCompareForm=function(){$scope.isFormOpened===!1?$scope.isFormOpened=!0:$scope.isFormOpened=!1};var calculateResult2=function(){$scope.results2=$scope.totalCostLoan2-$scope.calculator2.amtBorrowed2,2===$scope.barData.length?($scope.barData[1].val_0=$scope.calculator2.amtBorrowed2,$scope.barData[1].val_1=$scope.results2):($scope.barData.push({x:2,val_0:$scope.calculator2.amtBorrowed2,val_1:$scope.results2}),$scope.barOptions.axes.x.ticks=$scope.barData.length+1)},calculateTotalLoan2=function(){$scope.totalCostLoan2=$scope.monthlyRepaymentSum2*$scope.loanTermMonthsCal2+$scope.calculator2.fees2,calculateResult2()},convertLoanTermToMonthsCal2=function(){return 12*$scope.calculator2.loanTermYears2};$scope.calculateMonthyRepaymentSum2=function(){$scope.loanTermMonthsCal2=convertLoanTermToMonthsCal2(),$scope.monthlyRepaymentSum2=$scope.calculator2.amtBorrowed2/((1-1/Math.pow(1+$scope.calculator2.interestRate2/100/12,$scope.loanTermMonthsCal2))/($scope.calculator2.interestRate2/100/12)),calculateTotalLoan2()};var calculateInterestPaid2=function(){$scope.interestPaid2=$scope.calculator2.affordableRepayment2*$scope.loanTermMonthsCal2-$scope.principalAmtToBorrow2,2===$scope.barData.length?($scope.barData[1].val_0=$scope.principalAmtToBorrow2,$scope.barData[1].val_1=$scope.interestPaid2):($scope.barData.push({x:2,val_0:$scope.principalAmtToBorrow2,val_1:$scope.interestPaid2}),$scope.barOptions.axes.x.ticks=$scope.barData.length+1)};$scope.calculatePrincipalAmtToBorrow2=function(){$scope.loanTermMonthsCal2=convertLoanTermToMonthsCal2(),$scope.principalAmtToBorrow2=$scope.calculator2.affordableRepayment2/($scope.calculator2.interestRate2/100/12)*(1-1/Math.pow(1+$scope.calculator2.interestRate2/100/12,$scope.loanTermMonthsCal2)),calculateInterestPaid2()};var convertToYrsMths2=function(){$scope.timeToRepayVal2>12?(yearMth2=$scope.timeToRepayVal2,year2=Math.floor(yearMth2/12),month2=Math.ceil(yearMth2%12),$scope.timeToRepay2=year2+" years "+month2+" months",interestAmt2=$scope.calculator2.monthlyRepayment2*yearMth2-$scope.calculator2.amtOwing2):(month2=Math.ceil($scope.timeToRepayVal2),$scope.timeToRepay2=month2+" months",interestAmt2=$scope.calculator2.monthlyRepayment2*month2-$scope.calculator2.amtOwing2),2===$scope.barData.length?($scope.barData[1].val_0=$scope.calculator2.amtOwing2,$scope.barData[1].val_1=interestAmt2):($scope.barData.push({x:2,val_0:$scope.calculator2.amtOwing2,val_1:interestAmt2}),$scope.barOptions.axes.x.ticks=$scope.barData.length+1)};$scope.calculateTimeToRepay2=function(){interestRatePerMth2=($scope.calculator2.interestRate2/100/12).toFixed(6),repaymentOverInterest2=($scope.calculator2.monthlyRepayment2/interestRatePerMth2).toFixed(6),cal12=Math.log(repaymentOverInterest2/(repaymentOverInterest2-$scope.calculator2.amtOwing2)).toFixed(6),cal22=Math.log(1+Number(interestRatePerMth2)).toFixed(6),$scope.timeToRepayVal2=cal12/cal22,convertToYrsMths2()}}]),angular.module("financialtools").controller("RetirementPlanningController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","$q","IncomeExpenseService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,$q,IncomeExpenseService){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.amtOfCashAtRetirementAge=0,$scope.savingsPerMonthTillRetirement=0,$scope.yearsToRetirement=0,$scope.savingsPerYearTillRetirement=0,$scope.totalAmtSavedWithCompounding=0,$scope.retirementMonthlyIncomeWithInterest=0,$scope.currentSavingToRetirementSaving=0,$scope.currentSavingToRetirementSavingAnalysis="unhealthy",$scope.currentSavingToIncomeRatio=0,$scope.currentSavingToIncomeRatioAnalysis="unhealthy",$scope.retirementSavingToIncomeRatio=0,$scope.retirementSavingToIncomeRatioAnalysis="unhealthy",$scope.retirementAmtAt55=0,$scope.retirementAmtCompoundedAt55=0,$scope.minFrsInflationAdjusted=0,$scope.minFrsRealReturnsAdjusted=0,$scope.minFrsInflationAdjustedAnalysis="unhealthy",$scope.minFrsRealReturnsAdjustedAnalysis="unhealthy",$scope.interestEarned=0;var sgsYield=.02,currentFRS=161e3,annualCompounding=1,current=function(){if($scope.dt=new Date,$scope.month=$scope.dt.getMonth(),$scope.year=Number($scope.dt.getFullYear()),!$scope.user.incomeExpenseRecordsPeriod||$scope.user.incomeExpenseRecordsPeriod.minMonth>$scope.month&&$scope.user.incomeExpenseRecordsPeriod.minYear>=$scope.year||$scope.user.incomeExpenseRecordsPeriod.minYear>$scope.year)$scope.displayIncomeExpenseRecords=angular.copy(IncomeExpenseService.incomeExpenseRecords),$scope.displayIncomeExpenseRecords.year=angular.copy($scope.year),$scope.displayIncomeExpenseRecords.month=angular.copy($scope.month),$scope.recordFound="No record exists for and prior to selected month/year.";else{if($scope.user.incomeExpenseRecordsPeriod.minMonth===$scope.user.incomeExpenseRecordsPeriod.maxMonth&&$scope.user.incomeExpenseRecordsPeriod.minYear===$scope.user.incomeExpenseRecordsPeriod.maxYear)$scope.displayIncomeExpenseRecords=angular.copy($scope.user.incomeExpenseRecords[0]);else{var targetYear,targetMonth,latestRecord,minimumYear=$scope.user.incomeExpenseRecordsPeriod.minYear,minimumMonth=$scope.user.incomeExpenseRecordsPeriod.minMonth,maximumYear=$scope.user.incomeExpenseRecordsPeriod.maxYear,maximumMonth=$scope.user.incomeExpenseRecordsPeriod.maxMonth,latestYear=minimumYear,latestMonth=minimumMonth;if($scope.year>maximumYear||$scope.year===maximumYear&&$scope.month>=maximumMonth){targetYear=maximumYear,targetMonth=maximumMonth;for(var r2 in $scope.user.incomeExpenseRecords)$scope.user.incomeExpenseRecords[r2].year===targetYear&&$scope.user.incomeExpenseRecords[r2].month===targetMonth&&(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r2]))}else{targetYear=$scope.year,targetMonth=$scope.month;for(var r3 in $scope.user.incomeExpenseRecords)($scope.user.incomeExpenseRecords[r3].year<targetYear||$scope.user.incomeExpenseRecords[r3].year===targetYear&&$scope.user.incomeExpenseRecords[r3].month<=targetMonth)&&($scope.user.incomeExpenseRecords[r3].year===latestYear&&$scope.user.incomeExpenseRecords[r3].month>=latestMonth?(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r3]),latestMonth=angular.copy($scope.user.incomeExpenseRecords[r3].month)):$scope.user.incomeExpenseRecords[r3].year>latestYear&&(latestRecord=angular.copy($scope.user.incomeExpenseRecords[r3]),latestMonth=angular.copy($scope.user.incomeExpenseRecords[r3].month),latestYear=angular.copy($scope.user.incomeExpenseRecords[r3].year)))}$scope.displayIncomeExpenseRecords=latestRecord}$scope.monthlyIncomeAmt=$scope.displayIncomeExpenseRecords.monthlyIncomeAmt,$scope.annualIncome=12*$scope.monthlyIncomeAmt,console.log($scope.annualIncome)}};current();var calculateCashAtRetirementAge=function(){$scope.amtOfCashAtRetirementAge=12*$scope.calculator.monthlyRetirementAmt*$scope.calculator.yearsOfRetirementIncome},calculateYearsToRetirement=function(){$scope.yearsToRetirement=$scope.calculator.retirementAge-$scope.calculator.currentAge},calculateSavingsPerMonthTillRetire=function(){$scope.savingsPerMonthTillRetirement=$scope.amtOfCashAtRetirementAge/(12*$scope.yearsToRetirement)},calculateCurrentSavingsToRetirementSavings=function(){$scope.currentSavingToRetirementSaving=$scope.calculator.currentMthSavings-$scope.savingsPerMonthTillRetirement,$scope.currentSavingToRetirementSaving>0&&($scope.currentSavingToRetirementSavingAnalysis="healthy")},calculateInterestEarned=function(){$scope.interestEarned=12*$scope.savingsPerMonthTillRetirement*sgsYield},calculateRetirementAmtAt55=function(){$scope.retirementAmtAt55=12*$scope.calculator.monthlyRetirementAmt*(55-$scope.calculator.currentAge)},calculateCPFRetirementBenchmark=function(){$scope.minFrsInflationAdjusted=currentFRS*Math.pow(1+$scope.calculator.inflationRate/100,55-$scope.calculator.currentAge),$scope.minFrsRealReturnsAdjusted=currentFRS*Math.pow(1+($scope.calculator.returnRate/100-$scope.calculator.inflationRate/100),55-$scope.calculator.currentAge),$scope.minFrsInflationAdjusted<$scope.retirementAmtAt55&&($scope.minFrsInflationAdjustedAnalysis="healthy"),$scope.minFrsRealReturnsAdjusted<$scope.retirementAmtAt55&&($scope.minFrsRealReturnsAdjustedAnalysis="healthy")},calculateSavingsPerYearTillRetirement=function(){$scope.savingsPerYearTillRetirement=12*$scope.savingsPerMonthTillRetirement},calculateTotalAmtWithCompounding=function(){var i=$scope.calculator.interestRate/100,p1=1+i/annualCompounding,p2=annualCompounding*$scope.yearsToRetirement,pt1=Math.pow(p1,p2)-1,pt2=i/annualCompounding;$scope.totalAmtSavedWithCompounding=$scope.savingsPerYearTillRetirement*(pt1/pt2)},calculateRetirementMonthlyIncomeWithInterest=function(){$scope.retirementMonthlyIncomeWithInterest=$scope.totalAmtSavedWithCompounding/(12*$scope.calculator.yearsOfRetirementIncome)},calculateRetirementAmtCompoundedAt55=function(){$scope.retirementAmtCompoundedAt55=12*$scope.retirementMonthlyIncomeWithInterest*(55-$scope.calculator.currentAge)},calculateCurrentSavingToIncomeRatio=function(){$scope.currentSavingToIncomeRatio=($scope.calculator.currentMthSavings/($scope.calculator.annualIncome/12)).toFixed(2),$scope.currentSavingToIncomeRatio>.12&&($scope.currentSavingToIncomeRatioAnalysis="healthy")},calculateRetirementSavingToIncomeRatio=function(){$scope.retirementSavingToIncomeRatio=($scope.savingsPerMonthTillRetirement/($scope.calculator.annualIncome/12)).toFixed(2),$scope.retirementSavingToIncomeRatio>.12&&($scope.retirementSavingToIncomeRatioAnalysis="healthy")};$scope.calculateRetirement=function(){calculateCashAtRetirementAge(),calculateYearsToRetirement(),calculateSavingsPerMonthTillRetire(),calculateCurrentSavingsToRetirementSavings(),calculateCurrentSavingToIncomeRatio(),calculateRetirementSavingToIncomeRatio(),calculateInterestEarned(),calculateRetirementAmtAt55(),calculateCPFRetirementBenchmark()},$scope.calculateRetirementWithInterest=function(){calculateYearsToRetirement(),calculateCashAtRetirementAge(),calculateSavingsPerMonthTillRetire(),calculateSavingsPerYearTillRetirement(),calculateTotalAmtWithCompounding(),calculateRetirementMonthlyIncomeWithInterest(),calculateCurrentSavingsToRetirementSavings(),calculateCurrentSavingToIncomeRatio(),calculateRetirementSavingToIncomeRatio(),calculateRetirementAmtCompoundedAt55(),calculateCPFRetirementBenchmark()}}]),angular.module("milestones").controller("MilestonesController",["$scope","$stateParams","$location","Authentication","MilestoneService","Users",function($scope,$stateParams,$location,Authentication,MilestoneService,Users){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.showNewGoals=!0,$scope.addNewMilestone=!1,$scope.afterClick=!0,$scope.readonly=!0,$scope.noMileStoneDeleted=!0,$scope.userCopy={},angular.copy($scope.user,$scope.userCopy),this.$setScope=function(context){$scope=context},$scope.qnsTitle=MilestoneService.qnsTitle(),$scope.qnsType=MilestoneService.qnsType(),$scope.qnsTargetAmount=MilestoneService.qnsTargetAmount(),$scope.qnsCurrentAmount=MilestoneService.qnsCurrentAmount(),$scope.qnsTargetDate=MilestoneService.qnsTargetDate(),$scope.generateNewLine=function(){$scope.addNewMilestone=!0,$scope.showNewGoals=!1,$scope.afterClick=!1,$scope.updateButton=!1},$scope.tableEmptyCheck=function(){var tableCheck=$scope.user.mileStones;return 0===tableCheck.length?($scope.noMilestones=!0,$scope.showNewGoals=!0,!1):($scope.noMilestones=!1,$scope.showNewGoals=!1,!0)},$scope.tableEmptyCheck(),$scope.getMonthString=function(monthNm){var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],monthString=months[monthNm];return monthString},$scope.calculateMonthsBtw=function(d1,d2){var months;return months=12*(d2.getFullYear()-d1.getFullYear()),months-=d1.getMonth()+1,months+=d2.getMonth(),0>=months?0:months},$scope.paymentAdvice=function(){if($scope.user.mileStones.length>0){for(var i=0;i<$scope.user.mileStones.length;i++){var dateUsed=new Date,today=new Date,startDate=new Date($scope.user.mileStones[i].startDate);dateUsed=today>startDate?today:startDate;var targetDate=new Date($scope.user.mileStones[i].targetDate),monthsLeft=$scope.calculateMonthsBtw(dateUsed,targetDate),paymentAmount=0;paymentAmount=0===monthsLeft?$scope.user.mileStones[i].targetAmount-$scope.user.mileStones[i].currentAmount:($scope.user.mileStones[i].targetAmount-$scope.user.mileStones[i].currentAmount)/monthsLeft;var paymentAmountAdj=paymentAmount.toFixed(2);0>paymentAmountAdj&&(paymentAmountAdj=0);var goalTitle=$scope.user.mileStones[i].goalTitle,goalType=$scope.user.mileStones[i].goalType,currentAmount=$scope.user.mileStones[i].currentAmount,targetAmount=$scope.user.mileStones[i].targetAmount,startDateFormatted=$scope.user.mileStones[i].startDateFormatted,targetDateFormatted=$scope.user.mileStones[i].targetDateFormatted,progress=$scope.user.mileStones[i].progress;$scope.user.mileStones[i]={goalTitle:goalTitle,goalType:goalType,currentAmount:currentAmount,targetAmount:targetAmount,startDate:startDate,startDateFormatted:startDateFormatted,targetDate:targetDate,targetDateFormatted:targetDateFormatted,progress:progress,paymentAmountAdj:paymentAmountAdj,monthsLeft:monthsLeft}}$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}},$scope.addMilestone=function(isValid){if(isValid){for(var goalTitle=$scope.title,goalType=$scope.goalType,currentAmount=0,targetAmount=$scope.targetAmount,existingTitleCheck=0,userNow=$scope.user,i=0;i<userNow.mileStones.length;i++){var mileStone=userNow.mileStones[i];mileStone.goalTitle.toLowerCase()===goalTitle.toLowerCase()&&existingTitleCheck++}if(targetAmount>currentAmount&&0===existingTitleCheck){var progress=Math.floor(currentAmount/targetAmount*100),startDate=$scope.startDate;console.log("added start date"+startDate);var startDateD=startDate.getDate(),startDateYr=startDate.getFullYear(),startDateFormatted=startDateD+"/"+(startDate.getMonth()+1)+"/"+startDateYr,targetDate=$scope.targetDate,targetDateD=targetDate.getDate(),targetDateYr=targetDate.getFullYear(),targetDateFormatted=targetDateD+"/"+(targetDate.getMonth()+1)+"/"+targetDateYr,goalObj={goalTitle:goalTitle,goalType:goalType,currentAmount:currentAmount,targetAmount:targetAmount,startDate:startDate,startDateFormatted:startDateFormatted,targetDate:targetDate,targetDateFormatted:targetDateFormatted,progress:progress};$scope.user.mileStones.push(goalObj),$scope.title="",$scope.goalType="",$scope.startDate="",$scope.targetDate="",$scope.targetAmount="",alert("Milestone Added!"),$scope.user.updatedMilestones=!0,$scope.afterClick=!0,$scope.addNewMilestone=!1,$scope.paymentAdvice()}else currentAmount>=targetAmount?alert("Current Amount cannot be equals to or more than Target Amount!"):existingTitleCheck>0&&alert("Goal Title already exists! Please use another title name.")}else $scope.error="Form Incomplete. Please Check again."},$scope.makeContribution=function(){console.log("entered"),$scope.user.mileStones[$scope.user.updateMilestonePos].currentAmount+=$scope.contribution,console.log("scope is"+$scope.contribution),$scope.user.mileStones[$scope.user.updateMilestonePos].progress=Math.floor($scope.user.mileStones[$scope.user.updateMilestonePos].currentAmount/$scope.user.mileStones[$scope.user.updateMilestonePos].targetAmount*100),$scope.user.mileStones[$scope.user.updateMilestonePos].progress>100&&($scope.user.mileStones[$scope.user.updateMilestonePos].progress=100),alert("Contribution Added!"),$scope.contribution=0;new Users($scope.user);$scope.paymentAdvice()},$scope.updateMilestone=function(){var goalTitle=$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].goalTitle,goalType=$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].goalType,currentAmount=$scope.user.mileStones[$scope.user.updateMilestonePos].currentAmount,targetAmount=$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].targetAmount;if(targetAmount>currentAmount){var progress=Math.floor(currentAmount/targetAmount*100);progress>=100&&(progress=100);var startDate=new Date($scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].startDate),startDateD=startDate.getDate(),startDateYr=startDate.getFullYear(),startDateFormatted=startDateD+"/"+(startDate.getMonth()+1)+"/"+startDateYr,targetDate=new Date($scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].targetDate),targetDateD=targetDate.getDate(),targetDateYr=targetDate.getFullYear(),targetDateFormatted=targetDateD+"/"+(targetDate.getMonth()+1)+"/"+targetDateYr;$scope.user.mileStones[$scope.user.updateMilestonePos]={goalTitle:goalTitle,goalType:goalType,currentAmount:currentAmount,targetAmount:targetAmount,startDate:startDate,startDateFormatted:startDateFormatted,targetDate:targetDate,targetDateFormatted:targetDateFormatted,progress:progress},$scope.success=$scope.error=null,alert("Milestone Updated!"),$scope.paymentAdvice()}else currentAmount>=targetAmount&&alert("Current Amount cannot be more than Target Amount!");$scope.uneditMilestone()},$scope.cancel=function(){$scope.showNewGoals=!0,$scope.addNewMilestone=!1,$scope.afterClick=!0,$scope.tableEmptyCheck(),$scope.title="",$scope.goalType="",$scope.startDate="",$scope.targetDate="",$scope.targetAmount=0},$scope.redirectUpdateMilestone=function(x){for(var arrayPos=null,i=0;i<$scope.user.mileStones.length;i++){var mileStone=$scope.user.mileStones[i];mileStone.goalTitle===x.goalTitle&&(arrayPos=i,console.log("Enter liao"))}console.log("check"+arrayPos),$scope.user.updateMilestonePos=arrayPos;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user,$location.path("/milestones/updatemilestone")},function(response){$scope.error=response.data.message})},$scope.markComplete=function(){var confirmComplete=confirm("Confirm Completion of: "+$scope.user.mileStones[$scope.user.updateMilestonePos].goalTitle+" goal?"),completedObj=$scope.user.mileStones[$scope.user.updateMilestonePos];if(console.log(completedObj),confirmComplete){$scope.user.completedMilestones.push(completedObj),$scope.user.mileStones.splice($scope.user.updateMilestonePos,1),$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user,$location.path("/milestones")},function(response){$scope.error=response.data.message})}},$scope.deleteMilestone=function(x){console.log(x.goalTitle);var confirmDelete=confirm("Confirm delete milestone: "+x.goalTitle);if(confirmDelete){for(var i=0;i<$scope.user.mileStones.length;i++){var mileStone=$scope.user.mileStones[i];mileStone.goalTitle===x.goalTitle&&$scope.user.mileStones.splice(i,1)}$scope.noMileStoneDeleted=!1,$scope.success=$scope.error=null;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}$scope.tableEmptyCheck()},$scope.alerts=[{type:"success",msg:"You have successfully deleted your Milestone!"},{type:"error",msg:"400 error"}],$scope.deleteCompletedMilestone=function(x){console.log(x.goalTitle);var confirmDelete=confirm("Confirm delete milestone: "+x.goalTitle);if(confirmDelete){for(var i=0;i<$scope.user.completedMilestones.length;i++){var mileStone=$scope.user.completedMilestones[i];mileStone.goalTitle===x.goalTitle&&$scope.user.completedMilestones.splice(i,1)}$scope.success=$scope.error=null;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}},$scope.closeAlert=function(index){$scope.alerts.splice(index,1)},$scope.editMilestone=function(){$scope.readonly=!1},$scope.uneditMilestone=function(){$scope.readonly=!0,$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].goalTitle=$scope.user.mileStones[$scope.user.updateMilestonePos].goalTitle,$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].goalType=$scope.user.mileStones[$scope.user.updateMilestonePos].goalType,$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].targetAmount=$scope.user.mileStones[$scope.user.updateMilestonePos].targetAmount,$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].startDate=$scope.user.mileStones[$scope.user.updateMilestonePos].startDate,$scope.userCopy.mileStones[$scope.userCopy.updateMilestonePos].targetDate=$scope.user.mileStones[$scope.user.updateMilestonePos].targetDate},$scope.today=function(){$scope.dt=new Date},$scope.today(),$scope.clear=function(){$scope.dt=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.toggleMin=function(){$scope.minDate=$scope.minDate?null:new Date},$scope.toggleMin(),$scope.open=function($event){$scope.opened=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["yyyy-MM-dd","dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0];var tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()+1);var afterTomorrow=new Date;afterTomorrow.setDate(tomorrow.getDate()+2),$scope.events=[{date:tomorrow,status:"full"},{date:afterTomorrow,status:"partially"}],$scope.getDayClass=function(date,mode){if("day"===mode)for(var dayToCheck=new Date(date).setHours(0,0,0,0),i=0;i<$scope.events.length;i++){var currentDay=new Date($scope.events[i].date).setHours(0,0,0,0);if(dayToCheck===currentDay)return $scope.events[i].status}return""}}]),angular.module("milestones").controller("MilestonesController",["$scope","$stateParams","$location","Authentication","Users",function($scope,$stateParams,$location,Authentication,Users){$scope.authentication=Authentication,$scope.user=Authentication.user,this.$setScope=function(context){$scope=context};var updater=!1,today=new Date;$scope.today=new Date,today.setHours(0,0,0,0);var displayMonth=today.getMonth(),displayDate=today.getDate(),todayFullDate=today.getFullYear()+"-"+today.getMonth()+"-"+today.getDate();displayMonth=1===(today.getMonth()+1).toString().length?"0"+(today.getMonth()+1).toString():(today.getMonth()+1).toString(),1===(today.getDate()+1).toString().length&&(displayDate="0"+today.getDate().toString()),$scope.fixedToday=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.startDate=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.minDater=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.endDate=$scope.startDate,$scope.$watch("goal.type",function(){"undefined"!=typeof $scope.goal&&("Others"===$scope.goal.type?($scope.others=!0,$scope.requiredCheck=!0):($scope.others=!1,$scope.requiredCheck=!1))}),$scope.$watch("startDate",function(){var newDate=new Date($scope.startDate);today>newDate?($scope.minDater=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.endDate=$scope.minDater):($scope.endDate=$scope.startDate,$scope.minDater=$scope.startDate)});var updateMethod=function(){if(!$scope.user.lastUpdate||$scope.user.lastUpdate!==todayFullDate||updater===!0){$scope.user.lastUpdate=todayFullDate;for(var i=0;i<$scope.user.mileStones.length;i++){var dateUsed,mileStone=$scope.user.mileStones[i],oneDay=864e5,startDate=new Date(mileStone.startDate),endDate=new Date(mileStone.endDate);if(startDate.setHours(0,0,0,0),endDate.setHours(0,0,0,0),mileStone.progress=Math.floor(mileStone.amtSaved/mileStone.targetAmt*100),mileStone.progress>100&&(mileStone.progress=100),startDate>today)dateUsed=startDate,mileStone.status="Not Started",mileStone.countDownToStart=Math.round(Math.abs((today.getTime()-startDate.getTime())/oneDay)),mileStone.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),mileStone.monthsLeft=Math.floor(mileStone.daysLeftFromToday/30),mileStone.dateProgress=0,console.log("A");else if(endDate>today&&mileStone.progress<100)dateUsed=today,mileStone.status="In-Progress",mileStone.countDownToStart=0,mileStone.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),mileStone.monthsLeft=Math.floor(mileStone.daysLeftFromToday/30),mileStone.dateProgress=Math.floor(Math.abs(startDate.getTime()-today.getTime())/oneDay/mileStone.totalDurationDays*100),console.log("B");else if(today>=endDate||100===mileStone.progress){if(mileStone.status="Completed",mileStone.countDownToStart=0,today>=endDate&&(mileStone.daysLeftFromToday=0,mileStone.monthsLeft=0,mileStone.dateProgress=100),100===mileStone.progress&&(dateUsed=today,mileStone.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),mileStone.monthsLeft=Math.floor(mileStone.daysLeftFromToday/30),mileStone.dateProgress=Math.floor(Math.abs((startDate.getTime()-today.getTime())/oneDay/mileStone.totalDurationDays*100)),"undefined"==typeof mileStone.completionDate||"undefined"===mileStone.completionDate)){var month=$scope.getMonthString(today.getMonth());mileStone.completionDate=today.getDate()+"-"+month+"-"+today.getFullYear()}console.log("C")}mileStone.daysLeftFromToday>=30?mileStone.monthlyPayment=(mileStone.targetAmt-mileStone.amtSaved)/Math.round(mileStone.daysLeftFromToday/30):mileStone.monthlyPayment=mileStone.targetAmt-mileStone.amtSaved,mileStone.monthlyPayment<0&&(mileStone.monthlyPayment=0)}$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message,location.reload()})}updater=!1};updateMethod(),$scope.addNewMilestoneFnc=function(){console.log($scope.goal);var errorCheck=0;if($scope.goal.uniqueId=$scope.goal.name+$scope.goal.type,$scope.goal.targetAmt<=$scope.goal.amtSaved?(errorCheck++,alert("Amount saved so far cannot be equal/higher than Amount to Save.")):$scope.goal.progress=Math.floor($scope.goal.amtSaved/$scope.goal.targetAmt*100),$scope.startDate===$scope.endDate||$scope.endDate===$scope.fixedToday?(errorCheck++,alert("Error! Please select another completion date!")):($scope.goal.startDate=$scope.startDate,$scope.goal.endDate=$scope.endDate),0===errorCheck){var dateUsed,oneDay=864e5,startDate=new Date($scope.goal.startDate),endDateObj=new Date($scope.goal.endDate);startDate.setHours(0,0,0,0),startDate>today?($scope.goal.status="Not Started",$scope.goal.countDownToStart=Math.round(Math.abs((today.getTime()-startDate.getTime())/oneDay)),dateUsed=startDate):(dateUsed=today,$scope.goal.status="In-Progress",$scope.goal.countDownToStart=0);var month=$scope.getMonthString(dateUsed.getMonth());$scope.goal.startDateFormatted=dateUsed.getDate()+"-"+month+"-"+dateUsed.getFullYear(),$scope.goal.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDateObj.getTime())/oneDay)),$scope.goal.monthsLeft=Math.floor($scope.goal.daysLeftFromToday/30),$scope.goal.totalDurationDays=Math.round(Math.abs((startDate.getTime()-endDateObj.getTime())/oneDay)),$scope.goal.contributionRecords=[],"In-Progress"===$scope.goal.status?$scope.goal.dateProgress=Math.floor(Math.abs(startDate.getTime()-today.getTime())/oneDay/$scope.goal.totalDurationDays*100):$scope.goal.dateProgress=0,$scope.goal.daysLeftFromToday>=30?$scope.goal.monthlyPayment=($scope.goal.targetAmt-$scope.goal.amtSaved)/Math.round($scope.goal.daysLeftFromToday/30):$scope.goal.monthlyPayment=$scope.goal.targetAmt-$scope.goal.amtSaved,$scope.user.mileStones.push($scope.goal),0!==$scope.user.mileStones.length&&($scope.user.updatedMilestones=!0),$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.successMsg=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message,alert("Update Failed! Please Try Again."),location.reload()}),$scope.startDate=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.minDater=today.getFullYear()+"-"+displayMonth+"-"+displayDate,$scope.endDate=$scope.startDate}},$scope.viewSelector=function(x){$scope.goal=x},$scope.updateSelector=function(x){$scope.goal=x},$scope.earlyStartSelector=function(x){$scope.goal=x,$scope.earlyStart=!0},$scope.confirmDelete=function(x){$scope.goal=x},$scope.confirmComplete=function(x){$scope.goal=x},$scope.updateMilestoneFnc=function(){if($scope.updateMilestoneForm.$dirty){$scope.goal.completionDate="undefined";var dateUsed,month,oneDay=864e5,startDate=new Date($scope.goal.startDate);startDate.setHours(0,0,0,0);var endDate=new Date($scope.goal.endDate);if(endDate.setHours(0,0,0,0),$scope.goal.totalDurationDays=Math.round(Math.abs((startDate.getTime()-endDate.getTime())/oneDay)),$scope.goal.progress=Math.floor($scope.goal.amtSaved/$scope.goal.targetAmt*100),$scope.goal.progress>100&&($scope.goal.progress=100),startDate>today?(dateUsed=startDate,$scope.goal.status="Not Started",$scope.goal.countDownToStart=Math.round(Math.abs((today.getTime()-startDate.getTime())/oneDay)),$scope.goal.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),$scope.goal.monthsLeft=Math.floor($scope.goal.daysLeftFromToday/30),$scope.goal.dateProgress=0,console.log("A")):endDate>today&&$scope.goal.progress<100?(dateUsed=today,$scope.goal.status="In-Progress",$scope.goal.countDownToStart=0,$scope.goal.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),$scope.goal.monthsLeft=Math.floor($scope.goal.daysLeftFromToday/30),
console.log((startDate.getTime()-today.getTime())/oneDay),$scope.goal.dateProgress=Math.floor(Math.abs(startDate.getTime()-today.getTime())/oneDay/$scope.goal.totalDurationDays*100),console.log("B")):(today>=endDate||100===$scope.goal.progress)&&($scope.goal.status="Completed",$scope.goal.countDownToStart=0,today>=endDate&&($scope.goal.daysLeftFromToday=0,$scope.goal.monthsLeft=0,$scope.goal.dateProgress=100),100===$scope.goal.progress&&(dateUsed=today,$scope.goal.daysLeftFromToday=Math.round(Math.abs((dateUsed.getTime()-endDate.getTime())/oneDay)),$scope.goal.monthsLeft=Math.floor($scope.goal.daysLeftFromToday/30),$scope.goal.dateProgress=Math.floor(Math.abs((startDate.getTime()-today.getTime())/oneDay/$scope.goal.totalDurationDays*100)),("undefined"==typeof $scope.goal.completionDate||"undefined"===$scope.goal.completionDate)&&(month=$scope.getMonthString(today.getMonth()),$scope.goal.completionDate=today.getDate()+"-"+month+"-"+today.getFullYear())),console.log("C")),$scope.goal.daysLeftFromToday>=30?$scope.goal.monthlyPayment=($scope.goal.targetAmt-$scope.goal.amtSaved)/Math.round($scope.goal.daysLeftFromToday/30):$scope.goal.monthlyPayment=$scope.goal.targetAmt-$scope.goal.amtSaved,$scope.goal.monthlyPayment<0&&($scope.goal.monthlyPayment=0),month=$scope.getMonthString(startDate.getMonth()),$scope.goal.startDateFormatted=startDate.getDate()+"-"+month+"-"+startDate.getFullYear(),$scope.goal.contributionRecords=[],confirm("Editing your milestone will cause you to lose contribution data. Are you sure?")){for(var i=0;i<$scope.user.mileStones.length;i++){var mileStone=$scope.user.mileStones[i];mileStone.uniqueId===$scope.goal.uniqueId&&(mileStone=$scope.goal)}$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.successMsg=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message,alert("Update Failed! Please Try Again."),location.reload()})}else location.reload()}else $scope.error="No Changes Detected";$scope.earlyStart=!1},$scope.resetModal=function(){$scope.successMsg=!1,$scope.goal="",$scope.error="",$scope.earlyStart=!1},$scope.getMonthString=function(monthNm){var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],monthString=months[monthNm];return monthString},$scope.makeContribution=function(x){if(console.log(x),console.log(x.contribution),0!==x.contribution){for(var i=0;i<$scope.user.mileStones.length;i++)if($scope.user.mileStones[i].name===x.name&&$scope.user.mileStones[i].startDate===x.startDate){$scope.user.mileStones[i].amtSaved+=x.contribution;var id=$scope.user.mileStones[i].contributionRecords.length+1,month=$scope.getMonthString(today.getMonth()),contributionDate=today.getDate()+"-"+month+"-"+today.getFullYear(),record={date:contributionDate,contribution:x.contribution,id:id};$scope.user.mileStones[i].contributionRecords.push(record)}x.contribution=0,updater=!0,updateMethod(),alert("Contribution added")}else alert("Enter an amount greater than $0.00")},$scope.markComplete=function(){var completedObj=$scope.goal;if(completedObj.id=$scope.user.completedMilestones.length+1,console.log(completedObj),"undefined"==typeof completedObj.completionDate||"undefined"===$scope.goal.completionDate){var month=$scope.getMonthString(today.getMonth());completedObj.completionDate=today.getDate()+"-"+month+"-"+today.getFullYear()}$scope.user.completedMilestones.push(completedObj);for(var i=0;i<$scope.user.mileStones.length;i++){var mileStone=$scope.user.mileStones[i];mileStone.uniqueId===$scope.goal.uniqueId&&$scope.user.mileStones.splice(i,1)}$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user,$location.path("/milestones")},function(response){$scope.error=response.data.message}),$scope.goal=""},$scope.cancelDelete=function(){$scope.goal=""},$scope.deleteMilestone=function(){console.log($scope.goal);for(var i=0;i<$scope.user.mileStones.length;i++){var mileStone=$scope.user.mileStones[i];mileStone.uniqueId===$scope.goal.uniqueId&&($scope.user.mileStones.splice(i,1),console.log("WHAAAATT!"))}0===$scope.user.mileStones.length&&($scope.user.updatedMilestones=!1),$scope.success=$scope.error=null;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message,console.log($scope.error),alert("Error Deleting. Try Delete Again"),location.reload()}),$scope.goal=""},$scope.deleteCompletedMilestone=function(){console.log($scope.goal);for(var i=0;i<$scope.user.completedMilestones.length;i++){var mileStone=$scope.user.completedMilestones[i];mileStone.uniqueId===$scope.goal.uniqueId&&$scope.user.completedMilestones.splice(i,1)}for(var b=0;b<$scope.user.completedMilestones.length;b++){var completedMilestone=$scope.user.completedMilestones[b];completedMilestone.id=$scope.user.completedMilestones.indexOf(completedMilestone)+1}$scope.success=$scope.error=null;var userNow=new Users($scope.user);userNow.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),$scope.goal=""}}]),angular.module("milestones").factory("MilestoneService",["$resource",function($resource){var qnsTitle={1:"Name",2:"Description"},qnsType={1:"Goal Type",2:"Type of Goal",3:"Savings",4:"Retirement",5:"Education"},qnsTargetAmount={1:"targetAmount",2:"Target Amount to Save"},qnsCurrentAmount={1:"currentAmount",2:"Amount Saved Currently"},qnsTargetDate={1:"targetDate",2:"Target Date"};return{qnsTitle:function(){return qnsTitle},qnsType:function(){return qnsType},qnsTargetAmount:function(){return qnsTargetAmount},qnsCurrentAmount:function(){return qnsCurrentAmount},qnsTargetDate:function(){return qnsTargetDate}}}]),angular.module("milestones").factory("MilestoneService",["$resource",function($resource){var qnsTitle={1:"Name",2:"Description"},qnsType={1:"Goal Type",2:"Type of Goal",3:"Savings",4:"Retirement",5:"Education"},qnsTargetAmount={1:"targetAmount",2:"Target Amount to Save"},qnsCurrentAmount={1:"currentAmount",2:"Amount Saved Currently"},qnsTargetDate={1:"targetDate",2:"Target Date"};return{qnsTitle:function(){return qnsTitle},qnsType:function(){return qnsType},qnsTargetAmount:function(){return qnsTargetAmount},qnsCurrentAmount:function(){return qnsCurrentAmount},qnsTargetDate:function(){return qnsTargetDate}}}]),angular.module("social").config(["$stateProvider",function($stateProvider){$stateProvider.state("viewProfile",{url:"/social/:profileId",templateUrl:"modules/social/views/view-profile.client.view.html"}).state("postView",{url:"/post/:postId",templateUrl:"modules/social/views/view-post.client.view.html"}).state("postEdit",{url:"/post/:postId/edit",templateUrl:"modules/social/views/edit-post.client.view.html"}).state("postsCreate",{url:"/posts/create",templateUrl:"modules/social/views/create-post.client.view.html"})}]),angular.module("social").controller("PostsController",["$scope","$stateParams","$state","$location","$window","Authentication","$http","Post","$anchorScroll","$q","$timeout",function($scope,$stateParams,$state,$location,$window,Authentication,$http,Post,$anchorScroll,$q,$timeout){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.postFilter="public",$scope.imageUrl="https://hexapic.s3.amazonaws.com/",$scope.changeColor=function(menu,bool){bool===!0?$scope.menuColor={"background-color":"#B8A631",color:"white"}:bool===!1&&($scope.menuColor={"background-color":"white",color:"black"})},$scope.newPost=function(){$location.path("/posts/create")},$scope.createPost=function(){var post=new Post({title:this.title,content:this.content,privacy:this.privacy});console.log(post),$http.post("/api/posts",post).success(function(response){$window.location.reload(),$location.path("/social/posts"),$scope.title="",$scope.content=""}).error(function(){console.log("Problem with posting")})},$scope.editPost=function(){var postURL="/api/posts/"+$stateParams.postId,viewPostURL="/post/"+$stateParams.postId;console.log($scope.post.content);var post=new Post({title:$scope.post.title,content:$scope.post.content,privacy:$scope.post.privacy});console.log("before"),$http.put(postURL,post).success(function(response){$location.path(viewPostURL),console.log(response),$scope.title="",$scope.content=""}).error(function(response){console.log(response)})},$scope.remove=function(){var postURL="/api/posts/"+$stateParams.postId;$http["delete"](postURL).then(function(response){$location.path("/social/posts"),$scope.post=response.data})},$scope.findOne=function(){var userURL="/api/posts/"+$stateParams.postId;$http.get(userURL).then(function(response){$scope.post=response.data})},$scope.findPostsPublic=function(){$anchorScroll(),$scope.posts=Post.query()},$scope.findPostsFriends=function(){$anchorScroll(),$http.get("/api/postsByFriends").then(function(response){$scope.posts=response.data})},$scope.findPostsPersonal=function(){$anchorScroll(),$http.get("/api/postsByMe").then(function(response){$scope.posts=response.data})},$scope.addComment=function(){console.log($scope.comment),console.log($stateParams.postId),$http.put("/api/commentPost",{postId:$stateParams.postId,comment:$scope.comment}).success(function(response){console.log(response),$scope.post=response,$scope.comment=""}).error(function(){console.log("There is an error adding comments")})},$scope.editComment=function(commentContent,comment){console.log("here"),console.log(commentContent),console.log($stateParams.postId),console.log(comment),$scope.editCmt=!$scope.editCmt,$http.put("/api/editComment",{postId:$stateParams.postId,comment:commentContent,commentId:comment._id}).success(function(response){console.log(response),$scope.post=response}).error(function(){console.log("There is an error editing comments")})},$scope.removeComment=function(comment){console.log(comment),$http.put("/api/removeComment",{postId:$stateParams.postId,commentId:comment._id}).success(function(response){console.log(response),$scope.post=response}).error(function(){console.log("There is an error deleting comment")})},$scope.upPost=function(postId){$http.put("/api/upPoints",{postId:postId,postFilter:$scope.postFilter}).success(function(response){$scope.posts=response}).error(function(){console.log("There is an error upvoting")})},$scope.upOnePost=function(postId){$http.put("/api/upOnePoints",{postId:postId,postFilter:$scope.postFilter}).success(function(response){$scope.post=response}).error(function(){console.log("There is an error upvoting")})}}]),angular.module("social").controller("SocialController",["$scope","$window","$stateParams","$state","$location","Authentication","$http","UserProfile","$anchorScroll",function($scope,$window,$stateParams,$state,$location,Authentication,$http,UserProfile,$anchorScroll){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.userList=[],$scope.friendList=[],$scope.sentFriendReqList=[],$scope.pendingReqList=[],$scope.imageUrl="https://hexapic.s3.amazonaws.com/",$scope.yearJoined=new Date($scope.user.created).getFullYear();var socialRankUrl="https://hexapic.s3.amazonaws.com/"+Authentication.user.socialRankPic,profilePicUrl="https://hexapic.s3.amazonaws.com/"+Authentication.user.profilePic;$scope.decachedSocialRankUrl=socialRankUrl+"?decache="+Math.random(),$scope.decachedProfilePicUrl=profilePicUrl+"?decache="+Math.random(),$scope.refreshSocialRankPic=function(){$scope.decachedSocialRankUrl=socialRankUrl+"?decache="+Math.random()},$scope.user.age?$scope.profileAge=$scope.user.age:$scope.profileAge="N/A",$scope.user.description?$scope.profileDescription=$scope.user.description:$scope.profileDescription="N/A",$scope.numFriends=0,$scope.user.friendList&&$scope.user.friendList.forEach(function(friend){3===friend.friendStatus&&$scope.numFriends++}),$scope.findAll=function(){$http.get("/friendship/retrieveUsers").then(function(response){$scope.userList=response.data})},$scope.findFriends=function(){$http.get("/friendship/retrieveFriends").then(function(response){var listOfUsers=response.data;listOfUsers.forEach(function(user){3===user.friendStatus?$scope.friendList.push(user):2===user.friendStatus?$scope.pendingReqList.push(user):1===user.friendStatus&&$scope.sentFriendReqList.push(user)})})},$scope.addFriend=function(friendEmail,friendId){console.log(friendEmail),console.log("friends"+friendId),$http.put("/friendship/addFriend",{friendEmail:friendEmail,friendId:friendId}).success(function(response){console.log(response),$scope.userList.forEach(function(user){user.email===friendEmail&&(user.friendStatus=1)}),$scope.userProfile&&($scope.userProfile.friendStatus=1)}).error(function(){console.log("error adding friends")})},$scope.acceptFriend=function(friendEmail,friendId){$http.put("/friendship/acceptFriend",{friendEmail:friendEmail,friendId:friendId}).success(function(response){console.log(response),$scope.userList.forEach(function(user){user.email===friendEmail&&(user.friendStatus=3)}),$window.location.reload()}).error(function(){console.log("error adding friends")})},$scope.findOne=function(){console.log($stateParams.profileId);var userURL="/api/social/"+$stateParams.profileId;$http.get(userURL).then(function(response){console.log(response),$scope.userProfile=response.data,$scope.userProfile.friendList.num=0,$scope.userProfile.friendList.forEach(function(friend){3===friend.friendStatus&&($scope.userProfile.friendList.num=$scope.userProfile.friendList.num+1)}),findProfilePosts($scope.userProfile)})};var findProfilePosts=function(userProfile){$anchorScroll(),$http.get("/api/postsByUser",{params:{_id:userProfile._id}}).then(function(response){console.log(response),$scope.posts=response.data})};$scope.changeColor=function(menu,bool){bool===!0?$scope.menuColor={"background-color":"#B8A631",color:"white"}:bool===!1&&($scope.menuColor={"background-color":"white",color:"black"})},$scope.upPost=function(postId,userProfile){console.log("here"),$http.put("/api/upUserPoints",{_id:userProfile._id,postId:postId}).success(function(response){$scope.posts=response}).error(function(){console.log("There is an error upvoting")})}}]),angular.module("social").factory("Post",["$resource",function($resource){return $resource("api/posts/:postId",{postId:"@_id"},{update:{method:"PUT"}})}]),angular.module("social").factory("UserProfile",["$resource",function($resource){return $resource("/api/social/:profileId",{profileId:"@userObjectId"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/profileSettings.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("questionnaire",{url:"/settings/questionnaire",templateUrl:"modules/users/views/settings/questionnaire.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("errorsignin",{url:"/errorsignin",templateUrl:"modules/users/views/authentication/errorsignin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("adminHome",{url:"/admin/home",templateUrl:"modules/admin/views/admin-home.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").directive("dynamicModel",["$compile",function($compile){return{link:function(scope,element,attrs){scope.$watch(attrs.dynamicModel,function(dynamicModel){attrs.ngModel!==dynamicModel&&dynamicModel&&(element.attr("ng-model",dynamicModel),""===dynamicModel&&element.removeAttr("ng-model"),element.unbind(),$compile(element)(scope))})}}}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","$timeout","$window",function($scope,$http,$location,Authentication,$timeout,$window){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/settings/questionnaire")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response;var completeQns=$scope.authentication.user.completeQns,userType=$scope.authentication.user.roles;0===userType[0].localeCompare("admin")?$location.path("/admin/home"):completeQns?$location.path("/home"):$location.path("/settings/questionnaire")}).error(function(response){$scope.error=response.message})},$scope.initRedirectLogin=function(){$timeout(function(){$location.path("/signin")},5e3)}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("QuestionnaireController",["$scope","$stateParams","$http","$location","Users","Authentication","QuestionnaireService","CreditService",function($scope,$stateParams,$http,$location,Users,Authentication,QuestionnaireService,CreditService){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),this.$setScope=function(context){$scope=context},$scope.oneAtATime=!1,$scope.qnsPersonal=QuestionnaireService.qnsPersonal,$scope.qnsJob=QuestionnaireService.qnsJob,$scope.qnsFinance=QuestionnaireService.qnsFinance,$scope.clearSuccessMessage=function(){$scope.success=!1,$scope.error=""},$scope.addItem=function(){var newItemNo=$scope.items.length+1;$scope.items.push("Item "+newItemNo)},$scope.status={isFirstOpen:!0,isFirstDisabled:!1},$scope.questions=[],$scope.updateUserQns=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);verifyAllQnsCompleted(user),user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}else $scope.submitted=!0};var verifyAllQnsCompleted=function(user){var personalRes=verifyQnsPersonalCompleted(user),jobRes=verifyQnsJobCompleted(user),financeRes=verifyQnsFinanceCompleted(user);personalRes.completePersonalQns===!0&&jobRes.completeJobQns===!0&&financeRes.completeFinanceQns===!0&&(user.completeQns=!0),user.currentCreditRating=personalRes.personalScore+jobRes.jobScore+financeRes.financeScore,user.creditGrade=CreditService.creditGrade(user.currentCreditRating)},verifyQnsPersonalCompleted=function(user){var completePersonalQns=!0,personalScore=0;return null===user.creditProfileScore.sGender||void 0===user.creditProfileScore.sGender?completePersonalQns=!1:(personalScore+=Number(user.creditProfileScore.sGender),1===Number(user.creditProfileScore.sGender)?user.gender="Male":user.gender="Female"),null===user.creditProfileScore.sAge||void 0===user.creditProfileScore.sAge?completePersonalQns=!1:personalScore+=Number(user.creditProfileScore.sAge),null===user.creditProfileScore.sEducationLevel||void 0===user.creditProfileScore.sEducationLevel?completePersonalQns=!1:(personalScore+=Number(user.creditProfileScore.sEducationLevel),5===Number(user.creditProfileScore.sEducationLevel)?user.educationLevel="PhD":4===Number(user.creditProfileScore.sEducationLevel)?user.educationLevel="Masters":3===Number(user.creditProfileScore.sEducationLevel)?user.educationLevel="Graduate":2===Number(user.creditProfileScore.sEducationLevel)?user.educationLevel="Undergraduate":1===Number(user.creditProfileScore.sEducationLevel)?user.educationLevel="A/O/N Levels":user.educationLevel="PSLE"),null===user.creditProfileScore.sMaritalStatus||void 0===user.creditProfileScore.sMaritalStatus?completePersonalQns=!1:(personalScore+=Number(user.creditProfileScore.sMaritalStatus),3===Number(user.creditProfileScore.sMaritalStatus)&&(user.maritalStatus="Married")),null===user.creditProfileScore.sLocativeSituation||void 0===user.creditProfileScore.sLocativeSituation?completePersonalQns=!1:personalScore+=Number(user.creditProfileScore.sLocativeSituation),null===user.creditProfileScore.sLocativeType||void 0===user.creditProfileScore.sLocativeType?completePersonalQns=!1:personalScore+=Number(user.creditProfileScore.sLocativeType),console.log(personalScore),null===user.creditProfileScore.sNoOfDependents||void 0===user.creditProfileScore.sNoOfDependents?completePersonalQns=!1:(personalScore+=Number(user.creditProfileScore.sNoOfDependents),3===Number(user.creditProfileScore.sNoOfDependents)?user.noOfDependents=0:2===Number(user.creditProfileScore.sNoOfDependents)?user.noOfDependents=1:1===Number(user.creditProfileScore.sNoOfDependents)&&(user.noOfDependents=2)),user.completePersonalQns=completePersonalQns,user.personalRating=personalScore,{completePersonalQns:completePersonalQns,personalScore:personalScore}},verifyQnsJobCompleted=function(user){var completeJobQns=!0,jobScore=0;return null===user.creditProfileScore.sCurrentOccupation||void 0===user.creditProfileScore.sCurrentOccupation?completeJobQns=!1:(jobScore+=Number(user.creditProfileScore.sCurrentOccupation),3===Number(user.creditProfileScore.sCurrentOccupation)?user.currentOccupation="Salaried Employee":2===Number(user.creditProfileScore.sCurrentOccupation)?user.currentOccupation="Businessman/Self-employed":1===Number(user.creditProfileScore.sCurrentOccupation)?user.currentOccupation="Student":user.currentOccupation="Unemployed"),null===user.creditProfileScore.sCurrentWorkPeriod||void 0===user.creditProfileScore.sCurrentWorkPeriod?completeJobQns=!1:jobScore+=Number(user.creditProfileScore.sCurrentWorkPeriod),null===user.creditProfileScore.sLastWorkPeriod||void 0===user.creditProfileScore.sLastWorkPeriod?completeJobQns=!1:jobScore+=Number(user.creditProfileScore.sLastWorkPeriod),user.completeJobQns=completeJobQns,user.jobRating=jobScore,{completeJobQns:completeJobQns,jobScore:jobScore}},verifyQnsFinanceCompleted=function(user){var completeFinanceQns=!0,financeScore=0;return null===user.creditProfileScore.sMonthlyIncome||void 0===user.creditProfileScore.sMonthlyIncome?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sMonthlyIncome),null===user.creditProfileScore.sMonthlyExpense||void 0===user.creditProfileScore.sMonthlyExpense?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sMonthlyExpense),null===user.creditProfileScore.sMonthlySavings||void 0===user.creditProfileScore.sMonthlySavings?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sMonthlySavings),null===user.creditProfileScore.sCreditHistory||void 0===user.creditProfileScore.sCreditHistory?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sCreditHistory),null===user.creditProfileScore.sBankruptStatus||void 0===user.creditProfileScore.sBankruptStatus?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sBankruptStatus),null===user.creditProfileScore.sNumberOfCreditCards||void 0===user.creditProfileScore.sNumberOfCreditCards?completeFinanceQns=!1:financeScore+=Number(user.creditProfileScore.sNumberOfCreditCards),user.completeFinanceQns=completeFinanceQns,user.financeRating=financeScore,{completeFinanceQns:completeFinanceQns,financeScore:financeScore}}}]),angular.module("users").controller("SettingsController",["$rootScope","$scope","$http","$state","$timeout","$location","Users","Authentication","Upload",function($rootScope,$scope,$http,$state,$timeout,$location,Users,Authentication,Upload){$scope.user=Authentication.user,$scope.user||$location.path("/");var originalUserData=angular.copy(Authentication.user);if($scope.decachedImageUrl="/img/default_avatar.jpg",$scope.user.profilePic){var imageUrl="https://hexapic.s3.amazonaws.com/"+Authentication.user.profilePic;$scope.decachedImageUrl=imageUrl+"?decache="+Math.random()}$scope.stuff="",$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.reset=function(){$scope.success=$scope.error=null,$scope.user=Authentication.user},$scope.cancel=function(){$scope.user=originalUserData,$scope.submitted=!1},$scope.updateUserProfilePersonal=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.updatedProfileSettings=!0;try{var birthYear=$scope.user.dateOfBirth.getFullYear(),birthMonth=$scope.user.dateOfBirth.getMonth(),birthDate=$scope.user.dateOfBirth.getDate(),currDate=new Date,currYear=currDate.getFullYear(),currMonth=currDate.getMonth(),currDay=currDate.getDate();currMonth>birthMonth||birthMonth===currMonth&&currDay>=birthDate?$scope.user.age=currYear-birthYear:$scope.user.age=currYear-birthYear-1}catch(e){console.log("no change in date")}"Male"===$scope.user.gender?$scope.user.sGender=1:$scope.user.sGender=0;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),console.log(user)}else $scope.submitted=!0},$scope.updateUserProfileWork=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.updatedProfileSettings=!0;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),console.log(user)}else $scope.submitted=!0},$scope.updateUserProfilePrivacy=function(isValid){if(isValid){$scope.success=$scope.error=null,$scope.user.updatedProfileSettings=!0;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message}),console.log(user)}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})};var upload_file=function(file,signed_request,url){$http.put(signed_request,file).success(function(response){$scope.decachedImageUrl=url+"?decache="+Math.random(),$rootScope.profileImgUrl=url+"?decache="+Math.random(),$state.go($state.current,{},{reload:!0})}).error(function(response){alert("Could not upload file.")})},get_signed_request=function(file){"https://hexapic.s3.amazonaws.com/sign_s3?file_name="+$scope.user.profilePic+"&file_type="+file.type;console.log(file),$http.get("/signaws",file).success(function(response){upload_file(file,response.signed_request,response.url)}).error(function(response){alert("Could not get signed URL.")})},appendPic=function(file){var str=angular.copy($scope.user.email).split("@");$scope.user.profilePic=str[0],$scope.user.profilePicType=file.type;var user=new Users($scope.user);user.$update(function(response){Authentication.user=response,get_signed_request(file)},function(response){$scope.error=response.data.message}),console.log(user)};$scope.upload=function(file){appendPic(file)},$scope.ngGridFix=function(){window.dispatchEvent(new Event("resize"))}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("CreditService",function(){var analysis=["N/A","Profile not completed"],creditGrade=function(creditRating){return creditRating>57&&65>creditRating?analysis=["A","Excellent - You have the characteristics of people who show the lowest possible risk and banks considers your credit to be of the highest quality. You show no default risk due to highest credit score. Chances of getting a loan is high."]:creditRating>47&&58>creditRating?analysis=["B","Good - People with a Grade B credit score shows lowest default risk because of high credit score and have good quality of loan applications. Chances of getting a loan will be above average."]:creditRating>31&&48>creditRating?analysis=["C","Average - Grade ‘C’ represents medium level of default/ credit risk as having average level of credit score and having an average quality of loan application. Chances of getting a loan will be low."]:creditRating>0&&32>creditRating&&(analysis=["D","Below Average - Grade ‘D’ indicates the high level of risk and also having below average credit score. People with this grade will not be qualified for loan by banks."]),analysis};return{creditGrade:creditGrade}}),angular.module("users").factory("QuestionnaireService",["$resource",function($resource){var qnsPersonal=[{qnID:"gender",qnModel:"user.creditProfileScore.sGender",content:"What is your Gender?",options:["Male","Female"],rating:{Male:1,Female:0}},{qnID:"age",qnModel:"user.creditProfileScore.sAge",content:"What is your Age?",options:["Between 20 and 30 years","Between 30 and 40 years","Between 40 and 50 years","Between 50 and 60 years","Above 60 years"],rating:{"Between 20 and 30 years":4,"Between 30 and 40 years":3,"Between 40 and 50 years":2,"Between 50 and 60 years":1,"Above 60 years":0}},{qnID:"educationLevel",qnModel:"user.creditProfileScore.sEducationLevel",content:"What is your Highest Education Level?",options:["PhD","Masters","Graduate","Undergraduate","A/O/N Levels","PSLE & Below"],rating:{PhD:5,Masters:4,Graduate:3,Undergraduate:2,"A/O/N Levels":1,PSLE:0}},{qnID:"maritalStatus",qnModel:"user.creditProfileScore.sMaritalStatus",content:"What is your Marital Status?",options:["Married","Single/Divorced/Widowed"],rating:{Married:3,"Single/Divorced/Widowed":1}},{qnID:"locativeType",qnModel:"user.creditProfileScore.sLocativeType",content:"What is your highest value housing that you currently own?",options:["Landed Property","Condo/Private Apartments","HDB Executive Flats/ HUDC Flats/ Studio Apartments","HDB (Others)","Shop houses/ other housing units","N/A"],
rating:{"Landed Property":5,"Condo/Private Apartments":4,"HDB Executive Flats/ HUDC Flats/ Studio Apartments":3,"HDB (Others)":2,"Shop houses/ other housing units":1,"N/A":0}},{qnID:"locativeSituation",qnModel:"user.creditProfileScore.sLocativeSituation",content:"What is your current ownership status?",options:["Own house","Personal apartment","Parents apartment","Rent"],rating:{"Own house":3,"Personal apartment":2,"Parents apartment":1,Rent:0}},{qnID:"noOfDependents",qnModel:"user.creditProfileScore.sNoOfDependents",content:"How many Dependents do you have?",options:["0 person","1 person","2 persons","3 or more persons"],rating:{"0 person":3,"1 person":2,"2 persons":1,"3 or more persons":0}}],qnsJob=[{qnID:"currentOccupation",qnModel:"user.creditProfileScore.sCurrentOccupation",content:"What is your current occupation?",options:["Salaried Employee","Businessman/Self-employed","Student","Unemployed"],rating:{"Salaried Employee":3,"Businessman/Self-employed":2,Student:1,Unemployed:0}},{qnID:"currentWorkPeriod",qnModel:"user.creditProfileScore.sCurrentWorkPeriod",content:"How long have you been with your current employer?",options:["Greater than 5 years","Between 2 and 5 years","Between 1 and 2 years","Retired","NA"],rating:{"Greater than 5 years":4,"Between 2 and 5 years":3,"Between 1 and 2 years":2,Retired:1,NA:0}},{qnID:"lastWorkPeriod",qnModel:"user.creditProfileScore.sLastWorkPeriod",content:"How long have you been with your previous employer?",options:["Greater than 5 years","Between 2 and 5 years","Between 1 and 2 years","Retired","NA"],rating:{"Greater than 5 years":4,"Between 2 and 5 years":3,"Between 1 and 2 years":2,Retired:1,NA:0}}],qnsFinance=[{qnID:"monthlyIncome",qnModel:"user.creditProfileScore.sMonthlyIncome",content:"What is your average monthly Net Income?",options:["Above $10,000","Between $8,000 and $10,000","Between $6,000 and $8,000","Between $4,000 and $6,000","Between $1,000 and $4,000","Less than $1,000","NA"],rating:{"Above $10,000":6,"Between $8,000 and $10,000":5,"Between $6,000 and $8,000":4,"Between $4,000 and $6,000":3,"Between $1,000 and $4,000":2,"Less than $1,000":1,NA:0}},{qnID:"monthlyExpense",qnModel:"user.creditProfileScore.sMonthlyExpense",content:"What is your average monthly expenditure?",options:["Above $10,000","Between $8,000 and $10,000","Between $6,000 and $8,000","Between $4,000 and $6,000","Between $1,000 and $4,000","Less than $1,000","NA"],rating:{"Above $10,000":6,"Between $8,000 and $10,000":5,"Between $6,000 and $8,000":4,"Between $4,000 and $6,000":3,"Between $1,000 and $4,000":2,"Less than $1,000":1,NA:0}},{qnID:"monthlySavings",qnModel:"user.creditProfileScore.sMonthlySavings",content:"What is your average monthly savings?",options:["Above $10,000","Between $8,000 and $10,000","Between $6,000 and $8,000","Between $4,000 and $6,000","Between $1,000 and $4,000","Less than $1,000","NA"],rating:{"Above $10,000":6,"Between $8,000 and $10,000":5,"Between $6,000 and $8,000":4,"Between $4,000 and $6,000":3,"Between $1,000 and $4,000":2,"Less than $1,000":1,NA:0}},{qnID:"creditHistory",qnModel:"user.creditProfileScore.sCreditHistory",content:"Have you had any history of credit default?",options:["90 days default","60 days default","30 days default","NA"],rating:{"90 days default":1,"60 days default":2,"30 days default":3,NA:4}},{qnID:"bankruptStatus",qnModel:"user.creditProfileScore.sBankruptStatus",content:"Have you been bankrupt in the last 6 years?",options:["Yes","No"],rating:{Yes:0,No:4}},{qnID:"numberOfCreditCards",qnModel:"user.creditProfileScore.sNumberOfCreditCards",content:"How many credit cards do you own?",options:["5 or more","3 - 4","2","1","0"],rating:{"5 or more":4,"3 - 4":3,2:2,1:1,0:0}}],creditProfileScore={sGender:0,sAge:0,sEducationLevel:0,sMaritalStatus:0,sLocativeType:0,sLocativeSituation:0,sNoOfDependents:0,sCurrentOccupation:0,sCurrentWorkPeriod:0,sLastWorkPeriod:0,sMonthlyIncome:0,sMonthlyExpense:0,sMonthlySavings:0,sCreditHistory:0,sBankruptStatus:0,sNumberOfCreditCards:0};return{qnsPersonal:qnsPersonal,qnsJob:qnsJob,qnsFinance:qnsFinance,creditProfileScore:creditProfileScore}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"},retrieve:{method:"GET"}})}]);